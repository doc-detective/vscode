/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.activate = activate;
exports.deactivate = deactivate;
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = __importStar(__webpack_require__(1));
const { detectTests } = __webpack_require__(2);
// Create an output channel for logging
const outputChannel = vscode.window.createOutputChannel('Doc Detective');
// WebviewViewProvider for Doc Detective
class DocDetectiveWebviewViewProvider {
    context;
    static viewType = 'docDetectiveView';
    _view;
    constructor(context) {
        this.context = context;
    }
    async resolveWebviewView(webviewView, context, _token) {
        this._view = webviewView;
        webviewView.webview.options = {
            enableScripts: true
        };
        // Initial render
        await this.updateWebview();
        // Listen for messages from the webview (if needed)
        webviewView.webview.onDidReceiveMessage(async (message) => {
            if (message.command === 'refresh') {
                await this.updateWebview();
            }
        });
    }
    async updateWebview() {
        if (!this._view) {
            return;
        }
        // Get open files
        const editors = vscode.window.visibleTextEditors;
        const filePaths = editors
            .filter(e => e.document.uri.scheme === 'file')
            .map(e => e.document.uri.fsPath);
        const uniquePaths = Array.from(new Set(filePaths));
        // For each file, detect tests
        const results = {};
        for (const file of uniquePaths) {
            try {
                const suites = await detectTests({ config: { input: file } });
                results[file] = suites;
            }
            catch (e) {
                results[file] = { error: String(e) };
            }
        }
        // Render JSON in webview
        this._view.webview.html = this.getHtmlForWebview(results);
    }
    getHtmlForWebview(jsonObj) {
        const jsonString = JSON.stringify(jsonObj).replace(/</g, '\u003c');
        return `<!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Doc Detective Results</title>
        <style>
          body { font-family: monospace; margin: 0; padding: 0.5em; background: #1e1e1e; color: #d4d4d4; }
          .collapsible { cursor: pointer; }
          .content { display: block; margin-left: 1.5em; }
          li:not(.active) > .content { display: none; }
          .key { color: #9cdcfe; }
          .string { color: #ce9178; }
          .number { color: #b5cea8; }
          .boolean { color: #569cd6; }
          .null { color: #d4d4d4; }
          ul { list-style-type: none; margin: 0; padding: 0; }
          .yaml-indent { color: #555; }
          .yaml-dash { color: #666; }
          .toggle { color: #569cd6; }
        </style>
      </head>
      <body>
        <div id="json"></div>
        <script>
          const jsonObj = JSON.parse('' + '${jsonString}'.replace(/\\u003c/g, '<'));
          function escapeHTML(str) {
            return str.replace(/[&<>]/g, function(tag) {
              const chars = {'&':'&amp;','<':'&lt;','>':'&gt;'};
              return chars[tag] || tag;
            });
          }
          function renderYAML(obj, indent = 0, isArrayItem = false) {
            const INDENT = '  ';
            const pad = (n) => INDENT.repeat(n);
            
            if (typeof obj !== 'object' || obj === null) {
              if (typeof obj === 'string') return '<span class="string">' + escapeHTML(obj) + '</span>';
              if (typeof obj === 'number') return '<span class="number">' + obj + '</span>';
              if (typeof obj === 'boolean') return '<span class="boolean">' + obj + '</span>';
              if (obj === null) return '<span class="null">null</span>';
              return obj;
            }
            
            if (Array.isArray(obj)) {
              if (obj.length === 0) return '[]';
              let html = '<ul>';
              
              for (let i = 0; i < obj.length; i++) {
                const value = obj[i];
                const indentSpan = '<span class="yaml-indent">' + pad(indent) + '</span>';
                
                if (typeof value === 'object' && value !== null) {
                  html += '<li class="active">' + 
                          indentSpan + 
                          '<span class="collapsible"><span class="toggle">▼</span> <span class="yaml-dash">-</span></span>' +
                          '<div class="content">' + renderYAML(value, indent + 1, true) + '</div>' +
                          '</li>';
                } else {
                  html += '<li>' + indentSpan + '<span class="yaml-dash">-</span> ' + 
                          renderYAML(value, indent + 1, true) + '</li>';
                }
              }
              
              html += '</ul>';
              return html;
            } else {
              const keys = Object.keys(obj);
              if (keys.length === 0) return '{}';
              
              let html = '<ul>';
              keys.forEach(function(key) {
                const value = obj[key];
                const indentation = '<span class="yaml-indent">' + pad(indent) + '</span>';
                
                if (typeof value === 'object' && value !== null) {
                  html += '<li class="active">' + 
                          indentation +
                          '<span class="collapsible"><span class="toggle">▼</span> <span class="key">' + escapeHTML(key) + ':</span></span>' +
                          '<div class="content">' + renderYAML(value, indent + 1) + '</div>' +
                          '</li>';
                } else {
                  html += '<li>' + indentation + '<span class="key">' + 
                          escapeHTML(key) + ':</span> ' + renderYAML(value, indent + 1) + '</li>';
                }
              });
              
              html += '</ul>';
              return html;
            }
          }
          
          document.getElementById('json').innerHTML = renderYAML(jsonObj, 0);
          document.querySelectorAll('.collapsible').forEach(function(el) {
            el.addEventListener('click', function(e) {
              e.stopPropagation();
              var parent = el.parentElement;
              parent.classList.toggle('active');
              
              // Update the toggle arrow
              const toggleEl = el.querySelector('.toggle');
              if (toggleEl) {
                toggleEl.textContent = parent.classList.contains('active') ? '▼' : '▶';
              }
            });
          });
          const vscode = acquireVsCodeApi();
        </script>
      </body>
      </html>`;
    }
}
// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
function activate(context) {
    console.log('Congratulations, your extension "doc-detective-vsc" is now active!');
    const disposable = vscode.commands.registerCommand('doc-detective-vsc.helloWorld', () => {
        vscode.window.showInformationMessage('Hello World from doc-detective-vsc!');
    });
    context.subscriptions.push(disposable);
    // Register the WebviewViewProvider for the sidebar
    const provider = new DocDetectiveWebviewViewProvider(context);
    context.subscriptions.push(vscode.window.registerWebviewViewProvider('docDetectiveView', provider));
    // Refresh the webview when visible editors change
    context.subscriptions.push(vscode.window.onDidChangeVisibleTextEditors(() => provider.updateWebview()));
    // Hot-reload the webview when the active editor changes (switching tabs)
    context.subscriptions.push(vscode.window.onDidChangeActiveTextEditor(() => provider.updateWebview()));
    context.subscriptions.push(outputChannel);
}
// This method is called when your extension is deactivated
function deactivate() { }


/***/ }),
/* 1 */
/***/ ((module) => {

"use strict";
module.exports = require("vscode");

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const { setConfig } = __webpack_require__(3);
const { qualifyFiles, parseTests, log } = __webpack_require__(294);
const { resolveDetectedTests } = __webpack_require__(413);
// const { telemetryNotice, sendTelemetry } = require("./telem");

exports.detectTests = detectTests;
exports.resolveTests = resolveTests;
exports.detectAndResolveTests = detectAndResolveTests;

// const supportMessage = `
// ##########################################################################
// # Thanks for using Doc Detective! If this project was helpful to you,    #
// # please consider starring the repo on GitHub or sponsoring the project: #
// # - GitHub Sponsors: https://github.com/sponsors/doc-detective           #
// # - Open Collective: https://opencollective.com/doc-detective            #
// ##########################################################################`;

/**
 * Detects and resolves tests based on the provided configuration.
 *
 * This function performs the following steps:
 * 1. Sets and validates the configuration
 * 2. Detects tests according to the configuration
 * 3. Resolves the detected tests
 *
 * @async
 * @param {Object} options - The options object
 * @param {Object} options.config - The configuration object for test detection and resolution
 * @returns {Promise<Object>} A promise that resolves to an object of resolved tests
 */
async function detectAndResolveTests({ config }) {
  // Set config
  config = await setConfig({ config });
  // Detect tests
  const detectedTests = await detectTests({ config });
  if (!detectedTests || detectedTests.length === 0) {
    log(config, "warn", "No tests detected.");
    return null;
  }
  // Resolve tests
  const resolvedTests = await resolveTests({ config, detectedTests });
  return resolvedTests;
}

/**
 * Resolves test configurations by first ensuring the environment is set in the config,
 * then processing the detected tests to resolve them according to the configuration.
 *
 * @async
 * @param {Object} params - The parameters object.
 * @param {Object} params.config - The configuration object, which may need to be resolved if environment isn't set.
 * @param {Object} params.detectedTests - The tests that have been detected and need to be resolved.
 * @returns {Promise<Object>} A promise that resolves to an object of resolved test configurations.
 */
async function resolveTests({ config, detectedTests }) {
  if (!config.environment) {
    // If environment isn't set, config hasn't been resolved
    config = await setConfig({ config });
    log(config, "debug", `CONFIG:`);
    log(config, "debug", config);
  }
  // Resolve detected tests
  const resolvedTests = await resolveDetectedTests({ config, detectedTests });
  return resolvedTests;
}

/**
 * Detects and processes test specifications based on provided configuration.
 *
 * This function performs the following steps:
 * 1. Resolves configuration if not already done
 * 2. Qualifies files based on configuration
 * 3. Parses test specifications from the qualified files
 *
 * @async
 * @param {Object} options - The options object
 * @param {Object} options.config - Configuration object, may be unresolved
 * @returns {Promise<Array>} - Promise resolving to an array of test specifications
 */
async function detectTests({ config }) {
  if (!config.environment) {
    // If environment isn't set, config hasn't been resolved
    config = await setConfig({ config });
    log(config, "debug", `CONFIG:`);
    log(config, "debug", config);
  }
  // // Telemetry notice
  // telemetryNotice(config);

  // Set files
  const files = await qualifyFiles({ config });
  log(config, "debug", `FILES:`);
  log(config, "debug", files);

  // Set test specs
  const specs = await parseTests({ config, files });
  log(config, "debug", `SPECS:`);
  log(config, "info", specs);

  // Run test specs
  // const results = await runSpecs(config, specs);
  // log(config, "info", "RESULTS:");
  // log(config, "info", results);
  // log(config, "info", "Cleaning up and finishing post-processing.");

  // Send telemetry
  // sendTelemetry(config, "detect", results);
  // log(config, "info", supportMessage);

  return specs;
}


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const os = __webpack_require__(4);
const { validate } = __webpack_require__(5);
const { log, loadEnvs, replaceEnvs } = __webpack_require__(294);
const { loadDescription } = __webpack_require__(298);

exports.setConfig = setConfig;

// Map of Node-detected platforms to common-term equivalents
const platformMap = {
  darwin: "mac",
  linux: "linux",
  win32: "windows",
};

// List of default file type definitions
// TODO: Add defaults for all supported files
let defaultFileTypes = {
  asciidoc_1_0: {
    name: "asciidoc",
    extensions: ["adoc", "asciidoc", "asc"],
    inlineStatements: {
      testStart: ["\\/\\/\\s+\\(\\s*test\\s+([\\s\\S]*?)\\s*\\)"],
      testEnd: ["\\/\\/\\s+\\(\\s*test end\\s*\\)"],
      ignoreStart: ["\\/\\/\\s+\\(\\s*test ignore start\\s*\\)"],
      ignoreEnd: ["\\/\\/\\s+\\(\\s*test ignore end\\s*\\)"],
      step: ["\\/\\/\\s+\\(\\s*step\\s+([\\s\\S]*?)\\s*\\)"],
    },
    markup: [],
  },
  html_1_0: {
    name: "html",
    extensions: ["html", "htm"],
    inlineStatements: {
      testStart: ["<!--\\s*test\\s+?([\\s\\S]*?)\\s*-->"],
      testEnd: ["<!--\\s*test end\\s*([\\s\\S]*?)\\s*-->"],
      ignoreStart: ["<!--\\s*test ignore start\\s*-->"],
      ignoreEnd: ["<!--\\s*test ignore end\\s*-->"],
      step: ["<!--\\s*step\\s+?([\\s\\S]*?)\\s*-->"],
    },
    markup: [],
  },
  markdown_1_0: {
    name: "markdown",
    extensions: ["md", "markdown", "mdx"],
    inlineStatements: {
      testStart: [
        "{\\/\\*\\s*test\\s+?([\\s\\S]*?)\\s*\\*\\/}",
        "<!--\\s*test\\s*([\\s\\S]*?)\\s*-->",
        "\\[comment\\]:\\s+#\\s+\\(test\\s*(.*?)\\s*\\)",
        "\\[comment\\]:\\s+#\\s+\\(test start\\s*(.*?)\\s*\\)",
      ],
      testEnd: [
        "{\\/\\*\\s*test end\\s*\\*\\/}",
        "<!--\\s*test end\\s*([\\s\\S]*?)\\s*-->",
        "\\[comment\\]:\\s+#\\s+\\(test end\\)",
      ],
      ignoreStart: [
        "{\\/\\*\\s*test ignore start\\s*\\*\\/}",
        "<!--\\s*test ignore start\\s*-->",
      ],
      ignoreEnd: [
        "{\\/\\*\\s*test ignore end\\s*\\*\\/}",
        "<!--\\s*test ignore end\\s*-->",
      ],
      step: [
        "{\\/\\*\\s*step\\s+?([\\s\\S]*?)\\s*\\*\\/}",
        "<!--\\s*step\\s*([\\s\\S]*?)\\s*-->",
        "\\[comment\\]:\\s+#\\s+\\(step\\s*(.*?)\\s*\\)",
      ],
    },
    markup: [
      {
        name: "checkHyperlink",
        regex: [
          '(?<!\\!)\\[[^\\]]+\\]\\(\\s*(https?:\\/\\/[^\\s)]+)(?:\\s+"[^"]*")?\\s*\\)',
        ],
        actions: ["checkLink"],
      },
      {
        name: "clickOnscreenText",
        regex: [
          "\\b(?:[Cc]lick|[Tt]ap|[Ll]eft-click|[Cc]hoose|[Ss]elect|[Cc]heck)\\b\\s+\\*\\*((?:(?!\\*\\*).)+)\\*\\*",
        ],
        actions: ["click"],
      },
      {
        name: "findOnscreenText",
        regex: ["\\*\\*((?:(?!\\*\\*).)+)\\*\\*"],
        actions: ["find"],
      },
      {
        name: "goToUrl",
        regex: ["\\b(?:[Gg]o\\s+to|[Oo]pen|[Nn]avigate\\s+to|[Vv]isit|[Aa]ccess|[Pp]roceed\\s+to|[Ll]aunch)\\b\\s+\\[[^\\]]+\\]\\(\\s*(https?:\\/\\/[^\\s)]+)(?:\\s+\"[^\"]*\")?\\s*\\)"],
        actions: ["goTo"],
      },
      {
        name: "screenshotImage",
        regex: ["!\\[[^\\]]*\\]\\(\\s*([^\\s)]+)(?:\\s+\"[^\"]*\")?\\s*\\)\\s*\\{(?=[^}]*\\.screenshot)[^}]*\\}"],
        actions: ["screenshot"],
      },
      {
        name: "typeText",
        regex: ["\\b(?:press|enter|type)\\b\\s+\"([^\"]+)\""],
        actions: ["type"],
      },
      // {
      //   name: "runBash",
      //   regex: ["```(?:bash)\\b\\s*\\n(?<code>.*?)(?=\\n```)"],
      //   batchMatches: true,
      //   actions: [
      //     {
      //       runCode: {
      //         language: "bash",
      //         code: "$1",
      //       },
      //     },
      //   ],
      // },
    ],
  },
};
// Set keyword versions
defaultFileTypes = {
  ...defaultFileTypes,
  markdown: defaultFileTypes.markdown_1_0,
  asciidoc: defaultFileTypes.asciidoc_1_0,
  html: defaultFileTypes.html_1_0,
};

/**
 * Sets up and validates the configuration object for Doc Detective
 * @async
 * @param {Object} config - The configuration object to process
 * @returns {Promise<Object>} The processed and validated configuration object
 * @throws Will exit process with code 1 if configuration is invalid
 */
async function setConfig({ config }) {
  // Set environment variables from file
  if (config.loadVariables) await loadEnvs(config.loadVariables);

  // Load environment variables for `config`
  config = replaceEnvs(config);

  // Validate inbound `config`.
  const validityCheck = validate({ schemaKey: "config_v3", object: config });
  if (!validityCheck.valid) {
    // TODO: Improve error message reporting.
    log(
      config,
      "error",
      `Invalid config object: ${validityCheck.errors}. Exiting.`
    );
    process.exit(1);
  }
  config = validityCheck.object;

  // Replace fileType strings with objects
  config.fileTypes = config.fileTypes.map((fileType) => {
    if (typeof fileType === "object") return fileType;
    const fileTypeObject = defaultFileTypes[fileType];
    if (typeof fileTypeObject !== "undefined") return fileTypeObject;
    log(
      config,
      "error",
      `Invalid config. "${fileType}" isn't a valid fileType value.`
    );
    process.exit(1);
  });

  // TODO: Combine extended fileTypes with overrides

  // Standardize value formats
  if (typeof config.input === "string") config.input = [config.input];
  if (typeof config.beforeAny === "string") {
    if (config.beforeAny === "") {
      config.beforeAny = [];
    } else {
      config.beforeAny = [config.beforeAny];
    }
  }
  if (typeof config.afterAll === "string") {
    if (config.afterAll === "") {
      config.afterAll = [];
    } else {
      config.afterAll = [config.afterAll];
    }
  }
  if (typeof config.fileTypes === "string") {
    config.fileTypes = [config.fileTypes];
  }
  config.fileTypes = config.fileTypes.map((fileType) => {
    if (fileType.inlineStatements) {
      if (typeof fileType.inlineStatements.testStart === "string")
        fileType.inlineStatements.testStart = [
          fileType.inlineStatements.testStart,
        ];
      if (typeof fileType.inlineStatements.testEnd === "string")
        fileType.inlineStatements.testEnd = [fileType.inlineStatements.testEnd];
      if (typeof fileType.inlineStatements.ignoreStart === "string")
        fileType.inlineStatements.ignoreStart = [
          fileType.inlineStatements.ignoreStart,
        ];
      if (typeof fileType.inlineStatements.ignoreEnd === "string")
        fileType.inlineStatements.ignoreEnd = [
          fileType.inlineStatements.ignoreEnd,
        ];
      if (typeof fileType.inlineStatements.step === "string")
        fileType.inlineStatements.step = [fileType.inlineStatements.step];
    }
    if (fileType.markup) {
      fileType.markup = fileType.markup.map((markup) => {
        if (typeof markup.regex === "string") markup.regex = [markup.regex];
        return markup;
      });
    }

    return fileType;
  });

  // Detect current environment.
  config.environment = getEnvironment();
  // TODO: Revise loadDescriptions() so it doesn't mutate the input but instead returns an updated object
  await loadDescriptions(config);

  return config;
}

/**
 * Loads OpenAPI descriptions for all configured OpenAPI integrations.
 *
 * @async
 * @param {Object} config - The configuration object.
 * @returns {Promise<void>} - A promise that resolves when all descriptions are loaded.
 *
 * @remarks
 * This function modifies the input config object by:
 * 1. Adding a 'definition' property to each OpenAPI configuration with the loaded description.
 * 2. Removing any OpenAPI configurations where the description failed to load.
 */
async function loadDescriptions(config) {
  if (config?.integrations?.openApi) {
    for (const openApiConfig of config.integrations.openApi) {
      try {
        openApiConfig.definition = await loadDescription(
          openApiConfig.descriptionPath
        );
      } catch (error) {
        log(
          config,
          "error",
          `Failed to load OpenAPI description from ${openApiConfig.descriptionPath}: ${error.message}`
        );
        // Remove the failed OpenAPI configuration
        config.integrations.openApi = config.integrations.openApi.filter(
          (item) => item !== openApiConfig
        );
      }
    }
  }
}

// Detect aspects of the environment running Doc Detective.
function getEnvironment() {
  const environment = {};
  // Detect system architecture
  environment.arch = os.arch();
  // Detect system platform
  environment.platform = platformMap[process.platform];
  // Detect working directory
  environment.workingDirectory = process.cwd();
  return environment;
}


/***/ }),
/* 4 */
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),
/* 5 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { schemas } = __webpack_require__(6);
const { validate, transformToSchemaKey } = __webpack_require__(8);
const { resolvePaths } = __webpack_require__(141);
const { readFile } = __webpack_require__(144);

module.exports = {
  schemas,
  validate,
  resolvePaths,
  readFile,
  transformToSchemaKey,
};


/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const schemas = __webpack_require__(7);

// Exports
exports.schemas = schemas;

// console.log(schemas);

/***/ }),
/* 7 */
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"checkLink_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]},"click_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},"config_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"config","description":"Configuration options for Doc Detective operations.","type":"object","additionalProperties":false,"dynamicDefaults":{"configId":"uuid"},"properties":{"configId":{"description":"Identifier for the configuration.","type":"string"},"configPath":{"description":"Path to the configuration file.","type":"string","readOnly":true},"input":{"description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","default":".","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"output":{"description":"Path of the directory in which to store the output of Doc Detective commands. If a file path is specified, Doc Detective attempts to honor the file name specified, but file path behavior is controlled by the configured reporters.","type":"string","default":"."},"recursive":{"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specifications and source files.","type":"boolean","default":true},"relativePathBase":{"description":"Whether paths should be interpreted as relative to the current working directory (`cwd`) or to the file in which they\'re specified (`file`).","type":"string","enum":["cwd","file"],"default":"file"},"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]},"origin":{"description":"Default protocol and domain to use for relative URLs.","type":"string"},"beforeAny":{"description":"Path(s) to test specifications to perform before those specified by `input`. Useful for setting up testing environments.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"afterAll":{"description":"Path(s) to test specifications to perform after those specified by `input`. Useful for cleaning up testing environments.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on defined markup.","default":true},"logLevel":{"description":"Amount of detail to output when performing an operation.","type":"string","enum":["silent","error","warning","info","debug"],"default":"info"},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"fileTypes":{"description":"Configuration for file types and their markup detection.","default":["markdown","asciidoc","html"],"anyOf":[{"type":"array","minItems":1,"items":{"anyOf":[{"$comment":"Simple mode: Reference predefined templates by name.","title":"Predefined","type":"string","enum":["markdown","asciidoc","html"]},{"$comment":"Custom mode: Extend predefined templates or write whole new ones.","title":"Custom","type":"object","required":["extensions"],"properties":{"name":{"description":"Name of the file type.","type":"string"},"extends":{"$comment":"In development","description":"Base template to extend.","type":"string","enum":["markdown","asciidoc","html"]},"extensions":{"description":"File extensions to use with type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"inlineStatements":{"description":"Statements to include tests and steps inside the content of the file, such as within Markdown.","type":"object","properties":{"testStart":{"description":"Regular expressions that indicate the start of a test. If capture groups are used, the first capture group is used for the statement. If no capture groups are used, the entire match is used for the statement.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"testEnd":{"description":"Regular expressions that indicate that the current test is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreStart":{"description":"Regular expressions that indicates that the following content should be ignored for testing purposes.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreEnd":{"description":"Regular expressions that indicate that the ignored section of content is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"step":{"description":"Regular expressions that indicate a step in a test.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]}}},"markup":{"description":"Markup definitions for the file type.","type":"array","minItems":1,"items":{"type":"object","properties":{"name":{"description":"Name of the markup definition","type":"string"},"regex":{"description":"Regular expressions to match the markup type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"batchMatches":{"description":"If `true`, all matches are combined into a single string.","type":"boolean","default":false},"actions":{"description":"Actions to perform when the markup type is detected.","anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"type":"array","items":{"anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}]}}]}}}}}},{"title":"Executable","$comment":"Executable mode: Convert executable inputs directly into tests.","type":"object","required":["extensions"],"properties":{"extensions":{"description":"File extensions to use with type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"runShell":{"description":"`runShell` step to perform for this file type. Use $1 as a placeholder for the file path.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}]}}}]}}]},"integrations":{"description":"Options for connecting to external services.","type":"object","additionalProperties":false,"properties":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}}}},"telemetry":{"description":"Options around sending telemetry for Doc Detective usage.","type":"object","additionalProperties":false,"properties":{"send":{"description":"If `true`, sends Doc Detective telemetry.","type":"boolean","default":true},"userId":{"description":"Identifier for the organization, group, or individual running Doc Detective.","type":"string"}},"required":["send"],"default":{"send":true}},"environment":{"type":"object","description":"Environment information for the system running Doc Detective.","readOnly":true,"additionalProperties":false,"required":["platform"],"properties":{"workingDirectory":{"description":"The current working directory of the process running Doc Detective.","type":"string"},"platform":{"description":"The operating system type running Doc Detective.","type":"string","enum":["linux","mac","windows"]},"arch":{"description":"The processor architecture of the system running Doc Detective.","type":"string","enum":["arm32","arm64","x32","x64"]}}}},"components":{"schemas":{"environment":{"type":"object","description":"Environment information for the system running Doc Detective.","readOnly":true,"additionalProperties":false,"required":["platform"],"properties":{"workingDirectory":{"description":"The current working directory of the process running Doc Detective.","type":"string"},"platform":{"description":"The operating system type running Doc Detective.","type":"string","enum":["linux","mac","windows"]},"arch":{"description":"The processor architecture of the system running Doc Detective.","type":"string","enum":["arm32","arm64","x32","x64"]}}},"markupDefinition":{"type":"object","properties":{"name":{"description":"Name of the markup definition","type":"string"},"regex":{"description":"Regular expressions to match the markup type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"batchMatches":{"description":"If `true`, all matches are combined into a single string.","type":"boolean","default":false},"actions":{"description":"Actions to perform when the markup type is detected.","anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"type":"array","items":{"anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}]}}]}}},"markupActionString":{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},"inlineStatements":{"description":"Statements to include tests and steps inside the content of the file, such as within Markdown.","type":"object","properties":{"testStart":{"description":"Regular expressions that indicate the start of a test. If capture groups are used, the first capture group is used for the statement. If no capture groups are used, the entire match is used for the statement.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"testEnd":{"description":"Regular expressions that indicate that the current test is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreStart":{"description":"Regular expressions that indicates that the following content should be ignored for testing purposes.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreEnd":{"description":"Regular expressions that indicate that the ignored section of content is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"step":{"description":"Regular expressions that indicate a step in a test.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]}}},"stringOrArray":{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}}},"examples":[{},{"input":".","output":".","recursive":true,"loadVariables":".env","fileTypes":["markdown"]},{"fileTypes":[{"extends":"markdown","extensions":["md","markdown","mdx"],"inlineStatements":{"testStart":"<!--\\\\s*testStart\\\\s*(.*?)\\\\s*-->","testEnd":"<!-- testEnd -->","ignoreStart":"<!-- ignoreStart -->","ignoreEnd":"<!-- ignoreEnd -->","step":"<!--\\\\s*step\\\\s*(.*?)\\\\s*-->"},"markup":[{"name":"onscreenText","regex":"\\\\*\\\\*.+?\\\\*\\\\*","actions":"find"}]}]},{"fileTypes":[{"name":"Jupyter Notebooks","extensions":"ipynb","runShell":{"command":"jupyter","args":["nbconvert","--to","script","--execute","$1","--stdout"]}},{"name":"JavaScript","extensions":"js","runShell":{"command":"node $1"}},{"name":"Python","extensions":"py","runShell":{"command":"python $1"}}]},{"environment":{"platform":"windows","arch":"x64"}}]},"context_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]},"find_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]},"goTo_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]},"loadVariables_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]},"httpRequest_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]},"openApi_v3":{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},"record_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]},"resolvedTests_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"resolvedTests","description":"A collection of resolved tests ready to be performed.","type":"object","dynamicDefaults":{"resolvedTestsId":"uuid"},"properties":{"resolvedTestsId":{"type":"string","description":"Unique identifier for the resolved tests."},"config":{"$schema":"http://json-schema.org/draft-07/schema#","title":"config","description":"Configuration options for Doc Detective operations.","type":"object","additionalProperties":false,"dynamicDefaults":{"configId":"uuid"},"properties":{"configId":{"description":"Identifier for the configuration.","type":"string"},"configPath":{"description":"Path to the configuration file.","type":"string","readOnly":true},"input":{"description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","default":".","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"output":{"description":"Path of the directory in which to store the output of Doc Detective commands. If a file path is specified, Doc Detective attempts to honor the file name specified, but file path behavior is controlled by the configured reporters.","type":"string","default":"."},"recursive":{"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specifications and source files.","type":"boolean","default":true},"relativePathBase":{"description":"Whether paths should be interpreted as relative to the current working directory (`cwd`) or to the file in which they\'re specified (`file`).","type":"string","enum":["cwd","file"],"default":"file"},"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]},"origin":{"description":"Default protocol and domain to use for relative URLs.","type":"string"},"beforeAny":{"description":"Path(s) to test specifications to perform before those specified by `input`. Useful for setting up testing environments.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"afterAll":{"description":"Path(s) to test specifications to perform after those specified by `input`. Useful for cleaning up testing environments.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on defined markup.","default":true},"logLevel":{"description":"Amount of detail to output when performing an operation.","type":"string","enum":["silent","error","warning","info","debug"],"default":"info"},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"fileTypes":{"description":"Configuration for file types and their markup detection.","default":["markdown","asciidoc","html"],"anyOf":[{"type":"array","minItems":1,"items":{"anyOf":[{"$comment":"Simple mode: Reference predefined templates by name.","title":"Predefined","type":"string","enum":["markdown","asciidoc","html"]},{"$comment":"Custom mode: Extend predefined templates or write whole new ones.","title":"Custom","type":"object","required":["extensions"],"properties":{"name":{"description":"Name of the file type.","type":"string"},"extends":{"$comment":"In development","description":"Base template to extend.","type":"string","enum":["markdown","asciidoc","html"]},"extensions":{"description":"File extensions to use with type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"inlineStatements":{"description":"Statements to include tests and steps inside the content of the file, such as within Markdown.","type":"object","properties":{"testStart":{"description":"Regular expressions that indicate the start of a test. If capture groups are used, the first capture group is used for the statement. If no capture groups are used, the entire match is used for the statement.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"testEnd":{"description":"Regular expressions that indicate that the current test is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreStart":{"description":"Regular expressions that indicates that the following content should be ignored for testing purposes.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreEnd":{"description":"Regular expressions that indicate that the ignored section of content is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"step":{"description":"Regular expressions that indicate a step in a test.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]}}},"markup":{"description":"Markup definitions for the file type.","type":"array","minItems":1,"items":{"type":"object","properties":{"name":{"description":"Name of the markup definition","type":"string"},"regex":{"description":"Regular expressions to match the markup type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"batchMatches":{"description":"If `true`, all matches are combined into a single string.","type":"boolean","default":false},"actions":{"description":"Actions to perform when the markup type is detected.","anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"type":"array","items":{"anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}]}}]}}}}}},{"title":"Executable","$comment":"Executable mode: Convert executable inputs directly into tests.","type":"object","required":["extensions"],"properties":{"extensions":{"description":"File extensions to use with type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"runShell":{"description":"`runShell` step to perform for this file type. Use $1 as a placeholder for the file path.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}]}}}]}}]},"integrations":{"description":"Options for connecting to external services.","type":"object","additionalProperties":false,"properties":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}}}},"telemetry":{"description":"Options around sending telemetry for Doc Detective usage.","type":"object","additionalProperties":false,"properties":{"send":{"description":"If `true`, sends Doc Detective telemetry.","type":"boolean","default":true},"userId":{"description":"Identifier for the organization, group, or individual running Doc Detective.","type":"string"}},"required":["send"],"default":{"send":true}},"environment":{"type":"object","description":"Environment information for the system running Doc Detective.","readOnly":true,"additionalProperties":false,"required":["platform"],"properties":{"workingDirectory":{"description":"The current working directory of the process running Doc Detective.","type":"string"},"platform":{"description":"The operating system type running Doc Detective.","type":"string","enum":["linux","mac","windows"]},"arch":{"description":"The processor architecture of the system running Doc Detective.","type":"string","enum":["arm32","arm64","x32","x64"]}}}},"components":{"schemas":{"environment":{"type":"object","description":"Environment information for the system running Doc Detective.","readOnly":true,"additionalProperties":false,"required":["platform"],"properties":{"workingDirectory":{"description":"The current working directory of the process running Doc Detective.","type":"string"},"platform":{"description":"The operating system type running Doc Detective.","type":"string","enum":["linux","mac","windows"]},"arch":{"description":"The processor architecture of the system running Doc Detective.","type":"string","enum":["arm32","arm64","x32","x64"]}}},"markupDefinition":{"type":"object","properties":{"name":{"description":"Name of the markup definition","type":"string"},"regex":{"description":"Regular expressions to match the markup type.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"batchMatches":{"description":"If `true`, all matches are combined into a single string.","type":"boolean","default":false},"actions":{"description":"Actions to perform when the markup type is detected.","anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"type":"array","items":{"anyOf":[{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}]}}]}}},"markupActionString":{"type":"string","enum":["checkLink","click","find","goTo","httpRequest","loadVariables","record","runCode","runShell","screenshot","stopRecord","type","wait"]},"inlineStatements":{"description":"Statements to include tests and steps inside the content of the file, such as within Markdown.","type":"object","properties":{"testStart":{"description":"Regular expressions that indicate the start of a test. If capture groups are used, the first capture group is used for the statement. If no capture groups are used, the entire match is used for the statement.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"testEnd":{"description":"Regular expressions that indicate that the current test is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreStart":{"description":"Regular expressions that indicates that the following content should be ignored for testing purposes.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"ignoreEnd":{"description":"Regular expressions that indicate that the ignored section of content is complete.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]},"step":{"description":"Regular expressions that indicate a step in a test.","anyOf":[{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}]}}},"stringOrArray":{"anyOf":[{"type":"string"},{"type":"array","minItems":1,"items":{"type":"string"}}]}}},"examples":[{},{"input":".","output":".","recursive":true,"loadVariables":".env","fileTypes":["markdown"]},{"fileTypes":[{"extends":"markdown","extensions":["md","markdown","mdx"],"inlineStatements":{"testStart":"<!--\\\\s*testStart\\\\s*(.*?)\\\\s*-->","testEnd":"<!-- testEnd -->","ignoreStart":"<!-- ignoreStart -->","ignoreEnd":"<!-- ignoreEnd -->","step":"<!--\\\\s*step\\\\s*(.*?)\\\\s*-->"},"markup":[{"name":"onscreenText","regex":"\\\\*\\\\*.+?\\\\*\\\\*","actions":"find"}]}]},{"fileTypes":[{"name":"Jupyter Notebooks","extensions":"ipynb","runShell":{"command":"jupyter","args":["nbconvert","--to","script","--execute","$1","--stdout"]}},{"name":"JavaScript","extensions":"js","runShell":{"command":"node $1"}},{"name":"Python","extensions":"py","runShell":{"command":"python $1"}}]},{"environment":{"platform":"windows","arch":"x64"}}]},"specs":{"description":"Test specifications that were performed.","type":"array","minItems":1,"items":{"anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"specification","type":"object","dynamicDefaults":{"specId":"uuid"},"properties":{"specId":{"type":"string","description":"Unique identifier for the test specification."},"description":{"type":"string","description":"Description of the test specification."},"specPath":{"type":"string","description":"Path to the test specification."},"contentPath":{"type":"string","description":"Path to the content that the specification is associated with."},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"tests":{"description":"[Tests](test) to perform.","type":"array","minItems":1,"items":{"anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"test","type":"object","description":"A Doc Detective test.","properties":{"testId":{"type":"string","description":"Unique identifier for the test."},"description":{"type":"string","description":"Description of the test."},"contentPath":{"type":"string","description":"Path to the content that the test is associated with."},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex.","default":true},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"before":{"type":"string","description":"Path to a test specification to perform before this test, while maintaining this test\'s context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."},"after":{"type":"string","description":"Path to a test specification to perform after this test, while maintaining this test\'s context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}},"contexts":{"title":"Resolved contexts","type":"array","readOnly":true,"description":"Resolved contexts to run the test in. This is a resolved version of the `runOn` property. It is not user-defined and should not be used in test specifications.","items":{"type":"object","properties":{"platform":{"type":"string","description":"Platform to run the test on. This is a resolved version of the `platforms` property."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}}}}}},"dynamicDefaults":{"testId":"uuid"},"anyOf":[{"required":["steps"]},{"required":["contexts"]}],"additionalProperties":false,"components":{"schemas":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}}}},"examples":[{"steps":[{"checkLink":"https://www.duckduckgo.com"}]},{"steps":[{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","click":true,"type":{"keys":["shorthair cats","$ENTER$"]}}}]},{"testId":"Do all the things! - Test","description":"This test includes every property across all actions.","before":"setup.json","after":"cleanup.json","runOn":[{"platforms":["linux"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true},{"testId":"c61b02e8-7485-44d3-8065-f873673379c6","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","validateAgainstSchema":"both","useExample":"none","exampleKey":"","name":"Acme"}],"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}],"detectSteps":true}]}]}}},"required":["tests"],"examples":[{"tests":[{"steps":[{"checkLink":{"url":"https://www.duckduckgo.com"}}]}]},{"specId":"Do all the things! - Spec","runOn":[{"platforms":["windows","mac"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"tests":[{"testId":"Do all the things! - Test","description":"This test includes nearly every property across all actions.","runOn":[{"platforms":"linux","browsers":"firefox"}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true}]},{"specId":"Make a request from an OpenAPI definition","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","name":"Acme"}],"tests":[{"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}]}]}]}]}}},"required":["specs"],"examples":[{"config":{"input":["/home/hawkeyexl/Workspaces/resolver/dev/doc-content-yaml.md"],"logLevel":"debug","output":".","recursive":true,"relativePathBase":"file","detectSteps":true,"fileTypes":[{"name":"markdown","extensions":["md","markdown","mdx"],"inlineStatements":{"testStart":["{\\\\/\\\\*\\\\s*test\\\\s+?([\\\\s\\\\S]*?)\\\\s*\\\\*\\\\/}","<!--\\\\s*test\\\\s*([\\\\s\\\\S]*?)\\\\s*-->","\\\\[comment\\\\]:\\\\s+#\\\\s+\\\\(test\\\\s*(.*?)\\\\s*\\\\)","\\\\[comment\\\\]:\\\\s+#\\\\s+\\\\(test start\\\\s*(.*?)\\\\s*\\\\)"],"testEnd":["{\\\\/\\\\*\\\\s*test end\\\\s*\\\\*\\\\/}","<!--\\\\s*test end\\\\s*([\\\\s\\\\S]*?)\\\\s*-->","\\\\[comment\\\\]:\\\\s+#\\\\s+\\\\(test end\\\\)"],"ignoreStart":["{\\\\/\\\\*\\\\s*test ignore start\\\\s*\\\\*\\\\/}","<!--\\\\s*test ignore start\\\\s*-->"],"ignoreEnd":["{\\\\/\\\\*\\\\s*test ignore end\\\\s*\\\\*\\\\/}","<!--\\\\s*test ignore end\\\\s*-->"],"step":["{\\\\/\\\\*\\\\s*step\\\\s+?([\\\\s\\\\S]*?)\\\\s*\\\\*\\\\/}","<!--\\\\s*step\\\\s*([\\\\s\\\\S]*?)\\\\s*-->","\\\\[comment\\\\]:\\\\s+#\\\\s+\\\\(step\\\\s*(.*?)\\\\s*\\\\)"]},"markup":[{"name":"checkHyperlink","regex":["(?<!\\\\!)\\\\[[^\\\\]]+\\\\]\\\\(\\\\s*(https?:\\\\/\\\\/[^\\\\s)]+)(?:\\\\s+\\"[^\\"]*\\")?\\\\s*\\\\)"],"actions":["checkLink"]},{"name":"clickOnscreenText","regex":["\\\\b(?:[Cc]lick|[Tt]ap|[Ll]eft-click|[Cc]hoose|[Ss]elect|[Cc]heck)\\\\b\\\\s+\\\\*\\\\*((?:(?!\\\\*\\\\*).)+)\\\\*\\\\*"],"actions":["click"]},{"name":"findOnscreenText","regex":["\\\\*\\\\*((?:(?!\\\\*\\\\*).)+)\\\\*\\\\*"],"actions":["find"]},{"name":"goToUrl","regex":["\\\\b(?:[Gg]o\\\\s+to|[Oo]pen|[Nn]avigate\\\\s+to|[Vv]isit|[Aa]ccess|[Pp]roceed\\\\s+to|[Ll]aunch)\\\\b\\\\s+\\\\[[^\\\\]]+\\\\]\\\\(\\\\s*(https?:\\\\/\\\\/[^\\\\s)]+)(?:\\\\s+\\"[^\\"]*\\")?\\\\s*\\\\)"],"actions":["goTo"]},{"name":"screenshotImage","regex":["!\\\\[[^\\\\]]*\\\\]\\\\(\\\\s*([^\\\\s)]+)(?:\\\\s+\\"[^\\"]*\\")?\\\\s*\\\\)\\\\s*\\\\{(?=[^}]*\\\\.screenshot)[^}]*\\\\}"],"actions":["screenshot"]},{"name":"typeText","regex":["\\\\b(?:press|enter|type)\\\\b\\\\s+\\"([^\\"]+)\\""],"actions":["type"]}]},{"name":"asciidoc","extensions":["adoc","asciidoc","asc"],"inlineStatements":{"testStart":["\\\\/\\\\/\\\\s+\\\\(\\\\s*test\\\\s+([\\\\s\\\\S]*?)\\\\s*\\\\)"],"testEnd":["\\\\/\\\\/\\\\s+\\\\(\\\\s*test end\\\\s*\\\\)"],"ignoreStart":["\\\\/\\\\/\\\\s+\\\\(\\\\s*test ignore start\\\\s*\\\\)"],"ignoreEnd":["\\\\/\\\\/\\\\s+\\\\(\\\\s*test ignore end\\\\s*\\\\)"],"step":["\\\\/\\\\/\\\\s+\\\\(\\\\s*step\\\\s+([\\\\s\\\\S]*?)\\\\s*\\\\)"]},"markup":[]},{"name":"html","extensions":["html","htm"],"inlineStatements":{"testStart":["<!--\\\\s*test\\\\s+?([\\\\s\\\\S]*?)\\\\s*-->"],"testEnd":["<!--\\\\s*test end\\\\s*([\\\\s\\\\S]*?)\\\\s*-->"],"ignoreStart":["<!--\\\\s*test ignore start\\\\s*-->"],"ignoreEnd":["<!--\\\\s*test ignore end\\\\s*-->"],"step":["<!--\\\\s*step\\\\s+?([\\\\s\\\\S]*?)\\\\s*-->"]},"markup":[]}],"telemetry":{"send":true},"configId":"3e467e5d-27cb-41f3-800f-aeb3c20dcb4c","environment":{"arch":"x64","platform":"linux","workingDirectory":"/home/hawkeyexl/Workspaces/resolver"}},"specs":[{"specId":"cc656bba-132f-4f0f-b093-2cfbdd784f69","contentPath":"/home/hawkeyexl/Workspaces/resolver/dev/doc-content-yaml.md","tests":[{"testId":"doc-detective-docs","detectSteps":false,"runOn":[],"openApi":[],"contexts":[{"steps":[{"checkLink":"https://doc-detective.com"},{"checkLink":"https://doc-detective.com/docs/get-started/intro"},{"goTo":"https://doc-detective.com/docs/get-started/actions/type"},{"find":"Special keys"},{"screenshot":"reference.png"}],"contextId":"eec1d123-7dfd-4362-b41a-942f36e0da5a"}]}],"runOn":[],"openApi":[]}]}]},"report_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"report","type":"object","dynamicDefaults":{"reportId":"uuid"},"properties":{"reportId":{"type":"string","description":"Unique identifier for the test specification."},"specs":{"description":"Test specifications that were performed.","type":"array","minItems":1,"items":{"anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"specification","type":"object","dynamicDefaults":{"specId":"uuid"},"properties":{"specId":{"type":"string","description":"Unique identifier for the test specification."},"description":{"type":"string","description":"Description of the test specification."},"specPath":{"type":"string","description":"Path to the test specification."},"contentPath":{"type":"string","description":"Path to the content that the specification is associated with."},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"tests":{"description":"[Tests](test) to perform.","type":"array","minItems":1,"items":{"anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"test","type":"object","description":"A Doc Detective test.","properties":{"testId":{"type":"string","description":"Unique identifier for the test."},"description":{"type":"string","description":"Description of the test."},"contentPath":{"type":"string","description":"Path to the content that the test is associated with."},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex.","default":true},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"before":{"type":"string","description":"Path to a test specification to perform before this test, while maintaining this test\'s context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."},"after":{"type":"string","description":"Path to a test specification to perform after this test, while maintaining this test\'s context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}},"contexts":{"title":"Resolved contexts","type":"array","readOnly":true,"description":"Resolved contexts to run the test in. This is a resolved version of the `runOn` property. It is not user-defined and should not be used in test specifications.","items":{"type":"object","properties":{"platform":{"type":"string","description":"Platform to run the test on. This is a resolved version of the `platforms` property."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}}}}}},"dynamicDefaults":{"testId":"uuid"},"anyOf":[{"required":["steps"]},{"required":["contexts"]}],"additionalProperties":false,"components":{"schemas":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}}}},"examples":[{"steps":[{"checkLink":"https://www.duckduckgo.com"}]},{"steps":[{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","click":true,"type":{"keys":["shorthair cats","$ENTER$"]}}}]},{"testId":"Do all the things! - Test","description":"This test includes every property across all actions.","before":"setup.json","after":"cleanup.json","runOn":[{"platforms":["linux"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true},{"testId":"c61b02e8-7485-44d3-8065-f873673379c6","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","validateAgainstSchema":"both","useExample":"none","exampleKey":"","name":"Acme"}],"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}],"detectSteps":true}]}]}}},"required":["tests"],"examples":[{"tests":[{"steps":[{"checkLink":{"url":"https://www.duckduckgo.com"}}]}]},{"specId":"Do all the things! - Spec","runOn":[{"platforms":["windows","mac"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"tests":[{"testId":"Do all the things! - Test","description":"This test includes nearly every property across all actions.","runOn":[{"platforms":"linux","browsers":"firefox"}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true}]},{"specId":"Make a request from an OpenAPI definition","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","name":"Acme"}],"tests":[{"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}]}]}]}]}}},"required":["specs"],"examples":[{"specs":[{"tests":[{"steps":[{"checkLink":{"url":"https://www.duckduckgo.com"}}]}]}]},{"specs":[{"specId":"Do all the things! - Spec","runOn":[{"platforms":["windows","mac"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"tests":[{"testId":"Do all the things! - Test","description":"This test includes nearly every property across all actions.","runOn":[{"platforms":"linux","browsers":"firefox"}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true}]}]},{"specs":[{"specId":"Make a request from an OpenAPI definition","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","name":"Acme"}],"tests":[{"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}]}]}]}]},"runCode_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]},"runShell_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]},"screenshot_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]},"spec_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"specification","type":"object","dynamicDefaults":{"specId":"uuid"},"properties":{"specId":{"type":"string","description":"Unique identifier for the test specification."},"description":{"type":"string","description":"Description of the test specification."},"specPath":{"type":"string","description":"Path to the test specification."},"contentPath":{"type":"string","description":"Path to the content that the specification is associated with."},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"tests":{"description":"[Tests](test) to perform.","type":"array","minItems":1,"items":{"anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"test","type":"object","description":"A Doc Detective test.","properties":{"testId":{"type":"string","description":"Unique identifier for the test."},"description":{"type":"string","description":"Description of the test."},"contentPath":{"type":"string","description":"Path to the content that the test is associated with."},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex.","default":true},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"before":{"type":"string","description":"Path to a test specification to perform before this test, while maintaining this test\'s context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."},"after":{"type":"string","description":"Path to a test specification to perform after this test, while maintaining this test\'s context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}},"contexts":{"title":"Resolved contexts","type":"array","readOnly":true,"description":"Resolved contexts to run the test in. This is a resolved version of the `runOn` property. It is not user-defined and should not be used in test specifications.","items":{"type":"object","properties":{"platform":{"type":"string","description":"Platform to run the test on. This is a resolved version of the `platforms` property."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}}}}}},"dynamicDefaults":{"testId":"uuid"},"anyOf":[{"required":["steps"]},{"required":["contexts"]}],"additionalProperties":false,"components":{"schemas":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}}}},"examples":[{"steps":[{"checkLink":"https://www.duckduckgo.com"}]},{"steps":[{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","click":true,"type":{"keys":["shorthair cats","$ENTER$"]}}}]},{"testId":"Do all the things! - Test","description":"This test includes every property across all actions.","before":"setup.json","after":"cleanup.json","runOn":[{"platforms":["linux"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true},{"testId":"c61b02e8-7485-44d3-8065-f873673379c6","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","validateAgainstSchema":"both","useExample":"none","exampleKey":"","name":"Acme"}],"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}],"detectSteps":true}]}]}}},"required":["tests"],"examples":[{"tests":[{"steps":[{"checkLink":{"url":"https://www.duckduckgo.com"}}]}]},{"specId":"Do all the things! - Spec","runOn":[{"platforms":["windows","mac"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"tests":[{"testId":"Do all the things! - Test","description":"This test includes nearly every property across all actions.","runOn":[{"platforms":"linux","browsers":"firefox"}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true}]},{"specId":"Make a request from an OpenAPI definition","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","name":"Acme"}],"tests":[{"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}]}]}]},"step_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]},"stopRecord_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]},"test_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"test","type":"object","description":"A Doc Detective test.","properties":{"testId":{"type":"string","description":"Unique identifier for the test."},"description":{"type":"string","description":"Description of the test."},"contentPath":{"type":"string","description":"Path to the content that the test is associated with."},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex.","default":true},"runOn":{"type":"array","description":"Contexts to run the test in. Overrides contexts defined at the config and spec levels.","items":{"oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"context","type":"object","description":"A context in which to perform tests. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For example, if a browser isn\'t specified but is required by steps in the test, Doc Detective will search for and use a supported browser available in the current environment.","additionalProperties":false,"dynamicDefaults":{"contextId":"uuid"},"properties":{"contextId":{"type":"string","description":"Unique identifier for the context."},"platforms":{"description":"Platforms to run tests on.","anyOf":[{"type":"string","enum":["linux","mac","windows"]},{"type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}]},"browsers":{"description":"Browsers to run tests on.","anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},{"type":"array","items":{"anyOf":[{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}]}}]}},"components":{"schemas":{"platform":{"type":"string","enum":["linux","mac","windows"]},"browserName":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}}}},"examples":[{"platforms":"linux","browsers":"chrome"},{"platforms":["windows","mac","linux"],"browsers":["chrome","firefox","webkit"]},{"browsers":{"name":"chrome","headless":true}},{"browsers":[{"name":"chrome","headless":true},{"name":"firefox"}]},{"platforms":["mac","linux"],"browsers":{"name":"chrome","headless":true}},{"platforms":["windows","mac","linux"],"browsers":[{"name":"chrome","headless":true,"window":{"width":1920,"height":1080},"viewport":{"width":1600,"height":900}},{"name":"firefox","window":{"width":1366,"height":768}},{"name":"webkit","headless":false,"viewport":{"width":1440,"height":900}}]},{"platforms":"mac","browsers":[{"name":"safari","window":{"width":1280,"height":800}}]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"before":{"type":"string","description":"Path to a test specification to perform before this test, while maintaining this test\'s context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."},"after":{"type":"string","description":"Path to a test specification to perform after this test, while maintaining this test\'s context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}},"contexts":{"title":"Resolved contexts","type":"array","readOnly":true,"description":"Resolved contexts to run the test in. This is a resolved version of the `runOn` property. It is not user-defined and should not be used in test specifications.","items":{"type":"object","properties":{"platform":{"type":"string","description":"Platform to run the test on. This is a resolved version of the `platforms` property."},"browser":{"type":"object","description":"Browser configuration.","required":["name"],"additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the browser.","enum":["chrome","firefox","safari","webkit"],"$comment":"`safari` is just a shortcut for `webkit`. Included for visibility and to reduce questions."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode.","default":true},"window":{"type":"object","description":"Browser dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the browser window in pixels."},"height":{"type":"integer","description":"Height of the browser window in pixels."}}},"viewport":{"type":"object","description":"Viewport dimensions.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the viewport in pixels."},"height":{"type":"integer","description":"Height of the viewport in pixels."}}}}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}},"steps":{"description":"Steps to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails. By default, if a step fails, the test stops and the remaining steps are not executed.","type":"array","minItems":1,"items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"step","description":"A step in a test.","type":"object","components":{"schemas":{"common":{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},"anyOf":[{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["checkLink"],"properties":{"checkLink":{"$schema":"http://json-schema.org/draft-07/schema#","title":"checkLink","anyOf":[{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}],"components":{"schemas":{"string":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"string","pattern":"(^(http://|https://|\\\\/).*|\\\\$[A-Za-z0-9_]+$)","transform":["trim"]},"object":{"description":"Check if an HTTP or HTTPS URL returns an acceptable status code from a GET request.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to check. Can be a full URL or a path. If a path is provided, `origin` must be specified.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","anyOf":[{"type":"integer"},{"type":"array","items":{"oneOf":[{"type":"integer"}]}}],"default":[200,301,302,307,308]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com","statusCodes":200},{"url":"/search","origin":"www.google.com","statusCodes":[200]}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["click"],"properties":{"click":{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["find"],"properties":{"find":{"$schema":"http://json-schema.org/draft-07/schema#","title":"find","description":"Find an element based on display text or a selector, then optionally interact with it.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"object":{"title":"Find element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"additionalProperties":false,"properties":{"elementText":{"type":"string","description":"Display text of the element to find. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to find. If combined with `elementText`, the element must match both the text and the selector."},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view.","type":"boolean","default":true},"click":{"description":"Click the element.","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"click","description":"Click or tap an element.","anyOf":[{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}},{"type":"boolean"}],"components":{"schemas":{"string":{"title":"Find element (simple)","type":"string","description":"Display text or selector of the element to find."},"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"object":{"title":"Click element (detailed)","type":"object","anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]},"elementText":{"type":"string","description":"Display text of the element to click. If combined with `selector`, the element must match both the text and the selector."},"selector":{"type":"string","description":"Selector of the element to click. If combined with `elementText`, the element must match both the text and the selector."}}}}},"examples":[true,"right",{"button":"left","elementText":"Element text"},{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}]},{"type":"object","properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"type":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`type`](type). To type in the element, make the element active with the `click` parameter.","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},{"not":{"type":"object","required":["selector","elementText"]}}]}}}}},"examples":["Find me!",{"selector":"[title=Search]"},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"},{"selector":"[title=Search]","click":{"button":"right"}},{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["goTo"],"properties":{"goTo":{"$schema":"http://json-schema.org/draft-07/schema#","title":"goTo","anyOf":[{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}],"components":{"schemas":{"string":{"description":"Navigate to an HTTP or HTTPS URL. Can be a full URL or a path. If a path is provided, navigates relative to the current URL, if any.","type":"string","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"description":"Navigate to an HTTP or HTTPS URL.","type":"object","additionalProperties":false,"required":["url"],"properties":{"url":{"type":"string","description":"URL to navigate to. Can be a full URL or a path. If a path is provided and `origin` is specified, prepends `origin` to `url`. If a path is provided but `origin` isn\'t specified, attempts to navigate relative to the current URL, if any.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}}}}},"examples":["https://www.google.com","/search",{"url":"https://www.google.com"},{"url":"/search","origin":"www.google.com"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["httpRequest"],"properties":{"httpRequest":{"$schema":"http://json-schema.org/draft-07/schema#","title":"httpRequest","description":"Perform a generic HTTP request, for example to an API.","anyOf":[{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}],"components":{"schemas":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","anyOf":[{"required":["url"]},{"required":["openApi"]}],"additionalProperties":false,"properties":{"url":{"title":"URL","type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"anyOf":[{"allOf":[{"type":"string","description":"ID of the operation to use for the request."},{"title":"Operation ID","description":"Operation ID from the OpenAPI schema. Only valid if the OpenAPI description path is specified elsewhere and the operation ID is unique among all specified OpenAPI descriptions."}]},{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","required":["operationId"]}]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"request":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"parameters":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"body":{"description":"JSON object to include as the body of the HTTP request.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"response":{"type":"object","additionalProperties":false,"properties":{"headers":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"body":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","anyOf":[{"type":"object","additionalProperties":true,"properties":{}},{"type":"array","items":{}},{"type":"string"}],"default":{}}}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in the response body.","default":true},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"}}}}},"examples":["https://reqres.in/api/users",{"url":"https://reqres.in/api/users"},{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]},{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]},{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"},{"openApi":"getUserById"},{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runShell"],"properties":{"runShell":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runShell","description":"Perform a native shell command.","anyOf":[{"type":"string","transform":["trim"]},{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"string":{"type":"string","transform":["trim"]},"object":{"type":"object","required":["command"],"additionalProperties":false,"properties":{"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s stdout or stderr. If the expected content can\'t be found in the command\'s stdout or stderr, the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":["docker run hello-world",{"command":"echo","args":["$USER"]},{"command":"echo","args":["hello-world"]},{"command":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"command":"false","exitCodes":[1]},{"command":"echo","args":["setup"],"exitCodes":[0],"stdio":"/.*?/"},{"command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Docker!","path":"docker-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["runCode"],"properties":{"runCode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"runCode","description":"Assemble and run code.","anyOf":[{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}],"components":{"schemas":{"object":{"type":"object","required":["code","language"],"properties":{"language":{"type":"string","description":"Language of the code to run.","enum":["python","bash","javascript"]},"code":{"description":"Code to run.","type":"string"},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"stdio":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"path":{"type":"string","description":"File path to save the command\'s output, relative to `directory`."},"directory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `path`, this value is ignored.","default":0,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing output at `path` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000}}}}},"examples":[{"language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"stdio":"Hello from Docker!"},{"language":"javascript","code":"return false","exitCodes":[1]},{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["type"],"properties":{"type":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["screenshot"],"properties":{"screenshot":{"$schema":"http://json-schema.org/draft-07/schema#","title":"screenshot","description":"Takes a screenshot in PNG format.","anyOf":[{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},{"type":"boolean"}],"components":{"schemas":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","additionalProperties":false,"properties":{"path":{"description":"File path of the PNG file. Accepts absolute paths. If not specified, the file name is the ID of the step.","type":"string","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the existing screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":0.05,"minimum":0,"maximum":1},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `aboveVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","aboveVariation"],"default":"aboveVariation"},"crop":{"anyOf":[{"title":"Crop by element","type":"string","description":"Display text or selector of the element to screenshot."},{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}}]}}},"crop_element":{"title":"Crop by element (detailed)","type":"object","description":"Crop the screenshot to a specific element.","additionalProperties":false,"anyOf":[{"required":["selector"]},{"required":["elementText"]}],"properties":{"elementText":{"type":"string","description":"Display text of the element to screenshot."},"selector":{"type":"string","description":"Selector of the element to screenshot."},"padding":{"anyOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}}},"padding":{"type":"object","additionalProperties":false,"properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}}},"examples":[true,"image.png","static/images/image.png","/User/manny/projects/doc-detective/static/images/image.png",{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"},{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["record"],"properties":{"record":{"$schema":"http://json-schema.org/draft-07/schema#","title":"record","description":"Start recording the current browser viewport. Must be followed by a `stopRecord` step. Only runs in Chrome browsers when they are visible. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","anyOf":[{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"object":{"type":"object","properties":{"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"directory":{"type":"string","description":"Directory of the file. If the directory doesn\'t exist, creates the directory.","transform":["trim"]},"overwrite":{"type":"string","description":"If `true`, overwrites the existing recording at `path` if it exists.","enum":["true","false"]}}}}},"examples":[true,"results.mp4",{"path":"results.mp4","directory":"static/media","overwrite":"true"}]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"type":"object","required":["stopRecord"],"properties":{"stopRecord":{"$schema":"http://json-schema.org/draft-07/schema#","title":"stopRecord","description":"Stop the current recording.","anyOf":[{"type":"boolean","nullable":true}],"examples":[true]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["loadVariables"],"properties":{"loadVariables":{"$schema":"http://json-schema.org/draft-07/schema#","title":"loadVariables","type":"string","description":"Load environment variables from the specified `.env` file.","examples":[".env"]}}}]},{"allOf":[{"type":"object","dynamicDefaults":{"stepId":"uuid"},"properties":{"stepId":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}},"variables":{"type":"object","description":"Environment variables to set from user-defined expressions.","default":{},"patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}}}}},{"required":["wait"],"properties":{"wait":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]}}}]}],"examples":[{"stepId":"uuid","description":"Description of the step.","checkLink":"https://www.google.com","outputs":{"outputKey":"outputValue"},"variables":{"variableKey":"variableValue"}},{"checkLink":"https://www.google.com"},{"stepId":"path-only","checkLink":"/search"},{"stepId":"status-code","checkLink":{"url":"https://www.google.com","statusCodes":[200]}},{"goTo":{"url":"https://www.google.com"}},{"goTo":"https://www.google.com"},{"wait":5000},{"runCode":{"language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"stdio":"Hello from Python!","path":"python-output.txt","directory":"output","maxVariation":0.1,"overwrite":"aboveVariation"}},{"stopRecord":true},{"screenshot":true},{"screenshot":"image.png"},{"screenshot":"static/images/image.png"},{"screenshot":"/User/manny/projects/doc-detective/static/images/image.png"},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":"#elementToScreenshot"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation"}},{"screenshot":{"path":"image.png","directory":"static/images","maxVariation":0.1,"overwrite":"aboveVariation","crop":{"selector":"#elementToScreenshot","elementText":"Element text","padding":{"top":0,"right":0,"bottom":0,"left":0}}}},{"record":true},{"record":"video.mp4"},{"record":"static/media/video.mp4"},{"record":"/User/manny/projects/doc-detective/static/media/video.mp4"},{"record":{"path":"video.mp4","directory":"static/media","overwrite":true}},{"loadVariables":"variables.env"},{"find":"Find me!"},{"find":{"selector":"[title=Search]"}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":"shorthair cat"}},{"find":{"selector":"[title=Search]","click":{"button":"right"}}},{"find":{"selector":"[title=Search]","timeout":10000,"elementText":"Search","moveTo":true,"click":true,"type":{"keys":["shorthair cat"],"inputDelay":100}}},{"click":true},{"click":"right"},{"click":{"button":"left","elementText":"Element text"}},{"click":{"selector":"#elementToScreenshot","elementText":"Element text","button":"middle"}},{"httpRequest":"https://reqres.in/api/users"},{"httpRequest":{"url":"https://reqres.in/api/users"}},{"httpRequest":{"url":"https://reqres.in/api/users/2","method":"put","request":{"body":{"name":"morpheus","job":"zion resident"}}}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201]}},{"httpRequest":{"url":"https://www.api-server.com","method":"post","timeout":30000,"request":{"body":{"field":"value"},"headers":{"header":"value"},"parameters":{"param":"value"}},"response":{"body":{"field":"value"},"headers":{"header":"value"}},"statusCodes":[200]}},{"httpRequest":{"url":"https://reqres.in/api/users","method":"post","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"path":"response.json","directory":"media","maxVariation":0.05,"overwrite":"aboveVariation"}},{"httpRequest":{"openApi":"getUserById"}},{"httpRequest":{"openApi":{"name":"Reqres","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"request":{"parameters":{"id":123}}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}}},{"httpRequest":{"openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","headers":{"Authorization":"Bearer $TOKEN"}}}}]}}}}}},"dynamicDefaults":{"testId":"uuid"},"anyOf":[{"required":["steps"]},{"required":["contexts"]}],"additionalProperties":false,"components":{"schemas":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI description and configuration.","additionalProperties":false,"anyOf":[{"required":["descriptionPath"]},{"required":["operationId"]}],"properties":{"name":{"type":"string","description":"Name of the OpenAPI description, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."},"definition":{"type":"object","readOnly":true,"description":"OpenAPI definition object loaded from the `descriptionPath`. This is a resolved version of the OpenAPI description and should not be user-defined.","additionalProperties":true},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI description."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI description. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI description as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI description as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI description. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"headers":{"type":"object","description":"Request headers to add to requests. For example, to set `Authorization` headers for all requests from the specified OpenAPI document. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"components":{"schemas":{"operationId":{"type":"string","description":"ID of the operation to use for the request."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI description."}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"},{"name":"Reqres","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none"},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true},{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both","exampleKey":"example1","statusCode":201,"validateAgainstSchema":"none","mockResponse":true,"headers":{"Authorization":"Bearer 12345"}}]},{"type":"object","not":{"required":["operationId"]},"required":["name","descriptionPath"]}]}}}},"examples":[{"steps":[{"checkLink":"https://www.duckduckgo.com"}]},{"steps":[{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","click":true,"type":{"keys":["shorthair cats","$ENTER$"]}}}]},{"testId":"Do all the things! - Test","description":"This test includes every property across all actions.","before":"setup.json","after":"cleanup.json","runOn":[{"platforms":["linux"],"browsers":{"name":"firefox","window":{},"viewport":{}}}],"steps":[{"loadVariables":".env"},{"runShell":{"command":"echo","args":["$USER"],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"checkLink":{"url":"https://www.duckduckgo.com"}},{"httpRequest":{"method":"post","url":"https://reqres.in/api/users","request":{"body":{"name":"morpheus","job":"leader"}},"response":{"body":{"name":"morpheus","job":"leader"}},"statusCodes":[200,201],"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}},{"goTo":{"url":"https://www.duckduckgo.com"}},{"find":{"selector":"[title=Search]","elementText":"Search","timeout":10000,"moveTo":true,"click":true,"type":{"keys":["shorthair cat"]}},"variables":{}},{"type":{"keys":["$ENTER$"]}},{"screenshot":{"maxVariation":0,"overwrite":"aboveVariation"}}],"detectSteps":true},{"testId":"c61b02e8-7485-44d3-8065-f873673379c6","openApi":[{"descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","validateAgainstSchema":"both","useExample":"none","exampleKey":"","name":"Acme"}],"steps":[{"httpRequest":{"openApi":{"operationId":"getUserById","validateAgainstSchema":"both","useExample":"none","exampleKey":""},"request":{"parameters":{"id":123}},"response":{},"maxVariation":0,"overwrite":"aboveVariation"},"variables":{}}],"detectSteps":true}]},"type_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"typeKeys","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s keyword. For example, to type the Escape key, enter `$ESCAPE$`.","anyOf":[{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}],"components":{"schemas":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"object":{"type":"object","properties":{"keys":{"description":"Sequence of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"inputDelay":{"type":"number","description":"Delay in milliseconds between each key press during a recording","default":100},"selector":{"type":"string","description":"Selector for the element to type into. If not specified, the typing occurs in the active element."}},"required":["keys"],"additionalProperties":false}}},"examples":["kittens",["$ENTER$"],["kittens","$ENTER$"],{"keys":"kittens"},{"keys":["$ENTER$"]},{"keys":["kittens","$ENTER$"],"inputDelay":500}]},"wait_v3":{"$schema":"http://json-schema.org/draft-07/schema#","title":"wait","description":"Pause (in milliseconds) before performing the next action.","default":5000,"anyOf":[{"type":"number"},{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]},{"type":"boolean"}],"components":{"schemas":{"string":{"type":"string","pattern":"(\\\\$[A-Za-z0-9_]+)","transform":["trim"]}}},"examples":[5000,"$WAIT_DURATION",true]},"checkLink_v2":{"title":"checkLink","type":"object","description":"Check if a URL returns an acceptable status code from a GET request.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"checkLink","description":"Action to perform."},"url":{"type":"string","description":"URL to check.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201,202]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"checkLink","url":"https://www.google.com"},{"action":"checkLink","url":"https://www.google.com","statusCodes":[200]},{"action":"checkLink","url":"/search","origin":"www.google.com","statusCodes":[200]}]},"config_v2":{"title":"config","description":"Configuration options for Doc Detective operations.","type":"object","additionalProperties":false,"properties":{"defaultCommand":{"description":"Default command to run when no command is specified.","type":"string","enum":["runTests","runCoverage"]},"input":{"default":".","description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"output":{"default":".","description":"Path of the of the file or directory in which to store the output of Doc Detective commands. If a file path is specified, the output is written to that file. If a file of that name already exists, Doc Detective creates appends an integer to the result file name. If a directory path is specified, the output file name is dependent on the command being run.","type":"string"},"recursive":{"default":true,"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specificaions and source files.","type":"boolean"},"relativePathBase":{"description":"Whether paths should be interpreted as relative to the current working directory (`cwd`) or to the file in which they\'re specified (`file`).","type":"string","enum":["cwd","file"],"default":"cwd"},"envVariables":{"description":"Path to a `.env` file to load before performing a Doc Detective operation.","type":"string"},"runTests":{"type":"object","additionalProperties":false,"description":"Options for running tests. When running tests, values set here override general configuration options.","properties":{"input":{"description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"output":{"description":"Path of the of the file or directory in which to store the output of Doc Detective commands. If a file path is specified, the output is written to that file. If a file of that name already exists, Doc Detective creates appends an integer to the result file name. If a directory path is specified, the output file name is dependent on the command being run.","type":"string","default":"."},"setup":{"description":"Path(s) to test specifications to perform before those specified by `input`. Useful for setting up testing environments.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"cleanup":{"description":"Path(s) to test specifications to perform after those specified by `input`. Useful for cleaning up testing environments.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"recursive":{"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specificaions and source files.","type":"boolean"},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex.","default":false},"mediaDirectory":{"description":"DEPRECATED.","type":"string","default":"."},"downloadDirectory":{"description":"Path of the directory in which to store downloaded files.","type":"string","default":"."},"contexts":{"type":"array","description":"Application/platform sets to run tests in. If no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it.","items":{"oneOf":[{"title":"context","type":"object","description":"An application and supported platforms.\\n\\nIf no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For browsers, context priority is Firefox > Chrome > Chromium.","properties":{"app":{"type":"object","description":"The application to run.","additionalProperties":false,"required":["name"],"properties":{"name":{"type":"string","description":"Name of the application.","enum":["chrome","firefox","safari","edge"]},"path":{"type":"string","description":"Absolute path or command for the application. If not specified, defaults to typical install paths per platform. If specified but the path is invalid, the context is skipped."},"options":{"type":"object","description":"Options to pass to the app. Only works when `name` is `firefox` or `chrome`.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the window in pixels."},"height":{"type":"integer","description":"Height of the window in pixels."},"viewport_height":{"type":"integer","description":"Height of the viewport in pixels. Overrides `height`."},"viewport_width":{"type":"integer","description":"Width of the viewport in pixels. Overrides `width`."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode. Not supported by Safari."},"driverPath":{"type":"string","description":"Path to the browser driver. If not specified, defaults to internally managed dependencies."}}}}},"platforms":{"description":"Supported platforms for the application.","type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}},"required":["app","platforms"],"additionalProperties":false,"examples":[{"app":{"name":"chrome"},"platforms":["linux"]},{"app":{"name":"chrome","options":{"viewport_width":800,"viewport_height":600}},"platforms":["linux"]},{"app":{"name":"firefox","options":{"width":800,"height":600,"headless":false,"driverPath":"/usr/bin/geckodriver"}},"platforms":["linux","windows","mac"]},{"app":{"name":"safari"},"platforms":["mac"]},{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}]}]},"default":[{"app":{"name":"firefox","options":{"width":1200,"height":800,"headless":true}},"platforms":["linux","mac","windows"]}]}}},"runCoverage":{"description":"Options for performing test coverage analysis on documentation source files.  When performing coveration analysis, values set here override general configuration options.","type":"object","additionalProperties":false,"properties":{"input":{"description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"output":{"description":"Path of the of the file or directory in which to store the output of Doc Detective commands. If a file path is specified, the output is written to that file. If a file of that name already exists, Doc Detective creates appends an integer to the result file name. If a directory path is specified, the output file name is dependent on the command being run.","type":"string","default":"."},"recursive":{"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specificaions and source files.","type":"boolean"},"markup":{"default":["onscreenText","emphasis","image","hyperlink","codeInline","codeBlock","interaction"],"description":"Markup types to include when performing this operation. If no markup types are specified, the operation includes all markup types as defined in `fileTypes`.","type":"array","items":{"oneOf":[{"type":"string"}]}}}},"suggestTests":{"description":"Options for suggesting tests based on documentation source files.  When suggesting tests, values set here override general condiguration options.","type":"object","additionalProperties":false,"properties":{"input":{"description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"output":{"description":"Path of the of the file or directory in which to store the output of Doc Detective commands. If a file path is specified, the output is written to that file. If a file of that name already exists, Doc Detective creates appends an integer to the result file name. If a directory path is specified, the output file name is dependent on the command being run.","type":"string","default":"."},"recursive":{"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specificaions and source files.","type":"boolean"},"markup":{"default":["onscreenText","emphasis","image","hyperlink","codeInline","codeBlock","interaction"],"description":"Markup types to include when performing this operation. If no markup types are specified, the operation includes all markup types as defined in `fileTypes`.","type":"array","items":{"oneOf":[{"type":"string"}]}}}},"fileTypes":{"description":"Information on supported file types and how to parse the markup within them.","type":"array","items":{"oneOf":[{"type":"object","additionalProperties":false,"properties":{"name":{"description":"Name of the file type.","type":"string"},"extensions":{"description":"File extensions to support with this configuration.","type":"array","items":{"oneOf":[{"type":"string"}]}},"testStartStatementOpen":{"description":"Opening of an in-document test start statement.","type":"string"},"testStartStatementClose":{"description":"Close of an in-document test start statement.","type":"string"},"testIgnoreStatement":{"description":"Text for an in-document test ignore statement.","type":"string"},"testEndStatement":{"description":"Text for an in-document test end statement.","type":"string"},"stepStatementOpen":{"description":"Opening of an in-document step statement.","type":"string"},"stepStatementClose":{"description":"Close of an in-document step statement.","type":"string"},"markup":{"description":"Markup types and associated regex patterns to find in documentation source files.","type":"array","items":{"oneOf":[{"type":"object","additionalProperties":false,"properties":{"name":{"description":"Name of the markup type.","type":"string"},"regex":{"description":"Regex patterns to find the markup type in documentation source files.","type":"array","minItems":1,"items":{"oneOf":[{"type":"string"}]}},"actions":{"description":"Actions that apply to the markup type.","type":"array","items":{"oneOf":[{"type":"string","enum":["checkLink","find","goTo","httpRequest","runShell","saveScreenshot","setVariables","startRecording","stopRecording","typeKeys","wait"]},{"type":"object","additionalProperties":false,"properties":{"name":{"description":"Name of the action.","type":"string","enum":["checkLink","find","goTo","httpRequest","runShell","saveScreenshot","setVariables","startRecording","stopRecording","typeKeys","wait"]},"params":{"description":"Parameters for the action.","type":"object","additionalProperties":true}},"required":["name"]},{"title":"checkLink","type":"object","description":"Check if a URL returns an acceptable status code from a GET request.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"checkLink","description":"Action to perform."},"url":{"type":"string","description":"URL to check.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201,202]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"checkLink","url":"https://www.google.com"},{"action":"checkLink","url":"https://www.google.com","statusCodes":[200]},{"action":"checkLink","url":"/search","origin":"www.google.com","statusCodes":[200]}]},{"title":"find","type":"object","description":"Check if an element exists with the specified CSS selector.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"find","description":"Action to perform."},"selector":{"description":"Selector that uniquely identifies the element.","type":"string"},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"matchText":{"type":"string","description":"Text that the element should contain. If the element doesn\'t contain the text, the step fails. Accepts both strings an regular expressions. To use a regular expression, the expression should start and end with a `/`. For example, `/search/`."},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view. Only runs the if the test is being recorded.","oneOf":[{"type":"boolean"}],"default":false},"click":{"description":"Click the element.","oneOf":[{"type":"boolean","default":false},{"type":"object","additionalProperties":false,"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"typeKeys":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`typeKeys`](typeKeys). To type in the element, make the element active with the `click` parameter.","oneOf":[{"type":"string"},{"type":"object","additionalProperties":false,"properties":{"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}}}]},"setVariables":{"type":"array","description":"Extract environment variables from the element\'s text.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the element\'s text.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"required":["action","selector"],"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"examples":[{"action":"find","selector":"[title=Search]"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":"shorthair cat"},{"action":"find","selector":"[title=Search]","click":{"button":"right"}},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"],"delay":100}},{"action":"find","selector":"[title=ResultsCount]","setVariables":[{"name":"resultsCount","regex":".*"}]}]},{"title":"goTo","type":"object","description":"Navigate to a specified URL.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"goTo","description":"Action to perform."},"url":{"type":"string","description":"URL to navigate to.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!","action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516756","description":"This is a test!","action":"goTo","url":"/search","origin":"https://www.google.com"}]},{"title":"httpRequest","type":"object","description":"Perform a generic HTTP request, for example to an API.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"httpRequest","description":"Aciton to perform."},"url":{"type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","required":["operationId"]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"requestHeaders":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"responseHeaders":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"requestParams":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseParams":{"description":"DEPRECATED.","type":"object","additionalProperties":true,"default":{},"properties":{}},"requestData":{"description":"JSON object to include as the body of the HTTP request.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseData":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"default":{},"properties":{}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in `responseData`.","default":true},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"envsFromResponseData":{"description":"Environment variables to set based on response variables, as an object of the environment variable name and the jq filter applied to the response data to identify the variable\'s value.","type":"array","default":[],"items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"jqFilter":{"description":"jq filter to apply to the response data. If the filter doesn\'t return a value, the environment variable isn\'t set.","type":"string"}},"required":["name","jqFilter"]}]}}},"dynamicDefaults":{"id":"uuid"},"anyOf":[{"required":["url"]},{"required":["openApi"]}],"required":["action"],"additionalProperties":false,"examples":[{"action":"httpRequest","url":"https://reqres.in/api/users"},{"action":"httpRequest","url":"https://reqres.in/api/users/2","method":"put","requestData":{"name":"morpheus","job":"zion resident"}},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"httpRequest","url":"https://www.api-server.com","method":"post","timeout":30000,"requestHeaders":{"header":"value"},"requestParams":{"param":"value"},"requestData":{"field":"value"},"responseHeaders":{"header":"value"},"responseData":{"field":"value"},"statusCodes":[200]},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201],"savePath":"response.json","saveDirectory":"media","maxVariation":5,"overwrite":"byVariation"},{"action":"httpRequest","openApi":{"name":"Reqres","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","requestHeaders":{"Authorization":"Bearer $TOKEN"}}}]},{"title":"runShell","type":"object","description":"Perform a native shell command.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runShell","description":"The action to perform."},"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","command"],"examples":[{"action":"runShell","command":"echo","args":["$USER"]},{"action":"runShell","command":"echo","args":["hello-world"],"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!"},{"action":"runShell","command":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runShell","command":"false","exitCodes":[1]},{"action":"runShell","command":"echo","args":["setup"],"exitCodes":[0],"output":"/.*?/","setVariables":[{"name":"TEST","regex":".*"}]},{"action":"runShell","command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"output":"Hello from Docker!","savePath":"docker-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},{"title":"saveScreenshot","type":"object","description":"Takes a screenshot in PNG format.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"saveScreenshot","description":"The action to perform."},"path":{"type":"string","description":"File path of the PNG file, relative to `directory`. If not specified, the file name is the ID of the step.","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the exisitng screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":5,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `byVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"crop":{"type":"object","description":"Crops the screenshot.","properties":{"selector":{"type":"string","description":"Selector of the element to crop the image to."},"padding":{"oneOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}},"required":["selector"],"additionalProperties":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"saveScreenshot"},{"action":"saveScreenshot","path":"results.png"},{"action":"saveScreenshot","path":"results.png","directory":"static/images"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","maxVariation":10,"overwrite":"byVariation"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element"}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":10}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":{"top":10,"right":20,"bottom":30,"left":40}}}]},{"title":"setVariables","type":"object","description":"Load environment variables from a `.env` file.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"setVariables","description":"Action to perform."},"path":{"type":"string","description":"Path to the `.env` file."}},"dynamicDefaults":{"id":"uuid"},"required":["action","path"],"additionalProperties":false,"examples":[{"action":"setVariables","path":".env"}]},{"title":"startRecording","type":"object","description":"Start recording the current browser viewport. Must be followed by a `stopRecording` action. Only runs when the context `app` is `chrome` and `headless` is `false`. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"startRecording","description":"The action to perform."},"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the file. Attempts to create the directory if it doesn\'t exist."},"overwrite":{"type":"boolean","description":"If `true`, overwrites the existing file at `path` if it exists.","default":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"startRecording"},{"action":"startRecording","path":"results.mp4"},{"action":"startRecording","path":"results.mp4","directory":"static/media","overwrite":true}]},{"title":"stopRecording","type":"object","description":"Stop the current recording.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"stopRecording","description":"The action to perform."}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"stopRecording"}]},{"title":"typeKeys","type":"object","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s enum. For example, to type the Escape key, enter `$ESCAPE$`.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"typeKeys","description":"The action to perform."},"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}},"dynamicDefaults":{"id":"uuid"},"required":["action","keys"],"additionalProperties":false,"examples":[{"action":"typeKeys","keys":"kittens"},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"typeKeys","keys":["kittens","$ENTER$"],"delay":500}]},{"title":"wait","type":"object","description":"Pause before performing the next action.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"wait","description":"The action to perform."},"duration":{"type":"number","description":"Milliseconds to wait.","default":5000}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"wait"},{"action":"wait","duration":5000}]}]}}},"required":["name","regex"]}]}}},"required":["extensions","testStartStatementOpen","testStartStatementClose","testIgnoreStatement","testEndStatement","stepStatementOpen","stepStatementClose","markup"]}]},"default":[{"name":"Markdown","extensions":[".md",".markdown",".mdx"],"testStartStatementOpen":"[comment]: # (test start","testStartStatementClose":")","testIgnoreStatement":"[comment]: # (test ignore)","testEndStatement":"[comment]: # (test end)","stepStatementOpen":"[comment]: # (step","stepStatementClose":")","markup":[{"name":"onscreenText","regex":["\\\\*\\\\*.+?\\\\*\\\\*"],"actions":["find"]},{"name":"emphasis","regex":["(?<!\\\\*)\\\\*(?!\\\\*).+?(?<!\\\\*)\\\\*(?!\\\\*)"]},{"name":"image","regex":["!\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["checkLink"]},{"name":"hyperlink","regex":["(?<!!)\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["checkLink"]},{"name":"navigationLink","regex":["(?:[Cc]hose|[Oo]pen|[Cc]lick|[Nn]avigate to|[Gg]o to)(?<!!)\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["goTo"]},{"name":"orderedList","regex":["(?<=\\n) *?[0-9][0-9]?[0-9]?.\\\\s*.*"]},{"name":"unorderedList","regex":["(?<=\\n) *?\\\\*.\\\\s*.*","(?<=\\n) *?-.\\\\s*.*"]},{"name":"codeInline","regex":["(?<!`)`(?!`).+?(?<!`)`(?!`)"]},{"name":"interaction","regex":["[cC]lick","[tT]ap","[tT]ouch","[sS]elect","[cC]hoose","[tT]oggle","[eE]nable","[dD]isable","[tT]urn [oO][ff|n]","[tT]ype","[eE]nter","[sS]end","[aA]dd","[rR]emove","[dD]elete","[uU]pload","[dD]ownload","[sS]croll","[sS]earch","[fF]ilter","[sS]ort","[cC]opy","[pP]aste","[cC]ut","[rR]eplace","[cC]lear","[rR]efresh","[rR]evert","[rR]estore","[rR]eset","[lL]ogin","[lL]ogout","[sS]ign [iI]n","[sS]ign [oO]ut","[sS]ubmit","[cC]ancel","[cC]lose","[aA]ccept","[dD]ecline","[dD]eny","[rR]eject","[rR]etry","[rR]estart","[rR]esume"]}]},{"name":"AsciiDoc","extensions":[".adoc",".asciidoc, .asc"],"testStartStatementOpen":"// (test start","testStartStatementClose":")","testIgnoreStatement":"// (test ignore)","testEndStatement":"// (test end)","stepStatementOpen":"// (step","stepStatementClose":")","markup":[]},{"name":"HTML/XML","extensions":[".html",".htm",".xml",".xhtml"],"testStartStatementOpen":"<!-- test start","testStartStatementClose":"-->","testIgnoreStatement":"<!-- test ignore -->","testEndStatement":"<!-- test end -->","stepStatementOpen":"<!-- step","stepStatementClose":"-->","markup":[]}]},"integrations":{"description":"Options for connecting to external services.","type":"object","additionalProperties":false,"properties":{"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","properties":{"operationId":{"type":"null","$commment":"Only allow operationId at the step level."}},"required":["name","descriptionPath"]}]}}}},"telemetry":{"description":"Options around sending telemetry for Doc Detective usage.","type":"object","additionalProperties":false,"properties":{"send":{"description":"If `true`, sends Doc Detective telemetry.","type":"boolean","default":true},"userId":{"description":"Identifier for the organization, group, or individual running Doc Detective.","type":"string"}},"required":["send"],"default":{"send":true}},"logLevel":{"description":"Amount of detail to output when performing an operation.","type":"string","enum":["silent","error","warning","info","debug"],"default":"info"}},"definitions":{"input":{"description":"Path(s) to test specifications and documentation source files. May be paths to specific files or to directories to scan for files.","anyOf":[{"type":"string"},{"type":"array","items":{"anyOf":[{"type":"string"}]}}]},"recursive":{"description":"If `true` searches `input`, `setup`, and `cleanup` paths recursively for test specificaions and source files.","type":"boolean"},"output":{"description":"Path of the of the file or directory in which to store the output of Doc Detective commands. If a file path is specified, the output is written to that file. If a file of that name already exists, Doc Detective creates appends an integer to the result file name. If a directory path is specified, the output file name is dependent on the command being run.","type":"string","default":"."},"markupToInclude":{"description":"Markup types to include when performing this operation. If no markup types are specified, the operation includes all markup types as defined in `fileTypes`.","type":"array","items":{"oneOf":[{"type":"string"}]}}},"examples":[{},{"input":".","output":"."},{"defaultCommand":"runTests","envVariables":"","input":".","output":".","recursive":true,"logLevel":"info","runTests":{"input":".","output":".","setup":"","cleanup":"","recursive":true,"downloadDirectory":".","contexts":[{"app":{"name":"firefox","path":""},"platforms":["linux","mac","windows"]}]}},{"integrations":{"openApi":[{"name":"Acme","descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com","mockResponse":true}]}},{"envVariables":"","input":".","output":".","recursive":true,"logLevel":"info","runTests":{"input":".","output":".","setup":"","cleanup":"","recursive":true,"downloadDirectory":".","contexts":[{"app":{"name":"firefox","path":""},"platforms":["linux","mac","windows"]}]},"runCoverage":{"recursive":true,"input":".","output":".","markup":[]},"fileTypes":[{"name":"Markdown","extensions":[".md",".markdown",".mdx"],"testStartStatementOpen":"[comment]: # (test start","testStartStatementClose":")","testIgnoreStatement":"[comment]: # (test ignore)","testEndStatement":"[comment]: # (test end)","stepStatementOpen":"[comment]: # (step","stepStatementClose":")","markup":[{"name":"onscreenText","regex":["\\\\*\\\\*.+?\\\\*\\\\*"],"actions":["find"]},{"name":"emphasis","regex":["(?<!\\\\*)\\\\*(?!\\\\*).+?(?<!\\\\*)\\\\*(?!\\\\*)"]},{"name":"image","regex":["!\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["checkLink"]},{"name":"hyperlink","regex":["(?<!!)\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["checkLink"]},{"name":"navigationLink","regex":["(?:[Cc]hose|[Oo]pen|[Cc]lick|[Nn]avigate to|[Gg]o to)(?<!!)\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["goTo"]},{"name":"orderedList","regex":["(?<=\\n) *?[0-9][0-9]?[0-9]?.\\\\s*.*"]},{"name":"unorderedList","regex":["(?<=\\n) *?\\\\*.\\\\s*.*","(?<=\\n) *?-.\\\\s*.*"]},{"name":"codeInline","regex":["(?<!`)`(?!`).+?(?<!`)`(?!`)"]},{"name":"codeBlock","regex":["(?=(```))(\\\\w|\\\\W)*(?<=```)"]},{"name":"interaction","regex":["[cC]lick","[tT]ap","[tT]ouch","[sS]elect","[cC]hoose","[tT]oggle","[eE]nable","[dD]isable","[tT]urn [oO][ff|n]","[tT]ype","[eE]nter","[sS]end","[aA]dd","[rR]emove","[dD]elete","[uU]pload","[dD]ownload","[sS]croll","[sS]earch","[fF]ilter","[sS]ort","[cC]opy","[pP]aste","[cC]ut","[rR]eplace","[cC]lear","[rR]efresh","[rR]evert","[rR]estore","[rR]eset","[lL]ogin","[lL]ogout","[sS]ign [iI]n","[sS]ign [oO]ut","[sS]ubmit","[cC]ancel","[cC]lose","[aA]ccept","[dD]ecline","[dD]eny","[rR]eject","[rR]etry","[rR]estart","[rR]esume"]}]}],"integrations":{},"telemetry":{"send":true,"userId":"Doc Detective"}},{"envVariables":"","input":["."],"output":".","recursive":true,"relativePathBase":"cwd","logLevel":"info","runTests":{"input":["."],"output":".","setup":["."],"cleanup":["."],"recursive":true,"downloadDirectory":".","contexts":[{"app":{"name":"firefox","options":{"width":1200,"height":800,"headless":true}},"platforms":["linux","mac","windows"]}]},"runCoverage":{"recursive":true,"input":["."],"output":".","markup":[]},"fileTypes":[{"name":"Markdown","extensions":[".md",".markdown",".mdx"],"testStartStatementOpen":"[comment]: # (test start","testStartStatementClose":")","testIgnoreStatement":"[comment]: # (test ignore)","testEndStatement":"[comment]: # (test end)","stepStatementOpen":"[comment]: # (step","stepStatementClose":")","markup":[{"name":"onscreenText","regex":["\\\\*\\\\*.+?\\\\*\\\\*"],"actions":["find"]},{"name":"emphasis","regex":["(?<!\\\\*)\\\\*(?!\\\\*).+?(?<!\\\\*)\\\\*(?!\\\\*)"]},{"name":"image","regex":["!\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["checkLink"]},{"name":"hyperlink","regex":["(?<!!)\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["checkLink"]},{"name":"navigationLink","regex":["(?:[Cc]hose|[Oo]pen|[Cc]lick|[Nn]avigate to|[Gg]o to)(?<!!)\\\\[.+?\\\\]\\\\(.+?\\\\)"],"actions":["goTo"]},{"name":"orderedList","regex":["(?<=\\n) *?[0-9][0-9]?[0-9]?.\\\\s*.*"]},{"name":"unorderedList","regex":["(?<=\\n) *?\\\\*.\\\\s*.*","(?<=\\n) *?-.\\\\s*.*"]},{"name":"codeInline","regex":["(?<!`)`(?!`).+?(?<!`)`(?!`)"]},{"name":"codeBlock","regex":["(?=(```))(\\\\w|\\\\W)*(?<=```)"]},{"name":"interaction","regex":["[cC]lick","[tT]ap","[tT]ouch","[sS]elect","[cC]hoose","[tT]oggle","[eE]nable","[dD]isable","[tT]urn [oO][ff|n]","[tT]ype","[eE]nter","[sS]end","[aA]dd","[rR]emove","[dD]elete","[uU]pload","[dD]ownload","[sS]croll","[sS]earch","[fF]ilter","[sS]ort","[cC]opy","[pP]aste","[cC]ut","[rR]eplace","[cC]lear","[rR]efresh","[rR]evert","[rR]estore","[rR]eset","[lL]ogin","[lL]ogout","[sS]ign [iI]n","[sS]ign [oO]ut","[sS]ubmit","[cC]ancel","[cC]lose","[aA]ccept","[dD]ecline","[dD]eny","[rR]eject","[rR]etry","[rR]estart","[rR]esume"]}]},{"name":"AsciiDoc","extensions":[".adoc",".asciidoc, .asc"],"testStartStatementOpen":"// (test start","testStartStatementClose":")","testIgnoreStatement":"// (test ignore)","testEndStatement":"// (test end)","stepStatementOpen":"// (step","stepStatementClose":")","markup":[]},{"name":"HTML/XML","extensions":[".html",".htm",".xml",".xhtml"],"testStartStatementOpen":"<!-- test start","testStartStatementClose":"-->","testIgnoreStatement":"<!-- test ignore -->","testEndStatement":"<!-- test end -->","stepStatementOpen":"<!-- step","stepStatementClose":"-->","markup":[]}],"integrations":{},"telemetry":{"send":true,"userId":"Doc Detective"}}]},"context_v2":{"title":"context","type":"object","description":"An application and supported platforms.\\n\\nIf no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For browsers, context priority is Firefox > Chrome > Chromium.","properties":{"app":{"type":"object","description":"The application to run.","additionalProperties":false,"required":["name"],"properties":{"name":{"type":"string","description":"Name of the application.","enum":["chrome","firefox","safari","edge"]},"path":{"type":"string","description":"Absolute path or command for the application. If not specified, defaults to typical install paths per platform. If specified but the path is invalid, the context is skipped."},"options":{"type":"object","description":"Options to pass to the app. Only works when `name` is `firefox` or `chrome`.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the window in pixels."},"height":{"type":"integer","description":"Height of the window in pixels."},"viewport_height":{"type":"integer","description":"Height of the viewport in pixels. Overrides `height`."},"viewport_width":{"type":"integer","description":"Width of the viewport in pixels. Overrides `width`."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode. Not supported by Safari."},"driverPath":{"type":"string","description":"Path to the browser driver. If not specified, defaults to internally managed dependencies."}}}}},"platforms":{"description":"Supported platforms for the application.","type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}},"required":["app","platforms"],"additionalProperties":false,"examples":[{"app":{"name":"chrome"},"platforms":["linux"]},{"app":{"name":"chrome","options":{"viewport_width":800,"viewport_height":600}},"platforms":["linux"]},{"app":{"name":"firefox","options":{"width":800,"height":600,"headless":false,"driverPath":"/usr/bin/geckodriver"}},"platforms":["linux","windows","mac"]},{"app":{"name":"safari"},"platforms":["mac"]},{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}]},"find_v2":{"title":"find","type":"object","description":"Check if an element exists with the specified CSS selector.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"find","description":"Action to perform."},"selector":{"description":"Selector that uniquely identifies the element.","type":"string"},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"matchText":{"type":"string","description":"Text that the element should contain. If the element doesn\'t contain the text, the step fails. Accepts both strings an regular expressions. To use a regular expression, the expression should start and end with a `/`. For example, `/search/`."},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view. Only runs the if the test is being recorded.","oneOf":[{"type":"boolean"}],"default":false},"click":{"description":"Click the element.","oneOf":[{"type":"boolean","default":false},{"type":"object","additionalProperties":false,"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"typeKeys":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`typeKeys`](typeKeys). To type in the element, make the element active with the `click` parameter.","oneOf":[{"type":"string"},{"type":"object","additionalProperties":false,"properties":{"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}}}]},"setVariables":{"type":"array","description":"Extract environment variables from the element\'s text.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the element\'s text.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"required":["action","selector"],"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"examples":[{"action":"find","selector":"[title=Search]"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":"shorthair cat"},{"action":"find","selector":"[title=Search]","click":{"button":"right"}},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"],"delay":100}},{"action":"find","selector":"[title=ResultsCount]","setVariables":[{"name":"resultsCount","regex":".*"}]}]},"goTo_v2":{"title":"goTo","type":"object","description":"Navigate to a specified URL.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"goTo","description":"Action to perform."},"url":{"type":"string","description":"URL to navigate to.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!","action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516756","description":"This is a test!","action":"goTo","url":"/search","origin":"https://www.google.com"}]},"httpRequest_v2":{"title":"httpRequest","type":"object","description":"Perform a generic HTTP request, for example to an API.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"httpRequest","description":"Aciton to perform."},"url":{"type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","required":["operationId"]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"requestHeaders":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"responseHeaders":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"requestParams":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseParams":{"description":"DEPRECATED.","type":"object","additionalProperties":true,"default":{},"properties":{}},"requestData":{"description":"JSON object to include as the body of the HTTP request.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseData":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"default":{},"properties":{}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in `responseData`.","default":true},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"envsFromResponseData":{"description":"Environment variables to set based on response variables, as an object of the environment variable name and the jq filter applied to the response data to identify the variable\'s value.","type":"array","default":[],"items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"jqFilter":{"description":"jq filter to apply to the response data. If the filter doesn\'t return a value, the environment variable isn\'t set.","type":"string"}},"required":["name","jqFilter"]}]}}},"dynamicDefaults":{"id":"uuid"},"anyOf":[{"required":["url"]},{"required":["openApi"]}],"required":["action"],"additionalProperties":false,"examples":[{"action":"httpRequest","url":"https://reqres.in/api/users"},{"action":"httpRequest","url":"https://reqres.in/api/users/2","method":"put","requestData":{"name":"morpheus","job":"zion resident"}},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"httpRequest","url":"https://www.api-server.com","method":"post","timeout":30000,"requestHeaders":{"header":"value"},"requestParams":{"param":"value"},"requestData":{"field":"value"},"responseHeaders":{"header":"value"},"responseData":{"field":"value"},"statusCodes":[200]},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201],"savePath":"response.json","saveDirectory":"media","maxVariation":5,"overwrite":"byVariation"},{"action":"httpRequest","openApi":{"name":"Reqres","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","requestHeaders":{"Authorization":"Bearer $TOKEN"}}}]},"moveTo_v2":{"title":"moveTo","type":"object","description":"Move the mouse to a specific location.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"moveTo","description":"The action to perform."},"selector":{"description":"Selector for the element to move to.","type":"string"},"alignment":{"description":"Alignment of the element to move to.","type":"string","enum":["top","bottom","left","right","center"],"default":"center"},"offset":{"description":"Offset from the element to move to.","type":"object","properties":{"x":{"description":"Offset from the element to move to in x direction. Negative values move left, positive values move right.","type":"number","default":0},"y":{"description":"Offset from the element to move to in y direction. Negative values move up, positive values move down.","type":"number","default":0}},"default":{},"additionalProperties":false},"duration":{"description":"Duration of the move in milliseconds.","type":"number","minimum":0,"default":500}},"dynamicDefaults":{"id":"uuid"},"required":["action","selector"],"additionalProperties":false,"examples":[{"action":"moveTo","selector":"#searchInput"},{"action":"moveTo","selector":"#searchInput","alignment":"left"},{"action":"moveTo","selector":"#searchInput","alignment":"left","offset":{"x":10,"y":10}},{"action":"moveTo","selector":"#searchInput","alignment":"left","offset":{"x":10,"y":10},"duration":1000}]},"openApi_v2":{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},"runShell_v2":{"title":"runShell","type":"object","description":"Perform a native shell command.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runShell","description":"The action to perform."},"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","command"],"examples":[{"action":"runShell","command":"echo","args":["$USER"]},{"action":"runShell","command":"echo","args":["hello-world"],"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!"},{"action":"runShell","command":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runShell","command":"false","exitCodes":[1]},{"action":"runShell","command":"echo","args":["setup"],"exitCodes":[0],"output":"/.*?/","setVariables":[{"name":"TEST","regex":".*"}]},{"action":"runShell","command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"output":"Hello from Docker!","savePath":"docker-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},"runCode_v2":{"title":"runCode","type":"object","description":"Assemble and run code.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runCode","description":"The action to perform."},"language":{"type":"string","description":"Language of the code to run. If not specified, the code is run in the shell.","enum":["python","bash","javascript"]},"code":{"type":"string","description":"Code to run."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}},"properties":{"stdout":{"type":"string","description":"Standard output of the command.","readOnly":true},"stderr":{"type":"string","description":"Standard error of the command.","readOnly":true},"exitCode":{"type":"integer","description":"Exit code of the command.","readOnly":true}}}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","code","language"],"examples":[{"action":"runCode","language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"action":"runCode","language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runCode","language":"javascript","code":"return false","exitCodes":[1]},{"action":"runCode","language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"output":"Hello from Python!","savePath":"python-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},"saveScreenshot_v2":{"title":"saveScreenshot","type":"object","description":"Takes a screenshot in PNG format.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"saveScreenshot","description":"The action to perform."},"path":{"type":"string","description":"File path of the PNG file, relative to `directory`. If not specified, the file name is the ID of the step.","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the exisitng screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":5,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `byVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"crop":{"type":"object","description":"Crops the screenshot.","properties":{"selector":{"type":"string","description":"Selector of the element to crop the image to."},"padding":{"oneOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}},"required":["selector"],"additionalProperties":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"saveScreenshot"},{"action":"saveScreenshot","path":"results.png"},{"action":"saveScreenshot","path":"results.png","directory":"static/images"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","maxVariation":10,"overwrite":"byVariation"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element"}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":10}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":{"top":10,"right":20,"bottom":30,"left":40}}}]},"setVariables_v2":{"title":"setVariables","type":"object","description":"Load environment variables from a `.env` file.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"setVariables","description":"Action to perform."},"path":{"type":"string","description":"Path to the `.env` file."}},"dynamicDefaults":{"id":"uuid"},"required":["action","path"],"additionalProperties":false,"examples":[{"action":"setVariables","path":".env"}]},"startRecording_v2":{"title":"startRecording","type":"object","description":"Start recording the current browser viewport. Must be followed by a `stopRecording` action. Only runs when the context `app` is `chrome` and `headless` is `false`. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"startRecording","description":"The action to perform."},"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the file. Attempts to create the directory if it doesn\'t exist."},"overwrite":{"type":"boolean","description":"If `true`, overwrites the existing file at `path` if it exists.","default":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"startRecording"},{"action":"startRecording","path":"results.mp4"},{"action":"startRecording","path":"results.mp4","directory":"static/media","overwrite":true}]},"stopRecording_v2":{"title":"stopRecording","type":"object","description":"Stop the current recording.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"stopRecording","description":"The action to perform."}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"stopRecording"}]},"spec_v2":{"title":"specification","type":"object","properties":{"id":{"type":"string","description":"Unique identifier for the test specification."},"description":{"type":"string","description":"Description of the test specification."},"file":{"type":"string","description":"Path to the file that the specification is associated with."},"contexts":{"type":"array","description":"Application/platform sets to run tests in. Overrides `contexts` defined at the config-level.","items":{"oneOf":[{"title":"context","type":"object","description":"An application and supported platforms.\\n\\nIf no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For browsers, context priority is Firefox > Chrome > Chromium.","properties":{"app":{"type":"object","description":"The application to run.","additionalProperties":false,"required":["name"],"properties":{"name":{"type":"string","description":"Name of the application.","enum":["chrome","firefox","safari","edge"]},"path":{"type":"string","description":"Absolute path or command for the application. If not specified, defaults to typical install paths per platform. If specified but the path is invalid, the context is skipped."},"options":{"type":"object","description":"Options to pass to the app. Only works when `name` is `firefox` or `chrome`.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the window in pixels."},"height":{"type":"integer","description":"Height of the window in pixels."},"viewport_height":{"type":"integer","description":"Height of the viewport in pixels. Overrides `height`."},"viewport_width":{"type":"integer","description":"Width of the viewport in pixels. Overrides `width`."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode. Not supported by Safari."},"driverPath":{"type":"string","description":"Path to the browser driver. If not specified, defaults to internally managed dependencies."}}}}},"platforms":{"description":"Supported platforms for the application.","type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}},"required":["app","platforms"],"additionalProperties":false,"examples":[{"app":{"name":"chrome"},"platforms":["linux"]},{"app":{"name":"chrome","options":{"viewport_width":800,"viewport_height":600}},"platforms":["linux"]},{"app":{"name":"firefox","options":{"width":800,"height":600,"headless":false,"driverPath":"/usr/bin/geckodriver"}},"platforms":["linux","windows","mac"]},{"app":{"name":"safari"},"platforms":["mac"]},{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","properties":{"operationId":{"type":"null","$commment":"Only allow operationId at the step level."}},"required":["name","descriptionPath"]}]}},"tests":{"description":"[Tests](test) to perform.","type":"array","minItems":1,"items":{"oneOf":[{"title":"test","type":"object","description":"A Doc Detective test.","properties":{"id":{"type":"string","description":"Unique identifier for the test."},"description":{"type":"string","description":"Description of the test."},"file":{"type":"string","description":"Path to the file that the test is associated with."},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex. Defaults to `true`."},"contexts":{"type":"array","description":"Application/platform sets to run the test in. Overrides `contexts` defined at the config-level and spec-level.","items":{"oneOf":[{"title":"context","type":"object","description":"An application and supported platforms.\\n\\nIf no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For browsers, context priority is Firefox > Chrome > Chromium.","properties":{"app":{"type":"object","description":"The application to run.","additionalProperties":false,"required":["name"],"properties":{"name":{"type":"string","description":"Name of the application.","enum":["chrome","firefox","safari","edge"]},"path":{"type":"string","description":"Absolute path or command for the application. If not specified, defaults to typical install paths per platform. If specified but the path is invalid, the context is skipped."},"options":{"type":"object","description":"Options to pass to the app. Only works when `name` is `firefox` or `chrome`.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the window in pixels."},"height":{"type":"integer","description":"Height of the window in pixels."},"viewport_height":{"type":"integer","description":"Height of the viewport in pixels. Overrides `height`."},"viewport_width":{"type":"integer","description":"Width of the viewport in pixels. Overrides `width`."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode. Not supported by Safari."},"driverPath":{"type":"string","description":"Path to the browser driver. If not specified, defaults to internally managed dependencies."}}}}},"platforms":{"description":"Supported platforms for the application.","type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}},"required":["app","platforms"],"additionalProperties":false,"examples":[{"app":{"name":"chrome"},"platforms":["linux"]},{"app":{"name":"chrome","options":{"viewport_width":800,"viewport_height":600}},"platforms":["linux"]},{"app":{"name":"firefox","options":{"width":800,"height":600,"headless":false,"driverPath":"/usr/bin/geckodriver"}},"platforms":["linux","windows","mac"]},{"app":{"name":"safari"},"platforms":["mac"]},{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","properties":{"operationId":{"type":"null","$commment":"Only allow operationId at the step level."}},"required":["name","descriptionPath"]}]}},"setup":{"type":"string","description":"Path to a test specification to perform before this test, while maintaining this test\'s context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."},"cleanup":{"type":"string","description":"Path to a test specification to perform after this test, while maintaining this test\'s context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."},"steps":{"description":"Actions to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails.","type":"array","minItems":1,"items":{"anyOf":[{"title":"checkLink","type":"object","description":"Check if a URL returns an acceptable status code from a GET request.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"checkLink","description":"Action to perform."},"url":{"type":"string","description":"URL to check.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201,202]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"checkLink","url":"https://www.google.com"},{"action":"checkLink","url":"https://www.google.com","statusCodes":[200]},{"action":"checkLink","url":"/search","origin":"www.google.com","statusCodes":[200]}]},{"title":"goTo","type":"object","description":"Navigate to a specified URL.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"goTo","description":"Action to perform."},"url":{"type":"string","description":"URL to navigate to.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!","action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516756","description":"This is a test!","action":"goTo","url":"/search","origin":"https://www.google.com"}]},{"title":"httpRequest","type":"object","description":"Perform a generic HTTP request, for example to an API.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"httpRequest","description":"Aciton to perform."},"url":{"type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","required":["operationId"]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"requestHeaders":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"responseHeaders":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"requestParams":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseParams":{"description":"DEPRECATED.","type":"object","additionalProperties":true,"default":{},"properties":{}},"requestData":{"description":"JSON object to include as the body of the HTTP request.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseData":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"default":{},"properties":{}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in `responseData`.","default":true},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"envsFromResponseData":{"description":"Environment variables to set based on response variables, as an object of the environment variable name and the jq filter applied to the response data to identify the variable\'s value.","type":"array","default":[],"items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"jqFilter":{"description":"jq filter to apply to the response data. If the filter doesn\'t return a value, the environment variable isn\'t set.","type":"string"}},"required":["name","jqFilter"]}]}}},"dynamicDefaults":{"id":"uuid"},"anyOf":[{"required":["url"]},{"required":["openApi"]}],"required":["action"],"additionalProperties":false,"examples":[{"action":"httpRequest","url":"https://reqres.in/api/users"},{"action":"httpRequest","url":"https://reqres.in/api/users/2","method":"put","requestData":{"name":"morpheus","job":"zion resident"}},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"httpRequest","url":"https://www.api-server.com","method":"post","timeout":30000,"requestHeaders":{"header":"value"},"requestParams":{"param":"value"},"requestData":{"field":"value"},"responseHeaders":{"header":"value"},"responseData":{"field":"value"},"statusCodes":[200]},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201],"savePath":"response.json","saveDirectory":"media","maxVariation":5,"overwrite":"byVariation"},{"action":"httpRequest","openApi":{"name":"Reqres","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","requestHeaders":{"Authorization":"Bearer $TOKEN"}}}]},{"title":"runCode","type":"object","description":"Assemble and run code.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runCode","description":"The action to perform."},"language":{"type":"string","description":"Language of the code to run. If not specified, the code is run in the shell.","enum":["python","bash","javascript"]},"code":{"type":"string","description":"Code to run."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}},"properties":{"stdout":{"type":"string","description":"Standard output of the command.","readOnly":true},"stderr":{"type":"string","description":"Standard error of the command.","readOnly":true},"exitCode":{"type":"integer","description":"Exit code of the command.","readOnly":true}}}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","code","language"],"examples":[{"action":"runCode","language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"action":"runCode","language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runCode","language":"javascript","code":"return false","exitCodes":[1]},{"action":"runCode","language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"output":"Hello from Python!","savePath":"python-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},{"title":"runShell","type":"object","description":"Perform a native shell command.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runShell","description":"The action to perform."},"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","command"],"examples":[{"action":"runShell","command":"echo","args":["$USER"]},{"action":"runShell","command":"echo","args":["hello-world"],"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!"},{"action":"runShell","command":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runShell","command":"false","exitCodes":[1]},{"action":"runShell","command":"echo","args":["setup"],"exitCodes":[0],"output":"/.*?/","setVariables":[{"name":"TEST","regex":".*"}]},{"action":"runShell","command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"output":"Hello from Docker!","savePath":"docker-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},{"title":"saveScreenshot","type":"object","description":"Takes a screenshot in PNG format.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"saveScreenshot","description":"The action to perform."},"path":{"type":"string","description":"File path of the PNG file, relative to `directory`. If not specified, the file name is the ID of the step.","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the exisitng screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":5,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `byVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"crop":{"type":"object","description":"Crops the screenshot.","properties":{"selector":{"type":"string","description":"Selector of the element to crop the image to."},"padding":{"oneOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}},"required":["selector"],"additionalProperties":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"saveScreenshot"},{"action":"saveScreenshot","path":"results.png"},{"action":"saveScreenshot","path":"results.png","directory":"static/images"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","maxVariation":10,"overwrite":"byVariation"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element"}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":10}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":{"top":10,"right":20,"bottom":30,"left":40}}}]},{"title":"setVariables","type":"object","description":"Load environment variables from a `.env` file.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"setVariables","description":"Action to perform."},"path":{"type":"string","description":"Path to the `.env` file."}},"dynamicDefaults":{"id":"uuid"},"required":["action","path"],"additionalProperties":false,"examples":[{"action":"setVariables","path":".env"}]},{"title":"startRecording","type":"object","description":"Start recording the current browser viewport. Must be followed by a `stopRecording` action. Only runs when the context `app` is `chrome` and `headless` is `false`. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"startRecording","description":"The action to perform."},"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the file. Attempts to create the directory if it doesn\'t exist."},"overwrite":{"type":"boolean","description":"If `true`, overwrites the existing file at `path` if it exists.","default":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"startRecording"},{"action":"startRecording","path":"results.mp4"},{"action":"startRecording","path":"results.mp4","directory":"static/media","overwrite":true}]},{"title":"stopRecording","type":"object","description":"Stop the current recording.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"stopRecording","description":"The action to perform."}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"stopRecording"}]},{"title":"typeKeys","type":"object","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s enum. For example, to type the Escape key, enter `$ESCAPE$`.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"typeKeys","description":"The action to perform."},"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}},"dynamicDefaults":{"id":"uuid"},"required":["action","keys"],"additionalProperties":false,"examples":[{"action":"typeKeys","keys":"kittens"},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"typeKeys","keys":["kittens","$ENTER$"],"delay":500}]},{"title":"find","type":"object","description":"Check if an element exists with the specified CSS selector.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"find","description":"Action to perform."},"selector":{"description":"Selector that uniquely identifies the element.","type":"string"},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"matchText":{"type":"string","description":"Text that the element should contain. If the element doesn\'t contain the text, the step fails. Accepts both strings an regular expressions. To use a regular expression, the expression should start and end with a `/`. For example, `/search/`."},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view. Only runs the if the test is being recorded.","oneOf":[{"type":"boolean"}],"default":false},"click":{"description":"Click the element.","oneOf":[{"type":"boolean","default":false},{"type":"object","additionalProperties":false,"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"typeKeys":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`typeKeys`](typeKeys). To type in the element, make the element active with the `click` parameter.","oneOf":[{"type":"string"},{"type":"object","additionalProperties":false,"properties":{"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}}}]},"setVariables":{"type":"array","description":"Extract environment variables from the element\'s text.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the element\'s text.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"required":["action","selector"],"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"examples":[{"action":"find","selector":"[title=Search]"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":"shorthair cat"},{"action":"find","selector":"[title=Search]","click":{"button":"right"}},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"],"delay":100}},{"action":"find","selector":"[title=ResultsCount]","setVariables":[{"name":"resultsCount","regex":".*"}]}]},{"title":"wait","type":"object","description":"Pause before performing the next action.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"wait","description":"The action to perform."},"duration":{"type":"number","description":"Milliseconds to wait.","default":5000}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"wait"},{"action":"wait","duration":5000}]}]}}},"dynamicDefaults":{"id":"uuid"},"required":["steps"],"additionalProperties":false,"examples":[{"steps":[{"action":"checkLink","url":"https://www.duckduckgo.com"}]},{"steps":[{"action":"goTo","url":"https://www.duckduckgo.com"},{"action":"find","selector":"[title=Search]","click":true,"typeKeys":{"keys":["shorthair cats","$ENTER$"]}}]},{"id":"Do all the things! - Test","description":"This test includes every property across all actions.","contexts":[{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}],"setup":"setup.json","cleanup":"cleanup.json","steps":[{"action":"setVariables","path":".env"},{"action":"runShell","command":"echo","args":["$USER"]},{"action":"checkLink","url":"https://www.duckduckgo.com"},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"goTo","url":"https://www.duckduckgo.com"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"]}},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"saveScreenshot"}]},{"openApi":[{"name":"Acme","descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com"}],"steps":[{"action":"httpRequest","openApi":{"operationId":"getUserById"},"requestParams":{"id":123}}]}]}]}}},"required":["tests"],"examples":[{"tests":[{"steps":[{"action":"checkLink","url":"https://www.duckduckgo.com"}]}]},{"id":"Do all the things! - Spec","contexts":[{"app":{"name":"chrome","path":"/usr/bin/firefox"},"platforms":["windows","mac"]}],"tests":[{"id":"Do all the things! - Test","description":"This test includes nearly every property across all actions.","contexts":[{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}],"steps":[{"action":"setVariables","path":".env"},{"action":"runShell","command":"echo","args":["$USER"]},{"action":"checkLink","url":"https://www.duckduckgo.com"},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"goTo","url":"https://www.duckduckgo.com"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"]}},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"saveScreenshot"}]}]},{"id":"Make a request from an OpenAPI definition","openApi":[{"name":"Acme","descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com"}],"tests":[{"steps":[{"action":"httpRequest","openApi":{"operationId":"getUserById"},"requestParams":{"id":123}}]}]}]},"test_v2":{"title":"test","type":"object","description":"A Doc Detective test.","properties":{"id":{"type":"string","description":"Unique identifier for the test."},"description":{"type":"string","description":"Description of the test."},"file":{"type":"string","description":"Path to the file that the test is associated with."},"detectSteps":{"type":"boolean","description":"Whether or not to detect steps in input files based on markup regex. Defaults to `true`."},"contexts":{"type":"array","description":"Application/platform sets to run the test in. Overrides `contexts` defined at the config-level and spec-level.","items":{"oneOf":[{"title":"context","type":"object","description":"An application and supported platforms.\\n\\nIf no contexts are specified but a context is required by one or more tests, Doc Detective attempts to identify a supported context in the current environment and run tests against it. For browsers, context priority is Firefox > Chrome > Chromium.","properties":{"app":{"type":"object","description":"The application to run.","additionalProperties":false,"required":["name"],"properties":{"name":{"type":"string","description":"Name of the application.","enum":["chrome","firefox","safari","edge"]},"path":{"type":"string","description":"Absolute path or command for the application. If not specified, defaults to typical install paths per platform. If specified but the path is invalid, the context is skipped."},"options":{"type":"object","description":"Options to pass to the app. Only works when `name` is `firefox` or `chrome`.","additionalProperties":false,"properties":{"width":{"type":"integer","description":"Width of the window in pixels."},"height":{"type":"integer","description":"Height of the window in pixels."},"viewport_height":{"type":"integer","description":"Height of the viewport in pixels. Overrides `height`."},"viewport_width":{"type":"integer","description":"Width of the viewport in pixels. Overrides `width`."},"headless":{"type":"boolean","description":"If `true`, runs the browser in headless mode. Not supported by Safari."},"driverPath":{"type":"string","description":"Path to the browser driver. If not specified, defaults to internally managed dependencies."}}}}},"platforms":{"description":"Supported platforms for the application.","type":"array","items":{"type":"string","enum":["linux","mac","windows"]}}},"required":["app","platforms"],"additionalProperties":false,"examples":[{"app":{"name":"chrome"},"platforms":["linux"]},{"app":{"name":"chrome","options":{"viewport_width":800,"viewport_height":600}},"platforms":["linux"]},{"app":{"name":"firefox","options":{"width":800,"height":600,"headless":false,"driverPath":"/usr/bin/geckodriver"}},"platforms":["linux","windows","mac"]},{"app":{"name":"safari"},"platforms":["mac"]},{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}]}]}},"openApi":{"type":"array","items":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","properties":{"operationId":{"type":"null","$commment":"Only allow operationId at the step level."}},"required":["name","descriptionPath"]}]}},"setup":{"type":"string","description":"Path to a test specification to perform before this test, while maintaining this test\'s context. Useful for setting up testing environments. Only the `steps` property is used from the first test in the setup spec."},"cleanup":{"type":"string","description":"Path to a test specification to perform after this test, while maintaining this test\'s context. Useful for cleaning up testing environments. Only the `steps` property is used from the first test in the cleanup spec."},"steps":{"description":"Actions to perform as part of the test. Performed in the sequence defined. If one or more actions fail, the test fails.","type":"array","minItems":1,"items":{"anyOf":[{"title":"checkLink","type":"object","description":"Check if a URL returns an acceptable status code from a GET request.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"checkLink","description":"Action to perform."},"url":{"type":"string","description":"URL to check.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200,201,202]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"checkLink","url":"https://www.google.com"},{"action":"checkLink","url":"https://www.google.com","statusCodes":[200]},{"action":"checkLink","url":"/search","origin":"www.google.com","statusCodes":[200]}]},{"title":"goTo","type":"object","description":"Navigate to a specified URL.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"goTo","description":"Action to perform."},"url":{"type":"string","description":"URL to navigate to.","pattern":"(^(http://|https://|/).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"origin":{"type":"string","description":"Protocol and domain to navigate to. Prepended to `url`.","transform":["trim"]}},"dynamicDefaults":{"id":"uuid"},"required":["action","url"],"additionalProperties":false,"examples":[{"action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!","action":"goTo","url":"https://www.google.com"},{"id":"ddec5e20-2e81-4f38-867c-92c8d9516756","description":"This is a test!","action":"goTo","url":"/search","origin":"https://www.google.com"}]},{"title":"httpRequest","type":"object","description":"Perform a generic HTTP request, for example to an API.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"httpRequest","description":"Aciton to perform."},"url":{"type":"string","description":"URL for the HTTP request.","pattern":"(^(http://|https://).*|\\\\$[A-Za-z0-9_]+)","transform":["trim"]},"openApi":{"allOf":[{"version":"1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"openApi","type":"object","description":"OpenAPI definition and configuration.","additionalProperties":false,"properties":{"name":{"type":"string","description":"Name of the OpenAPI definition, as defined in your configuration."},"descriptionPath":{"type":"string","description":"URL or local path to the OpenAPI definition."},"operationId":{"type":"string","description":"ID of the operation to use for the request."},"server":{"type":"string","description":"Server to use for example requests. Only valid if `useExample` is `request` or `both`. If not specified but an example is used for the request, uses the first server defined in the OpenAPI definition."},"validateAgainstSchema":{"type":"string","description":"Validates the request and/or response against the schema in the OpenAPI definition. If the request or response doesn\'t match the schema, the step fails.","enum":["request","response","both","none"],"default":"both"},"mockResponse":{"type":"boolean","description":"If `true`, doesn\'t make the HTTP request, but instead uses the response example or schema from the OpenAPI definition as the response data. Useful for creating tests when an API isn\'t fully implemented yet. If `statusCode` isn\'t specified, uses the first defined response code."},"statusCode":{"type":"integer","description":"Response code to use for validation, examples, and status code checking. If the response code doesn\'t match, the step fails. `statusCodes` overrides this value when specified."},"useExample":{"type":["string"],"description":"Uses the example from the OpenAPI definition as the request and response data. If the request or response has multiple examples, specify `exampleKey`. If `statusCode` isn\'t specified, uses the first defined response code. `requestData`, `requestParams`, and `requestHeaders` override portions of request examples when specified. `responseData` overrides portions of response examples when specified.","enum":["request","response","both","none"],"default":"none"},"exampleKey":{"type":"string","description":"Key of the example to use from the `examples` property in the OpenAPI definition. If an `examples` key isn\'t specified or isn\'t available for a given parameter or object, the `example` property value is used.","default":""},"requestHeaders":{"type":"object","description":"Request headers to add to the request. If specified in both a config and a step, the step value overrides the config value.","additionalProperties":{"type":"string"}}},"examples":[{"descriptionPath":"https://petstore.swagger.io/v2/swagger.json"}]},{"type":"object","required":["operationId"]}]},"statusCodes":{"description":"Accepted status codes. If the specified URL returns a code other than what is specified here, the action fails.","type":"array","items":{"oneOf":[{"type":"integer"}]},"default":[200]},"method":{"type":"string","description":"Method of the HTTP request","enum":["get","put","post","patch","delete"],"transform":["trim","toEnumCase"],"default":"get"},"timeout":{"type":"integer","description":"Timeout for the HTTP request, in milliseconds.","default":60000},"requestHeaders":{"description":"Headers to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"properties":{},"default":{}},"responseHeaders":{"description":"Headers expected in the response, in key/value format. If one or more `responseHeaders` entries aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"properties":{},"default":{}},"requestParams":{"description":"URL parameters to include in the HTTP request, in key/value format.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseParams":{"description":"DEPRECATED.","type":"object","additionalProperties":true,"default":{},"properties":{}},"requestData":{"description":"JSON object to include as the body of the HTTP request.","type":"object","additionalProperties":true,"default":{},"properties":{}},"responseData":{"description":"JSON object expected in the response. If one or more key/value pairs aren\'t present in the response, the step fails.","type":"object","additionalProperties":true,"default":{},"properties":{}},"allowAdditionalFields":{"type":"boolean","description":"If `false`, the step fails when the response data contains fields not specified in `responseData`.","default":true},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`. Specify a file extension that matches the expected response type, such as `.json` for JSON content or `.txt` for strings."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"envsFromResponseData":{"description":"Environment variables to set based on response variables, as an object of the environment variable name and the jq filter applied to the response data to identify the variable\'s value.","type":"array","default":[],"items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"jqFilter":{"description":"jq filter to apply to the response data. If the filter doesn\'t return a value, the environment variable isn\'t set.","type":"string"}},"required":["name","jqFilter"]}]}}},"dynamicDefaults":{"id":"uuid"},"anyOf":[{"required":["url"]},{"required":["openApi"]}],"required":["action"],"additionalProperties":false,"examples":[{"action":"httpRequest","url":"https://reqres.in/api/users"},{"action":"httpRequest","url":"https://reqres.in/api/users/2","method":"put","requestData":{"name":"morpheus","job":"zion resident"}},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"httpRequest","url":"https://www.api-server.com","method":"post","timeout":30000,"requestHeaders":{"header":"value"},"requestParams":{"param":"value"},"requestData":{"field":"value"},"responseHeaders":{"header":"value"},"responseData":{"field":"value"},"statusCodes":[200]},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201],"savePath":"response.json","saveDirectory":"media","maxVariation":5,"overwrite":"byVariation"},{"action":"httpRequest","openApi":{"name":"Reqres","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"getUserById"},"requestParams":{"id":123}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"createUser","useExample":"both"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme"}},{"action":"httpRequest","openApi":{"descriptionPath":"https://api.example.com/openapi.json","operationId":"updateUser","useExample":"request","exampleKey":"acme","requestHeaders":{"Authorization":"Bearer $TOKEN"}}}]},{"title":"runCode","type":"object","description":"Assemble and run code.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runCode","description":"The action to perform."},"language":{"type":"string","description":"Language of the code to run. If not specified, the code is run in the shell.","enum":["python","bash","javascript"]},"code":{"type":"string","description":"Code to run."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]},"outputs":{"type":"object","description":"Outputs from step processes and user-defined expressions. Use the `outputs` object to reference outputs in subsequent steps. If a user-defined output matches the key for a step-defined output, the user-defined output takes precedence.","patternProperties":{"^[A-Za-z0-9_]+$":{"type":"string","description":"Runtime expression for a user-defined output value."}},"properties":{"stdout":{"type":"string","description":"Standard output of the command.","readOnly":true},"stderr":{"type":"string","description":"Standard error of the command.","readOnly":true},"exitCode":{"type":"integer","description":"Exit code of the command.","readOnly":true}}}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","code","language"],"examples":[{"action":"runCode","language":"javascript","code":"console.log(\'Hello, ${process.env.USER}!\');"},{"action":"runCode","language":"bash","code":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runCode","language":"javascript","code":"return false","exitCodes":[1]},{"action":"runCode","language":"python","code":"print(\'Hello from Python\')","workingDirectory":".","exitCodes":[0],"output":"Hello from Python!","savePath":"python-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},{"title":"runShell","type":"object","description":"Perform a native shell command.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"runShell","description":"The action to perform."},"command":{"type":"string","description":"Command to perform in the machine\'s default shell."},"args":{"type":"array","description":"Arguments for the command.","items":{"oneOf":[{"type":"string"}]},"default":[]},"workingDirectory":{"type":"string","description":"Working directory for the command.","default":"."},"exitCodes":{"type":"array","description":"Expected exit codes of the command. If the command\'s actual exit code isn\'t in this list, the step fails.","items":{"oneOf":[{"type":"integer"}]},"default":[0]},"output":{"type":"string","description":"Content expected in the command\'s output. If the expected content can\'t be found in the command\'s output (either stdout or stderr), the step fails. Supports strings and regular expressions. To use a regular expression, the string must start and end with a forward slash, like in `/^hello-world.*/`."},"savePath":{"type":"string","description":"File path to save the command\'s output, relative to `saveDirectory`."},"saveDirectory":{"type":"string","description":"Directory to save the command\'s output. If the directory doesn\'t exist, creates the directory. If not specified, the directory is your media directory."},"maxVariation":{"type":"integer","description":"Allowed variation in percentage of text different between the current output and previously saved output. If the difference between the current output and the previous output is greater than `maxVariation`, the step fails. If output doesn\'t exist at `savePath`, this value is ignored.","default":0,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing output at `savePath` if it exists.\\nIf `byVariation`, overwrites the existing output at `savePath` if the difference between the new output and the existing output is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"timeout":{"type":"integer","description":"Max time in milliseconds the command is allowed to run. If the command runs longer than this, the step fails.","default":60000},"setVariables":{"type":"array","description":"Extract environment variables from the command\'s output.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the command\'s output.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"required":["action","command"],"examples":[{"action":"runShell","command":"echo","args":["$USER"]},{"action":"runShell","command":"echo","args":["hello-world"],"id":"ddec5e20-2e81-4f38-867c-92c8d9516755","description":"This is a test!"},{"action":"runShell","command":"docker run hello-world","timeout":20000,"exitCodes":[0],"output":"Hello from Docker!"},{"action":"runShell","command":"false","exitCodes":[1]},{"action":"runShell","command":"echo","args":["setup"],"exitCodes":[0],"output":"/.*?/","setVariables":[{"name":"TEST","regex":".*"}]},{"action":"runShell","command":"docker run hello-world","workingDirectory":".","exitCodes":[0],"output":"Hello from Docker!","savePath":"docker-output.txt","saveDirectory":"output","maxVariation":10,"overwrite":"byVariation"}]},{"title":"saveScreenshot","type":"object","description":"Takes a screenshot in PNG format.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"saveScreenshot","description":"The action to perform."},"path":{"type":"string","description":"File path of the PNG file, relative to `directory`. If not specified, the file name is the ID of the step.","pattern":"([A-Za-z0-9_-]*\\\\.(png|PNG)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the PNG file. If the directory doesn\'t exist, creates the directory."},"maxVariation":{"type":"number","description":"Allowed variation in percentage of pixels between the new screenshot and the exisitng screenshot at `path`. If the difference between the new screenshot and the existing screenshot is greater than `maxVariation`, the step fails. If a screenshot doesn\'t exist at `path`, this value is ignored.","default":5,"minimum":0,"maximum":100},"overwrite":{"type":"string","description":"If `true`, overwrites the existing screenshot at `path` if it exists.\\nIf `byVariation`, overwrites the existing screenshot at `path` if the difference between the new screenshot and the existing screenshot is greater than `maxVariation`.","enum":["true","false","byVariation"],"default":"false"},"crop":{"type":"object","description":"Crops the screenshot.","properties":{"selector":{"type":"string","description":"Selector of the element to crop the image to."},"padding":{"oneOf":[{"type":"number","description":"Padding in pixels to add to the bounds of the element.","minimum":0},{"type":"object","properties":{"top":{"type":"number","minimum":0},"right":{"type":"number","minimum":0},"bottom":{"type":"number","minimum":0},"left":{"type":"number","minimum":0}}}]}},"required":["selector"],"additionalProperties":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"saveScreenshot"},{"action":"saveScreenshot","path":"results.png"},{"action":"saveScreenshot","path":"results.png","directory":"static/images"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","maxVariation":10,"overwrite":"byVariation"},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element"}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":10}},{"action":"saveScreenshot","path":"results.png","directory":"static/images","crop":{"selector":"#element","padding":{"top":10,"right":20,"bottom":30,"left":40}}}]},{"title":"setVariables","type":"object","description":"Load environment variables from a `.env` file.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"setVariables","description":"Action to perform."},"path":{"type":"string","description":"Path to the `.env` file."}},"dynamicDefaults":{"id":"uuid"},"required":["action","path"],"additionalProperties":false,"examples":[{"action":"setVariables","path":".env"}]},{"title":"startRecording","type":"object","description":"Start recording the current browser viewport. Must be followed by a `stopRecording` action. Only runs when the context `app` is `chrome` and `headless` is `false`. Supported extensions: [ \'.mp4\', \'.webm\', \'.gif\' ]","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"startRecording","description":"The action to perform."},"path":{"type":"string","description":"File path of the recording. Supports the `.mp4`, `.webm`, and `.gif` extensions. If not specified, the file name is the ID of the step, and the extension is `.mp4`.","pattern":"([A-Za-z0-9_-]*\\\\.(mp4|webm|gif)$|\\\\$[A-Za-z0-9_]+)"},"directory":{"type":"string","description":"Directory of the file. Attempts to create the directory if it doesn\'t exist."},"overwrite":{"type":"boolean","description":"If `true`, overwrites the existing file at `path` if it exists.","default":false}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"startRecording"},{"action":"startRecording","path":"results.mp4"},{"action":"startRecording","path":"results.mp4","directory":"static/media","overwrite":true}]},{"title":"stopRecording","type":"object","description":"Stop the current recording.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"stopRecording","description":"The action to perform."}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"stopRecording"}]},{"title":"typeKeys","type":"object","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s enum. For example, to type the Escape key, enter `$ESCAPE$`.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"typeKeys","description":"The action to perform."},"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}},"dynamicDefaults":{"id":"uuid"},"required":["action","keys"],"additionalProperties":false,"examples":[{"action":"typeKeys","keys":"kittens"},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"typeKeys","keys":["kittens","$ENTER$"],"delay":500}]},{"title":"find","type":"object","description":"Check if an element exists with the specified CSS selector.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"find","description":"Action to perform."},"selector":{"description":"Selector that uniquely identifies the element.","type":"string"},"timeout":{"type":"integer","description":"Max duration in milliseconds to wait for the element to exist.","default":5000},"matchText":{"type":"string","description":"Text that the element should contain. If the element doesn\'t contain the text, the step fails. Accepts both strings an regular expressions. To use a regular expression, the expression should start and end with a `/`. For example, `/search/`."},"moveTo":{"description":"Move to the element. If the element isn\'t visible, it\'s scrolled into view. Only runs the if the test is being recorded.","oneOf":[{"type":"boolean"}],"default":false},"click":{"description":"Click the element.","oneOf":[{"type":"boolean","default":false},{"type":"object","additionalProperties":false,"properties":{"button":{"description":"Kind of click to perform.","type":"string","enum":["left","right","middle"]}}}]},"typeKeys":{"description":"Type keys after finding the element. Either a string or an object with a `keys` field as defined in [`typeKeys`](typeKeys). To type in the element, make the element active with the `click` parameter.","oneOf":[{"type":"string"},{"type":"object","additionalProperties":false,"properties":{"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}}}]},"setVariables":{"type":"array","description":"Extract environment variables from the element\'s text.","items":{"oneOf":[{"description":"","type":"object","properties":{"name":{"description":"Name of the environment variable to set.","type":"string"},"regex":{"description":"Regex to extract the environment variable from the element\'s text.","type":"string"}},"required":["name","regex"]}]},"default":[]}},"required":["action","selector"],"dynamicDefaults":{"id":"uuid"},"additionalProperties":false,"examples":[{"action":"find","selector":"[title=Search]"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":"shorthair cat"},{"action":"find","selector":"[title=Search]","click":{"button":"right"}},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"],"delay":100}},{"action":"find","selector":"[title=ResultsCount]","setVariables":[{"name":"resultsCount","regex":".*"}]}]},{"title":"wait","type":"object","description":"Pause before performing the next action.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"wait","description":"The action to perform."},"duration":{"type":"number","description":"Milliseconds to wait.","default":5000}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"wait"},{"action":"wait","duration":5000}]}]}}},"dynamicDefaults":{"id":"uuid"},"required":["steps"],"additionalProperties":false,"examples":[{"steps":[{"action":"checkLink","url":"https://www.duckduckgo.com"}]},{"steps":[{"action":"goTo","url":"https://www.duckduckgo.com"},{"action":"find","selector":"[title=Search]","click":true,"typeKeys":{"keys":["shorthair cats","$ENTER$"]}}]},{"id":"Do all the things! - Test","description":"This test includes every property across all actions.","contexts":[{"app":{"name":"firefox","path":"/usr/bin/firefox"},"platforms":["linux"]}],"setup":"setup.json","cleanup":"cleanup.json","steps":[{"action":"setVariables","path":".env"},{"action":"runShell","command":"echo","args":["$USER"]},{"action":"checkLink","url":"https://www.duckduckgo.com"},{"action":"httpRequest","url":"https://reqres.in/api/users","method":"post","requestData":{"name":"morpheus","job":"leader"},"responseData":{"name":"morpheus","job":"leader"},"statusCodes":[200,201]},{"action":"goTo","url":"https://www.duckduckgo.com"},{"action":"find","selector":"[title=Search]","timeout":10000,"matchText":"Search","moveTo":true,"click":true,"typeKeys":{"keys":["shorthair cat"]}},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"saveScreenshot"}]},{"openApi":[{"name":"Acme","descriptionPath":"https://www.acme.com/openapi.json","server":"https://api.acme.com"}],"steps":[{"action":"httpRequest","openApi":{"operationId":"getUserById"},"requestParams":{"id":123}}]}]},"typeKeys_v2":{"title":"typeKeys","type":"object","description":"Type keys. To type special keys, begin and end the string with `$` and use the special key\'s enum. For example, to type the Escape key, enter `$ESCAPE$`.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"typeKeys","description":"The action to perform."},"keys":{"description":"String of keys to enter.","anyOf":[{"type":"string"},{"type":"array","items":{"oneOf":[{"type":"string"}]}}]},"delay":{"type":"number","description":"Delay in milliseconds between each key press. Only valid during a recording.","default":100}},"dynamicDefaults":{"id":"uuid"},"required":["action","keys"],"additionalProperties":false,"examples":[{"action":"typeKeys","keys":"kittens"},{"action":"typeKeys","keys":["$ENTER$"]},{"action":"typeKeys","keys":["kittens","$ENTER$"],"delay":500}]},"wait_v2":{"title":"wait","type":"object","description":"Pause before performing the next action.","properties":{"id":{"type":"string","description":"ID of the step."},"description":{"type":"string","description":"Description of the step."},"action":{"type":"string","const":"wait","description":"The action to perform."},"duration":{"type":"number","description":"Milliseconds to wait.","default":5000}},"dynamicDefaults":{"id":"uuid"},"required":["action"],"additionalProperties":false,"examples":[{"action":"wait"},{"action":"wait","duration":5000}]}}');

/***/ }),
/* 8 */
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
const { schemas } = __webpack_require__(6);
const Ajv = __webpack_require__(9);
// Ajv extra formats: https://ajv.js.org/packages/ajv-formats.html
const addFormats = __webpack_require__(78);
// Ajv extra keywords: https://ajv.js.org/packages/ajv-keywords.html
const addKeywords = __webpack_require__(81);
// Ajv custom errors: https://ajv.js.org/packages/ajv-errors.html
const addErrors = __webpack_require__(118);
const uuid = __webpack_require__(119);

// Configure base Ajv
const ajv = new Ajv({
  strictSchema: false,
  useDefaults: true,
  allErrors: true,
  allowUnionTypes: true,
  coerceTypes: true,
});

// Enable `uuid` dynamic default
const def = __webpack_require__(115);
def.DEFAULTS.uuid = () => uuid.v4;

// Enhance Ajv
addFormats(ajv);
addKeywords(ajv);
addErrors(ajv);

// Exports
exports.validate = validate;
exports.transformToSchemaKey = transformToSchemaKey;

// Add all schemas from `schema` object.
for (const [key, value] of Object.entries(schemas)) {
  ajv.addSchema(value, key);
}

const compatibleSchemas = {
  config_v3: ["config_v2"],
  context_v3: ["context_v2"],
  openApi_v3: ["openApi_v2"],
  spec_v3: ["spec_v2"],
  step_v3: [
    "checkLink_v2",
    "find_v2",
    "goTo_v2",
    "httpRequest_v2",
    "runShell_v2",
    "runCode_v2",
    "saveScreenshot_v2",
    "setVariables_v2",
    "startRecording_v2",
    "stopRecording_v2",
    "typeKeys_v2",
    "wait_v2",
  ],
  test_v3: ["test_v2"],
};

/**
 * Escapes special characters in a string for safe use in a regular expression pattern.
 *
 * @param {string} string - The input string to escape.
 * @returns {string} The escaped string, safe for use in regular expressions.
 */
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

/**
 * Validates an object against a specified JSON schema, supporting backward compatibility and automatic transformation from older schema versions if needed.
 *
 * If validation against the target schema fails and compatible older schemas are defined, attempts validation against each compatible schema. On a match, transforms the object to the target schema and revalidates. Returns the validation result, any errors, and the (possibly transformed) object.
 *
 * @param {Object} options
 * @param {string} options.schemaKey - The key identifying the target JSON schema.
 * @param {Object} options.object - The object to validate.
 * @param {boolean} [options.addDefaults=true] - Whether to include default values in the returned object.
 * @returns {{ valid: boolean, errors: string, object: Object }} Validation result, error messages, and the validated (and possibly transformed) object.
 *
 * @throws {Error} If {@link schemaKey} or {@link object} is missing.
 */
function validate({ schemaKey, object, addDefaults = true }) {
  if (!schemaKey) {
    throw new Error("Schema key is required.");
  }
  if (!object) {
    throw new Error("Object is required.");
  }
  const result = {};
  let validationObject;
  let check = ajv.getSchema(schemaKey);
  if (!check) {
    result.valid = false;
    result.errors = `Schema not found: ${schemaKey}`;
    result.object = object;
    return result;
  }

  // Clone the object to avoid modifying the original object
  validationObject = JSON.parse(JSON.stringify(object));

  // Check if the object is compatible with the schema
  result.valid = check(validationObject);
  result.errors = "";

  if (check.errors) {
    // Check if the object is compatible with another schema
    const compatibleSchemasList = compatibleSchemas[schemaKey];
    if (!compatibleSchemasList) {
      result.errors = check.errors
        .map(
          (error) =>
            `${error.instancePath} ${error.message} (${JSON.stringify(
              error.params
            )})`
        )
        .join(", ");
      result.object = object;
      result.valid = false;
      return result;
    }
    const matchedSchemaKey = compatibleSchemasList.find((key) => {
      validationObject = JSON.parse(JSON.stringify(object));
      const check = ajv.getSchema(key);
      if (check(validationObject)) return key;
    });
    if (!matchedSchemaKey) {
      result.errors = `Invalid object`;
      result.object = object;
      result.valid = false;
      return result;
    } else {
      const transformedObject = transformToSchemaKey({
        currentSchema: matchedSchemaKey,
        targetSchema: schemaKey,
        object: validationObject,
      });

      result.valid = check(transformedObject);
      if (result.valid) {
        validationObject = transformedObject;
        object = transformedObject;
      } else if (check.errors) {
        const errors = check.errors.map(
          (error) =>
            `${error.instancePath} ${error.message} (${JSON.stringify(
              error.params
            )})`
        );
        result.errors = errors.join(", ");
        return result;
      }
    }
  }
  if (addDefaults) {
    result.object = validationObject;
  } else {
    result.object = object;
  }

  return result;
}

/**
 * Transforms an object from one JSON schema version to another, supporting multiple schema types and nested conversions.
 *
 * @param {Object} params
 * @param {string} params.currentSchema - The schema key of the object's current version.
 * @param {string} params.targetSchema - The schema key to which the object should be transformed.
 * @param {Object} params.object - The object to transform.
 * @returns {Object} The transformed object, validated against the target schema.
 *
 * @throws {Error} If transformation between the specified schemas is not supported, or if the transformed object fails validation.
 *
 * @remark
 * Supports deep and recursive transformations for complex schema types, including steps, configs, contexts, OpenAPI integrations, specs, and tests. Throws if the schemas are incompatible or if the resulting object does not conform to the target schema.
 */
function transformToSchemaKey({
  currentSchema = "",
  targetSchema = "",
  object = {},
}) {
  // Check if the current schema is the same as the target schema
  if (currentSchema === targetSchema) {
    return object;
  }
  // Check if the current schema is compatible with the target schema
  if (!compatibleSchemas[targetSchema].includes(currentSchema)) {
    throw new Error(
      `Can't transform from ${currentSchema} to ${targetSchema}.`
    );
  }
  // Transform the object
  if (targetSchema === "step_v3") {
    const transformedObject = {
      stepId: object.id,
      description: object.description,
    };
    if (currentSchema === "goTo_v2") {
      transformedObject.goTo = {
        url: object.url,
        origin: object.origin,
      };
    } else if (currentSchema === "checkLink_v2") {
      transformedObject.checkLink = {
        url: object.url,
        origin: object.origin,
        statusCodes: object.statusCodes,
      };
    } else if (currentSchema === "find_v2") {
      transformedObject.find = {
        selector: object.selector,
        elementText: object.matchText,
        timeout: object.timeout,
        moveTo: object.moveTo,
        click: object.click,
        type: object.typeKeys,
      };
      // Handle typeKeys.delay key change
      if (typeof object.typeKeys === "object" && object.typeKeys.keys) {
        transformedObject.find.type.inputDelay = object.typeKeys.delay;
        delete transformedObject.find.type.delay;
      }
      transformedObject.variables = {};
      object.setVariables?.forEach((variable) => {
        transformedObject.variables[
          variable.name
        ] = `extract($$element.text, "${variable.regex}")`;
      });
    } else if (currentSchema === "httpRequest_v2") {
      transformedObject.httpRequest = {
        method: object.method,
        url: object.url,
        openApi: object.openApi,
        request: {
          body: object.requestData,
          headers: object.requestHeaders,
          parameters: object.requestParams,
        },
        response: {
          body: object.responseData,
          headers: object.responseHeaders,
        },
        statusCodes: object.statusCodes,
        allowAdditionalFields: object.allowAdditionalFields,
        timeout: object.timeout,
        path: object.savePath,
        directory: object.saveDirectory,
        maxVariation: object.maxVariation / 100,
        overwrite:
          object.overwrite === "byVariation"
            ? "aboveVariation"
            : object.overwrite,
      };
      // Handle openApi.requestHeaders key change
      if (object.openApi) {
        transformedObject.httpRequest.openApi = transformToSchemaKey({
          currentSchema: "openApi_v2",
          targetSchema: "openApi_v3",
          object: object.openApi,
        });
      }
      transformedObject.variables = {};
      object.envsFromResponseData?.forEach((variable) => {
        transformedObject.variables[
          variable.name
        ] = `jq($$response.body, "${variable.jqFilter}")`;
      });
    } else if (currentSchema === "runShell_v2") {
      transformedObject.runShell = {
        command: object.command,
        args: object.args,
        workingDirectory: object.workingDirectory,
        exitCodes: object.exitCodes,
        stdio: object.output,
        path: object.savePath,
        directory: object.saveDirectory,
        maxVariation: object.maxVariation / 100,
        overwrite:
          object.overwrite === "byVariation"
            ? "aboveVariation"
            : object.overwrite,
        timeout: object.timeout,
      };
      transformedObject.variables = {};
      object.setVariables?.forEach((variable) => {
        transformedObject.variables[
          variable.name
        ] = `extract($$stdio.stdout, "${variable.regex}")`;
      });
    } else if (currentSchema === "runCode_v2") {
      transformedObject.runCode = {
        language: object.language,
        code: object.code,
        args: object.args,
        workingDirectory: object.workingDirectory,
        exitCodes: object.exitCodes,
        stdio: object.output,
        path: object.savePath,
        directory: object.saveDirectory,
        maxVariation: object.maxVariation / 100,
        overwrite:
          object.overwrite === "byVariation"
            ? "aboveVariation"
            : object.overwrite,
        timeout: object.timeout,
      };
      transformedObject.variables = {};
      object?.setVariables?.forEach((variable) => {
        transformedObject.variables[
          variable.name
        ] = `extract($$stdio.stdout, "${variable.regex}")`;
      });
    } else if (currentSchema === "setVariables_v2") {
      transformedObject.loadVariables = object.path;
    } else if (currentSchema === "typeKeys_v2") {
      transformedObject.type = {
        keys: object.keys,
        inputDelay: object.delay,
      };
    } else if (currentSchema === "saveScreenshot_v2") {
      transformedObject.screenshot = {
        path: object.path,
        directory: object.directory,
        maxVariation: object.maxVariation / 100,
        overwrite:
          object.overwrite === "byVariation"
            ? "aboveVariation"
            : object.overwrite,
        crop: object.crop,
      };
    } else if (currentSchema === "startRecording_v2") {
      transformedObject.record = {
        path: object.path,
        directory: object.directory,
        overwrite: object.overwrite,
      };
    } else if (currentSchema === "stopRecording_v2") {
      transformedObject.stopRecord = true;
    } else if (currentSchema === "wait_v2") {
      transformedObject.wait = object;
    }
    const result = validate({
      schemaKey: "step_v3",
      object: transformedObject,
    });
    if (!result.valid) {
      throw new Error(`Invalid object: ${result.errors}`);
    }
    return result.object;
  } else if (targetSchema === "config_v3") {
    // Handle config_v2 to config_v3 transformation
    const transformedObject = {
      loadVariables: object.envVariables,
      input: object?.runTests?.input || object.input,
      output: object?.runTests?.output || object.output,
      recursive: object?.runTests?.recursive || object.recursive,
      relativePathBase: object.relativePathBase,
      detectSteps: object?.runTests?.detectSteps,
      beforeAny: object?.runTests?.setup,
      afterAll: object?.runTests?.cleanup,
      logLevel: object.logLevel,
      telemetry: object.telemetry,
    };
    // Handle context transformation
    if (object?.runTests?.contexts)
      transformedObject.runOn = object.runTests.contexts.map((context) =>
        transformToSchemaKey({
          currentSchema: "context_v2",
          targetSchema: "context_v3",
          object: context,
        })
      );
    // Handle openApi transformation
    if (object?.integrations?.openApi) {
      transformedObject.integrations = {};
      transformedObject.integrations.openApi = object.integrations.openApi.map(
        (description) =>
          transformToSchemaKey({
            currentSchema: "openApi_v2",
            targetSchema: "openApi_v3",
            object: description,
          })
      );
    }
    // Handle fileTypes transformation
    if (object?.fileTypes)
      transformedObject.fileTypes = object.fileTypes.map((fileType) => {
        const transformedFileType = {
          name: fileType.name,
          extensions: fileType.extensions.map((extension) =>
            // Trim leading `.` from extension
            extension.replace(/^\./, "")
          ),
          inlineStatements: {
            // Convert strings to regex, escaping special characters
            testStart: `${escapeRegExp(
              fileType.testStartStatementOpen
            )}(.*?)${escapeRegExp(fileType.testStartStatementClose)}`,
            testEnd: escapeRegExp(fileType.testEndStatement),
            ignoreStart: escapeRegExp(fileType.testIgnoreStatement),
            step: `${escapeRegExp(
              fileType.stepStatementOpen
            )}(.*?)${escapeRegExp(fileType.stepStatementClose)}`,
          },
        };
        if (fileType.markup)
          transformedFileType.markup = fileType.markup.map((markup) => {
            const transformedMarkup = {
              name: markup.name,
              regex: markup.regex,
            };
            if (markup.actions)
              transformedMarkup.actions = markup.actions.map((action) => {
                if (typeof action === "string") return action;
                if (typeof action === "object") {
                  if (action.params) {
                    action = {
                      action: action.name,
                      ...action.params,
                    };
                  }
                  const transformedAction = transformToSchemaKey({
                    currentSchema: `${action.action}_v2`,
                    targetSchema: "step_v3",
                    object: action,
                  });
                  return transformedAction;
                }
              });

            return transformedMarkup;
          });
        return transformedFileType;
      });
    const result = validate({
      schemaKey: "config_v3",
      object: transformedObject,
    });
    if (!result.valid) {
      throw new Error(`Invalid object: ${result.errors}`);
    }
    return result.object;
  } else if (targetSchema === "context_v3") {
    const transformedObject = {};
    // Handle context_v2 to context_v3 transformation
    transformedObject.platforms = object.platforms;
    if (object.app?.name) {
      const name = object.app.name === "edge" ? "chrome" : object.app?.name;
      transformedObject.browsers = [];
      transformedObject.browsers.push({
        name,
        headless: object.app?.options?.headless,
        window: {
          width: object.app?.options?.width,
          height: object.app?.options?.height,
        },
        viewport: {
          width: object.app?.options?.viewport_width,
          height: object.app?.options?.viewport_height,
        },
      });
    }
    const result = validate({
      schemaKey: "context_v3",
      object: transformedObject,
    });
    if (!result.valid) {
      throw new Error(`Invalid object: ${result.errors}`);
    }
    return result.object;
  } else if (targetSchema === "openApi_v3") {
    let transformedObject;
    // Handle openApi_v2 to openApi_v3 transformation
    const { name, requestHeaders, ...intermediaryObject } = object;
    intermediaryObject.name = object.name;
    intermediaryObject.headers = object.requestHeaders;
    transformedObject = { ...intermediaryObject };

    const result = validate({
      schemaKey: "openApi_v3",
      object: transformedObject,
    });
    if (!result.valid) {
      throw new Error(`Invalid object: ${result.errors}`);
    }
    return transformedObject;
  } else if (targetSchema === "spec_v3") {
    // Handle spec_v2 to spec_v3 transformation
    const transformedObject = {
      specId: object.id,
      description: object.description,
      contentPath: object.file,
    };
    if (object.contexts)
      transformedObject.runOn = object.contexts.map((context) =>
        transformToSchemaKey({
          currentSchema: "context_v2",
          targetSchema: "context_v3",
          object: context,
        })
      );
    if (object.openApi)
      transformedObject.openApi = object.openApi.map((description) =>
        transformToSchemaKey({
          currentSchema: "openApi_v2",
          targetSchema: "openApi_v3",
          object: description,
        })
      );
    transformedObject.tests = object.tests.map((test) =>
      transformToSchemaKey({
        currentSchema: "test_v2",
        targetSchema: "test_v3",
        object: test,
      })
    );

    const result = validate({
      schemaKey: "spec_v3",
      object: transformedObject,
    });
    if (!result.valid) {
      throw new Error(`Invalid object: ${result.errors}`);
    }
    return result.object;
  } else if (targetSchema === "test_v3") {
    // Handle test_v2 to test_v3 transformation
    const transformedObject = {
      testId: object.id,
      description: object.description,
      contentPath: object.file,
      detectSteps: object.detectSteps,
      before: object.setup,
      after: object.cleanup,
    };
    if (object.contexts)
      transformedObject.runOn = object.contexts.map((context) =>
        transformToSchemaKey({
          currentSchema: "context_v2",
          targetSchema: "context_v3",
          object: context,
        })
      );
    if (object.openApi)
      transformedObject.openApi = object.openApi.map((description) =>
        transformToSchemaKey({
          currentSchema: "openApi_v2",
          targetSchema: "openApi_v3",
          object: description,
        })
      );
    transformedObject.steps = object.steps.map((step) =>
      transformToSchemaKey({
        currentSchema: `${step.action}_v2`,
        targetSchema: "step_v3",
        object: step,
      })
    );

    const result = validate({
      schemaKey: "test_v3",
      object: transformedObject,
    });
    if (!result.valid) {
      throw new Error(`Invalid object: ${result.errors}`);
    }
    return result.object;
  }
  return null;
}

// If called directly, validate an example object
if (__webpack_require__.c[__webpack_require__.s] === module) {
  const example =  {path: "/User/manny/projects/doc-detective/static/images/image.png"};

  const result = validate({ schemaKey: "screenshot_v3", object: example });
  console.log(JSON.stringify(result, null, 2));
}


/***/ }),
/* 9 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = void 0;
const core_1 = __webpack_require__(10);
const draft7_1 = __webpack_require__(38);
const discriminator_1 = __webpack_require__(75);
const draft7MetaSchema = __webpack_require__(77);
const META_SUPPORT_DATA = ["/properties"];
const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
class Ajv extends core_1.default {
    _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
        if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
    }
    _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta)
            return;
        const metaSchema = this.opts.$data
            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
            : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
    defaultMeta() {
        return (this.opts.defaultMeta =
            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    }
}
exports.Ajv = Ajv;
module.exports = exports = Ajv;
module.exports.Ajv = Ajv;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = Ajv;
var validate_1 = __webpack_require__(11);
Object.defineProperty(exports, "KeywordCxt", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));
var codegen_1 = __webpack_require__(14);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
var validation_error_1 = __webpack_require__(29);
Object.defineProperty(exports, "ValidationError", ({ enumerable: true, get: function () { return validation_error_1.default; } }));
var ref_error_1 = __webpack_require__(30);
Object.defineProperty(exports, "MissingRefError", ({ enumerable: true, get: function () { return ref_error_1.default; } }));
//# sourceMappingURL=ajv.js.map

/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
var validate_1 = __webpack_require__(11);
Object.defineProperty(exports, "KeywordCxt", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));
var codegen_1 = __webpack_require__(14);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
const validation_error_1 = __webpack_require__(29);
const ref_error_1 = __webpack_require__(30);
const rules_1 = __webpack_require__(20);
const compile_1 = __webpack_require__(31);
const codegen_2 = __webpack_require__(14);
const resolve_1 = __webpack_require__(26);
const dataType_1 = __webpack_require__(19);
const util_1 = __webpack_require__(17);
const $dataRefSchema = __webpack_require__(32);
const uri_1 = __webpack_require__(33);
const defaultRegExp = (str, flags) => new RegExp(str, flags);
defaultRegExp.code = "new RegExp";
const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
const EXT_SCOPE_NAMES = new Set([
    "validate",
    "serialize",
    "parse",
    "wrapper",
    "root",
    "schema",
    "keyword",
    "pattern",
    "formats",
    "validate$data",
    "func",
    "obj",
    "Error",
]);
const removedOptions = {
    errorDataPath: "",
    format: "`validateFormats: false` can be used instead.",
    nullable: '"nullable" keyword is supported by default.',
    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    sourceCode: "Use option `code: {source: true}`",
    strictDefaults: "It is default now, see option `strict`.",
    strictKeywords: "It is default now, see option `strict`.",
    uniqueItems: '"uniqueItems" keyword is always validated.',
    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    cache: "Map is used as cache, schema object as key.",
    serialize: "Map is used as cache, schema object as key.",
    ajvErrors: "It is default now.",
};
const deprecatedOptions = {
    ignoreKeywordsWithRef: "",
    jsPropertySyntax: "",
    unicode: '"minLength"/"maxLength" account for unicode characters by default.',
};
const MAX_EXPRESSION = 200;
// eslint-disable-next-line complexity
function requiredOptions(o) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    const s = o.strict;
    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
    return {
        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
        uriResolver: uriResolver,
    };
}
class Ajv {
    constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = new Set();
        this._loading = {};
        this._cache = new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = (0, rules_1.getRules)();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats)
            addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
    }
    _addVocabularies() {
        this.addKeyword("$async");
    }
    _addDefaultMetaSchema() {
        const { $data, meta, schemaId } = this.opts;
        let _dataRefSchema = $dataRefSchema;
        if (schemaId === "id") {
            _dataRefSchema = { ...$dataRefSchema };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
        }
        if (meta && $data)
            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    }
    defaultMeta() {
        const { meta, schemaId } = this.opts;
        return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
    }
    validate(schemaKeyRef, // key, ref or schema object
    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents
    data // to be validated
    ) {
        let v;
        if (typeof schemaKeyRef == "string") {
            v = this.getSchema(schemaKeyRef);
            if (!v)
                throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        }
        else {
            v = this.compile(schemaKeyRef);
        }
        const valid = v(data);
        if (!("$async" in v))
            this.errors = v.errors;
        return valid;
    }
    compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return (sch.validate || this._compileSchemaEnv(sch));
    }
    compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
                await runCompileAsync.call(this, { $ref }, true);
            }
        }
        async function _compileAsync(sch) {
            try {
                return this._compileSchemaEnv(sch);
            }
            catch (e) {
                if (!(e instanceof ref_error_1.default))
                    throw e;
                checkLoaded.call(this, e);
                await loadMissingSchema.call(this, e.missingSchema);
                return _compileAsync.call(this, sch);
            }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
        }
        async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
                await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
                this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
            const p = this._loading[ref];
            if (p)
                return p;
            try {
                return await (this._loading[ref] = loadSchema(ref));
            }
            finally {
                delete this._loading[ref];
            }
        }
    }
    // Adds schema to the instance
    addSchema(schema, // If array is passed, `key` will be ignored
    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    ) {
        if (Array.isArray(schema)) {
            for (const sch of schema)
                this.addSchema(sch, undefined, _meta, _validateSchema);
            return this;
        }
        let id;
        if (typeof schema === "object") {
            const { schemaId } = this.opts;
            id = schema[schemaId];
            if (id !== undefined && typeof id != "string") {
                throw new Error(`schema ${schemaId} must be string`);
            }
        }
        key = (0, resolve_1.normalizeId)(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
        return this;
    }
    // Add schema that will be used to validate other schemas
    // options in META_IGNORE_OPTIONS are alway set to false
    addMetaSchema(schema, key, // schema key
    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    ) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
    }
    //  Validate schema against its meta-schema
    validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean")
            return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== undefined && typeof $schema != "string") {
            throw new Error("$schema must be a string");
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
                this.logger.error(message);
            else
                throw new Error(message);
        }
        return valid;
    }
    // Get compiled schema by `key` or `ref`.
    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
        if (sch === undefined) {
            const { schemaId } = this.opts;
            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
            sch = compile_1.resolveSchema.call(this, root, keyRef);
            if (!sch)
                return;
            this.refs[keyRef] = sch;
        }
        return (sch.validate || this._compileSchemaEnv(sch));
    }
    // Remove cached schema(s).
    // If no parameter is passed all schemas but meta-schemas are removed.
    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
        }
        switch (typeof schemaKeyRef) {
            case "undefined":
                this._removeAllSchemas(this.schemas);
                this._removeAllSchemas(this.refs);
                this._cache.clear();
                return this;
            case "string": {
                const sch = getSchEnv.call(this, schemaKeyRef);
                if (typeof sch == "object")
                    this._cache.delete(sch.schema);
                delete this.schemas[schemaKeyRef];
                delete this.refs[schemaKeyRef];
                return this;
            }
            case "object": {
                const cacheKey = schemaKeyRef;
                this._cache.delete(cacheKey);
                let id = schemaKeyRef[this.opts.schemaId];
                if (id) {
                    id = (0, resolve_1.normalizeId)(id);
                    delete this.schemas[id];
                    delete this.refs[id];
                }
                return this;
            }
            default:
                throw new Error("ajv.removeSchema: invalid parameter");
        }
    }
    // add "vocabulary" - a collection of keywords
    addVocabulary(definitions) {
        for (const def of definitions)
            this.addKeyword(def);
        return this;
    }
    addKeyword(kwdOrDef, def // deprecated
    ) {
        let keyword;
        if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                def.keyword = keyword;
            }
        }
        else if (typeof kwdOrDef == "object" && def === undefined) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
                throw new Error("addKeywords: keyword must be string or non-empty array");
            }
        }
        else {
            throw new Error("invalid addKeywords parameters");
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
            return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
        };
        (0, util_1.eachItem)(keyword, definition.type.length === 0
            ? (k) => addRule.call(this, k, definition)
            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
        return this;
    }
    getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
    }
    // Remove keyword
    removeKeyword(keyword) {
        // TODO return type should be Ajv
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i >= 0)
                group.rules.splice(i, 1);
        }
        return this;
    }
    // Add format
    addFormat(name, format) {
        if (typeof format == "string")
            format = new RegExp(format);
        this.formats[name] = format;
        return this;
    }
    errorsText(errors = this.errors, // optional array of validation errors
    { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    ) {
        if (!errors || errors.length === 0)
            return "No errors";
        return errors
            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
            .reduce((text, msg) => text + separator + msg);
    }
    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
            let keywords = metaSchema;
            for (const seg of segments)
                keywords = keywords[seg];
            for (const key in rules) {
                const rule = rules[key];
                if (typeof rule != "object")
                    continue;
                const { $data } = rule.definition;
                const schema = keywords[key];
                if ($data && schema)
                    keywords[key] = schemaOrData(schema);
            }
        }
        return metaSchema;
    }
    _removeAllSchemas(schemas, regex) {
        for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
                if (typeof sch == "string") {
                    delete schemas[keyRef];
                }
                else if (sch && !sch.meta) {
                    this._cache.delete(sch.schema);
                    delete schemas[keyRef];
                }
            }
        }
    }
    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        let id;
        const { schemaId } = this.opts;
        if (typeof schema == "object") {
            id = schema[schemaId];
        }
        else {
            if (this.opts.jtd)
                throw new Error("schema must be object");
            else if (typeof schema != "boolean")
                throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== undefined)
            return sch;
        baseId = (0, resolve_1.normalizeId)(id || baseId);
        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
        this._cache.set(sch.schema, sch);
        if (addSchema && !baseId.startsWith("#")) {
            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
            if (baseId)
                this._checkUnique(baseId);
            this.refs[baseId] = sch;
        }
        if (validateSchema)
            this.validateSchema(schema, true);
        return sch;
    }
    _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
        }
    }
    _compileSchemaEnv(sch) {
        if (sch.meta)
            this._compileMetaSchema(sch);
        else
            compile_1.compileSchema.call(this, sch);
        /* istanbul ignore if */
        if (!sch.validate)
            throw new Error("ajv implementation error");
        return sch.validate;
    }
    _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
            compile_1.compileSchema.call(this, sch);
        }
        finally {
            this.opts = currentOpts;
        }
    }
}
Ajv.ValidationError = validation_error_1.default;
Ajv.MissingRefError = ref_error_1.default;
exports["default"] = Ajv;
function checkOptions(checkOpts, options, msg, log = "error") {
    for (const key in checkOpts) {
        const opt = key;
        if (opt in options)
            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    }
}
function getSchEnv(keyRef) {
    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
    return this.schemas[keyRef] || this.refs[keyRef];
}
function addInitialSchemas() {
    const optsSchemas = this.opts.schemas;
    if (!optsSchemas)
        return;
    if (Array.isArray(optsSchemas))
        this.addSchema(optsSchemas);
    else
        for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
}
function addInitialFormats() {
    for (const name in this.opts.formats) {
        const format = this.opts.formats[name];
        if (format)
            this.addFormat(name, format);
    }
}
function addInitialKeywords(defs) {
    if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
    }
    this.logger.warn("keywords option as map is deprecated, pass array");
    for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword)
            def.keyword = keyword;
        this.addKeyword(def);
    }
}
function getMetaSchemaOptions() {
    const metaOpts = { ...this.opts };
    for (const opt of META_IGNORE_OPTIONS)
        delete metaOpts[opt];
    return metaOpts;
}
const noLogs = { log() { }, warn() { }, error() { } };
function getLogger(logger) {
    if (logger === false)
        return noLogs;
    if (logger === undefined)
        return console;
    if (logger.log && logger.warn && logger.error)
        return logger;
    throw new Error("logger must implement log, warn and error methods");
}
const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
function checkKeyword(keyword, def) {
    const { RULES } = this;
    (0, util_1.eachItem)(keyword, (kwd) => {
        if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
    });
    if (!def)
        return;
    if (def.$data && !("code" in def || "validate" in def)) {
        throw new Error('$data keyword must have "code" or "validate" function');
    }
}
function addRule(keyword, definition, dataType) {
    var _a;
    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
    const { RULES } = this;
    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
    }
    RULES.keywords[keyword] = true;
    if (!definition)
        return;
    const rule = {
        keyword,
        definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
        },
    };
    if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
    else
        ruleGroup.rules.push(rule);
    RULES.all[keyword] = rule;
    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
}
function addBeforeRule(ruleGroup, rule, before) {
    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
    }
    else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
    }
}
function keywordMetaschema(def) {
    let { metaSchema } = def;
    if (metaSchema === undefined)
        return;
    if (def.$data && this.opts.$data)
        metaSchema = schemaOrData(metaSchema);
    def.validateSchema = this.compile(metaSchema, true);
}
const $dataRef = {
    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
};
function schemaOrData(schema) {
    return { anyOf: [schema, $dataRef] };
}
//# sourceMappingURL=core.js.map

/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
const boolSchema_1 = __webpack_require__(12);
const dataType_1 = __webpack_require__(19);
const applicability_1 = __webpack_require__(21);
const dataType_2 = __webpack_require__(19);
const defaults_1 = __webpack_require__(22);
const keyword_1 = __webpack_require__(23);
const subschema_1 = __webpack_require__(25);
const codegen_1 = __webpack_require__(14);
const names_1 = __webpack_require__(18);
const resolve_1 = __webpack_require__(26);
const util_1 = __webpack_require__(17);
const errors_1 = __webpack_require__(13);
// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
function validateFunctionCode(it) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
        }
    }
    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
}
exports.validateFunctionCode = validateFunctionCode;
function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    if (opts.code.es5) {
        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code((0, codegen_1._) `"use strict"; ${funcSourceUrl(schema, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body);
        });
    }
    else {
        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    }
}
function destructureValCxt(opts) {
    return (0, codegen_1._) `{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._) `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
}
function destructureValCxtES5(gen, opts) {
    gen.if(names_1.default.valCxt, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.instancePath}`);
        gen.var(names_1.default.parentData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    }, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._) `""`);
        gen.var(names_1.default.parentData, (0, codegen_1._) `undefined`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `{}`);
    });
}
function topSchemaObjCode(it) {
    const { schema, opts, gen } = it;
    validateFunction(it, () => {
        if (opts.$comment && schema.$comment)
            commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated)
            resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
    });
    return;
}
function resetEvaluated(it) {
    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    const { gen, validateName } = it;
    it.evaluated = gen.const("evaluated", (0, codegen_1._) `${validateName}.evaluated`);
    gen.if((0, codegen_1._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._) `${it.evaluated}.props`, (0, codegen_1._) `undefined`));
    gen.if((0, codegen_1._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._) `${it.evaluated}.items`, (0, codegen_1._) `undefined`));
}
function funcSourceUrl(schema, opts) {
    const schId = typeof schema == "object" && schema[opts.schemaId];
    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._) `/*# sourceURL=${schId} */` : codegen_1.nil;
}
// schema compilation - this function is used recursively to generate code for sub-schemas
function subschemaCode(it, valid) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
        }
    }
    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
}
function schemaCxtHasRules({ schema, self }) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (self.RULES.all[key])
            return true;
    return false;
}
function isSchemaObj(it) {
    return typeof it.schema != "boolean";
}
function subSchemaObjCode(it, valid) {
    const { schema, gen, opts } = it;
    if (opts.$comment && schema.$comment)
        commentKeyword(it);
    updateContext(it);
    checkAsyncSchema(it);
    const errsCount = gen.const("_errs", names_1.default.errors);
    typeAndKeywords(it, errsCount);
    // TODO var
    gen.var(valid, (0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
}
function checkKeywords(it) {
    (0, util_1.checkUnknownRules)(it);
    checkRefsAndKeywords(it);
}
function typeAndKeywords(it, errsCount) {
    if (it.opts.jtd)
        return schemaKeywords(it, [], false, errsCount);
    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    schemaKeywords(it, types, !checkedTypes, errsCount);
}
function checkRefsAndKeywords(it) {
    const { schema, errSchemaPath, opts, self } = it;
    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
        self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    }
}
function checkNoDefault(it) {
    const { schema, opts } = it;
    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
    }
}
function updateContext(it) {
    const schId = it.schema[it.opts.schemaId];
    if (schId)
        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
}
function checkAsyncSchema(it) {
    if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error("async schema in sync schema");
}
function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    const msg = schema.$comment;
    if (opts.$comment === true) {
        gen.code((0, codegen_1._) `${names_1.default.self}.logger.log(${msg})`);
    }
    else if (typeof opts.$comment == "function") {
        const schemaPath = (0, codegen_1.str) `${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
        gen.code((0, codegen_1._) `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    }
}
function returnResults(it) {
    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    if (schemaEnv.$async) {
        // TODO assign unevaluated
        gen.if((0, codegen_1._) `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._) `new ${ValidationError}(${names_1.default.vErrors})`));
    }
    else {
        gen.assign((0, codegen_1._) `${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated)
            assignEvaluated(it);
        gen.return((0, codegen_1._) `${names_1.default.errors} === 0`);
    }
}
function assignEvaluated({ gen, evaluated, props, items }) {
    if (props instanceof codegen_1.Name)
        gen.assign((0, codegen_1._) `${evaluated}.props`, props);
    if (items instanceof codegen_1.Name)
        gen.assign((0, codegen_1._) `${evaluated}.items`, items);
}
function schemaKeywords(it, types, typeErrors, errsCount) {
    const { gen, schema, data, allErrors, opts, self } = it;
    const { RULES } = self;
    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
        return;
    }
    if (!opts.jtd)
        checkStrictTypes(it, types);
    gen.block(() => {
        for (const group of RULES.rules)
            groupKeywords(group);
        groupKeywords(RULES.post);
    });
    function groupKeywords(group) {
        if (!(0, applicability_1.shouldUseGroup)(schema, group))
            return;
        if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
                gen.else();
                (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
        }
        else {
            iterateKeywords(it, group);
        }
        // TODO make it "ok" call?
        if (!allErrors)
            gen.if((0, codegen_1._) `${names_1.default.errors} === ${errsCount || 0}`);
    }
}
function iterateKeywords(it, group) {
    const { gen, schema, opts: { useDefaults }, } = it;
    if (useDefaults)
        (0, defaults_1.assignDefaults)(it, group.type);
    gen.block(() => {
        for (const rule of group.rules) {
            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
                keywordCode(it, rule.keyword, rule.definition, group.type);
            }
        }
    });
}
function checkStrictTypes(it, types) {
    if (it.schemaEnv.meta || !it.opts.strictTypes)
        return;
    checkContextTypes(it, types);
    if (!it.opts.allowUnionTypes)
        checkMultipleTypes(it, types);
    checkKeywordTypes(it, it.dataTypes);
}
function checkContextTypes(it, types) {
    if (!types.length)
        return;
    if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
    }
    types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
        }
    });
    narrowSchemaTypes(it, types);
}
function checkMultipleTypes(it, ts) {
    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    }
}
function checkKeywordTypes(it, ts) {
    const rules = it.self.RULES.all;
    for (const keyword in rules) {
        const rule = rules[keyword];
        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type } = rule.definition;
            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
            }
        }
    }
}
function hasApplicableType(schTs, kwdT) {
    return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
}
function includesType(ts, t) {
    return ts.includes(t) || (t === "integer" && ts.includes("number"));
}
function narrowSchemaTypes(it, withTypes) {
    const ts = [];
    for (const t of it.dataTypes) {
        if (includesType(withTypes, t))
            ts.push(t);
        else if (withTypes.includes("integer") && t === "number")
            ts.push("integer");
    }
    it.dataTypes = ts;
}
function strictTypesError(it, msg) {
    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    msg += ` at "${schemaPath}" (strictTypes)`;
    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
}
class KeywordCxt {
    constructor(it, def, keyword) {
        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        }
        else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
        }
    }
    result(condition, successAction, failAction) {
        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    }
    failResult(condition, successAction, failAction) {
        this.gen.if(condition);
        if (failAction)
            failAction();
        else
            this.error();
        if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
                this.gen.endIf();
        }
        else {
            if (this.allErrors)
                this.gen.endIf();
            else
                this.gen.else();
        }
    }
    pass(condition, failAction) {
        this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    }
    fail(condition) {
        if (condition === undefined) {
            this.error();
            if (!this.allErrors)
                this.gen.if(false); // this branch will be removed by gen.optimize
            return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors)
            this.gen.endIf();
        else
            this.gen.else();
    }
    fail$data(condition) {
        if (!this.$data)
            return this.fail(condition);
        const { schemaCode } = this;
        this.fail((0, codegen_1._) `${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    }
    error(append, errorParams, errorPaths) {
        if (errorParams) {
            this.setParams(errorParams);
            this._error(append, errorPaths);
            this.setParams({});
            return;
        }
        this._error(append, errorPaths);
    }
    _error(append, errorPaths) {
        ;
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    }
    $dataError() {
        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    }
    reset() {
        if (this.errsCount === undefined)
            throw new Error('add "trackErrors" to keyword definition');
        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    }
    ok(cond) {
        if (!this.allErrors)
            this.gen.if(cond);
    }
    setParams(obj, assign) {
        if (assign)
            Object.assign(this.params, obj);
        else
            this.params = obj;
    }
    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
            this.check$data(valid, $dataValid);
            codeBlock();
        });
    }
    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data)
            return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if((0, codegen_1.or)((0, codegen_1._) `${schemaCode} === undefined`, $dataValid));
        if (valid !== codegen_1.nil)
            gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil)
                gen.assign(valid, false);
        }
        gen.else();
    }
    invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
            if (schemaType.length) {
                /* istanbul ignore if */
                if (!(schemaCode instanceof codegen_1.Name))
                    throw new Error("ajv implementation error");
                const st = Array.isArray(schemaType) ? schemaType : [schemaType];
                return (0, codegen_1._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
        }
        function invalid$DataSchema() {
            if (def.validateSchema) {
                const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
                return (0, codegen_1._) `!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
        }
    }
    subschema(appl, valid) {
        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
        (0, subschema_1.extendSubschemaMode)(subschema, appl);
        const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
        subschemaCode(nextContext, valid);
        return nextContext;
    }
    mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated)
            return;
        if (it.props !== true && schemaCxt.props !== undefined) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        }
        if (it.items !== true && schemaCxt.items !== undefined) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
        }
    }
    mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
        }
    }
}
exports.KeywordCxt = KeywordCxt;
function keywordCode(it, keyword, def, ruleType) {
    const cxt = new KeywordCxt(it, def, keyword);
    if ("code" in def) {
        def.code(cxt, ruleType);
    }
    else if (cxt.$data && def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
    }
    else if ("macro" in def) {
        (0, keyword_1.macroKeywordCode)(cxt, def);
    }
    else if (def.compile || def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
    }
}
const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, { dataLevel, dataNames, dataPathArr }) {
    let jsonPointer;
    let data;
    if ($data === "")
        return names_1.default.rootData;
    if ($data[0] === "/") {
        if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
    }
    else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
            if (up >= dataLevel)
                throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel)
            throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer)
            return data;
    }
    let expr = data;
    const segments = jsonPointer.split("/");
    for (const segment of segments) {
        if (segment) {
            data = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
            expr = (0, codegen_1._) `${expr} && ${data}`;
        }
    }
    return expr;
    function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    }
}
exports.getData = getData;
//# sourceMappingURL=index.js.map

/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
const errors_1 = __webpack_require__(13);
const codegen_1 = __webpack_require__(14);
const names_1 = __webpack_require__(18);
const boolError = {
    message: "boolean schema is false",
};
function topBoolOrEmptySchema(it) {
    const { gen, schema, validateName } = it;
    if (schema === false) {
        falseSchemaError(it, false);
    }
    else if (typeof schema == "object" && schema.$async === true) {
        gen.return(names_1.default.data);
    }
    else {
        gen.assign((0, codegen_1._) `${validateName}.errors`, null);
        gen.return(true);
    }
}
exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
function boolOrEmptySchema(it, valid) {
    const { gen, schema } = it;
    if (schema === false) {
        gen.var(valid, false); // TODO var
        falseSchemaError(it);
    }
    else {
        gen.var(valid, true); // TODO var
    }
}
exports.boolOrEmptySchema = boolOrEmptySchema;
function falseSchemaError(it, overrideAllErrors) {
    const { gen, data } = it;
    // TODO maybe some other interface should be used for non-keyword validation errors...
    const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it,
    };
    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
}
//# sourceMappingURL=boolSchema.js.map

/***/ }),
/* 13 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const names_1 = __webpack_require__(18);
exports.keywordError = {
    message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
};
exports.keyword$DataError = {
    message: ({ keyword, schemaType }) => schemaType
        ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
        : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
};
function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
        addError(gen, errObj);
    }
    else {
        returnErrors(it, (0, codegen_1._) `[${errObj}]`);
    }
}
exports.reportError = reportError;
function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    addError(gen, errObj);
    if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
    }
}
exports.reportExtraError = reportExtraError;
function resetErrorsCount(gen, errsCount) {
    gen.assign(names_1.default.errors, errsCount);
    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
}
exports.resetErrorsCount = resetErrorsCount;
function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
    /* istanbul ignore if */
    if (errsCount === undefined)
        throw new Error("ajv implementation error");
    const err = gen.name("err");
    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._) `${err}.data`, data);
        }
    });
}
exports.extendErrors = extendErrors;
function addError(gen, errObj) {
    const err = gen.const("err", errObj);
    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
    gen.code((0, codegen_1._) `${names_1.default.errors}++`);
}
function returnErrors(it, errs) {
    const { gen, validateName, schemaEnv } = it;
    if (schemaEnv.$async) {
        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
    }
    else {
        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
        gen.return(false);
    }
}
const E = {
    keyword: new codegen_1.Name("keyword"),
    schemaPath: new codegen_1.Name("schemaPath"), // also used in JTD errors
    params: new codegen_1.Name("params"),
    propertyName: new codegen_1.Name("propertyName"),
    message: new codegen_1.Name("message"),
    schema: new codegen_1.Name("schema"),
    parentSchema: new codegen_1.Name("parentSchema"),
};
function errorObjectCode(cxt, error, errorPaths) {
    const { createErrors } = cxt.it;
    if (createErrors === false)
        return (0, codegen_1._) `{}`;
    return errorObject(cxt, error, errorPaths);
}
function errorObject(cxt, error, errorPaths = {}) {
    const { gen, it } = cxt;
    const keyValues = [
        errorInstancePath(it, errorPaths),
        errorSchemaPath(cxt, errorPaths),
    ];
    extraErrorProps(cxt, error, keyValues);
    return gen.object(...keyValues);
}
function errorInstancePath({ errorPath }, { instancePath }) {
    const instPath = instancePath
        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
        : errorPath;
    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
}
function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
    if (schemaPath) {
        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    }
    return [E.schemaPath, schPath];
}
function extraErrorProps(cxt, { params, message }, keyValues) {
    const { keyword, data, schemaValue, it } = cxt;
    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
    if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    }
    if (opts.verbose) {
        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    }
    if (propertyName)
        keyValues.push([E.propertyName, propertyName]);
}
//# sourceMappingURL=errors.js.map

/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
const code_1 = __webpack_require__(15);
const scope_1 = __webpack_require__(16);
var code_2 = __webpack_require__(15);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return code_2._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return code_2.str; } }));
Object.defineProperty(exports, "strConcat", ({ enumerable: true, get: function () { return code_2.strConcat; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return code_2.nil; } }));
Object.defineProperty(exports, "getProperty", ({ enumerable: true, get: function () { return code_2.getProperty; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return code_2.stringify; } }));
Object.defineProperty(exports, "regexpCode", ({ enumerable: true, get: function () { return code_2.regexpCode; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return code_2.Name; } }));
var scope_2 = __webpack_require__(16);
Object.defineProperty(exports, "Scope", ({ enumerable: true, get: function () { return scope_2.Scope; } }));
Object.defineProperty(exports, "ValueScope", ({ enumerable: true, get: function () { return scope_2.ValueScope; } }));
Object.defineProperty(exports, "ValueScopeName", ({ enumerable: true, get: function () { return scope_2.ValueScopeName; } }));
Object.defineProperty(exports, "varKinds", ({ enumerable: true, get: function () { return scope_2.varKinds; } }));
exports.operators = {
    GT: new code_1._Code(">"),
    GTE: new code_1._Code(">="),
    LT: new code_1._Code("<"),
    LTE: new code_1._Code("<="),
    EQ: new code_1._Code("==="),
    NEQ: new code_1._Code("!=="),
    NOT: new code_1._Code("!"),
    OR: new code_1._Code("||"),
    AND: new code_1._Code("&&"),
    ADD: new code_1._Code("+"),
};
class Node {
    optimizeNodes() {
        return this;
    }
    optimizeNames(_names, _constants) {
        return this;
    }
}
class Def extends Node {
    constructor(varKind, name, rhs) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
    }
    render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (!names[this.name.str])
            return;
        if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
}
class Assign extends Node {
    constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
    }
    render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
            return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
    }
}
class AssignOp extends Assign {
    constructor(lhs, op, rhs, sideEffects) {
        super(lhs, rhs, sideEffects);
        this.op = op;
    }
    render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    }
}
class Label extends Node {
    constructor(label) {
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        return `${this.label}:` + _n;
    }
}
class Break extends Node {
    constructor(label) {
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
    }
}
class Throw extends Node {
    constructor(error) {
        super();
        this.error = error;
    }
    render({ _n }) {
        return `throw ${this.error};` + _n;
    }
    get names() {
        return this.error.names;
    }
}
class AnyCode extends Node {
    constructor(code) {
        super();
        this.code = code;
    }
    render({ _n }) {
        return `${this.code};` + _n;
    }
    optimizeNodes() {
        return `${this.code}` ? this : undefined;
    }
    optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
    }
    get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
}
class ParentNode extends Node {
    constructor(nodes = []) {
        super();
        this.nodes = nodes;
    }
    render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), "");
    }
    optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
            const n = nodes[i].optimizeNodes();
            if (Array.isArray(n))
                nodes.splice(i, 1, ...n);
            else if (n)
                nodes[i] = n;
            else
                nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
            // iterating backwards improves 1-pass optimization
            const n = nodes[i];
            if (n.optimizeNames(names, constants))
                continue;
            subtractNames(names, n.names);
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    }
}
class BlockNode extends ParentNode {
    render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    }
}
class Root extends ParentNode {
}
class Else extends BlockNode {
}
Else.kind = "else";
class If extends BlockNode {
    constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
    }
    render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else)
            code += "else " + this.else.render(opts);
        return code;
    }
    optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true)
            return this.nodes; // else is ignored here
        let e = this.else;
        if (e) {
            const ns = e.optimizeNodes();
            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
            if (cond === false)
                return e instanceof If ? e : e.nodes;
            if (this.nodes.length)
                return this;
            return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length)
            return undefined;
        return this;
    }
    optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else))
            return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else)
            addNames(names, this.else.names);
        return names;
    }
}
If.kind = "if";
class For extends BlockNode {
}
For.kind = "for";
class ForLoop extends For {
    constructor(iteration) {
        super();
        this.iteration = iteration;
    }
    render(opts) {
        return `for(${this.iteration})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
            return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iteration.names);
    }
}
class ForRange extends For {
    constructor(varKind, name, from, to) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
    }
    render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    }
    get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
    }
}
class ForIter extends For {
    constructor(loop, varKind, name, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
    }
    render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
            return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iterable.names);
    }
}
class Func extends BlockNode {
    constructor(name, args, async) {
        super();
        this.name = name;
        this.args = args;
        this.async = async;
    }
    render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    }
}
Func.kind = "func";
class Return extends ParentNode {
    render(opts) {
        return "return " + super.render(opts);
    }
}
Return.kind = "return";
class Try extends BlockNode {
    render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch)
            code += this.catch.render(opts);
        if (this.finally)
            code += this.finally.render(opts);
        return code;
    }
    optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
        return this;
    }
    optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        if (this.catch)
            addNames(names, this.catch.names);
        if (this.finally)
            addNames(names, this.finally.names);
        return names;
    }
}
class Catch extends BlockNode {
    constructor(error) {
        super();
        this.error = error;
    }
    render(opts) {
        return `catch(${this.error})` + super.render(opts);
    }
}
Catch.kind = "catch";
class Finally extends BlockNode {
    render(opts) {
        return "finally" + super.render(opts);
    }
}
Finally.kind = "finally";
class CodeGen {
    constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
    }
    toString() {
        return this._root.render(this.opts);
    }
    // returns unique name in the internal scope
    name(prefix) {
        return this._scope.name(prefix);
    }
    // reserves unique name in the external scope
    scopeName(prefix) {
        return this._extScope.name(prefix);
    }
    // reserves unique name in the external scope and assigns value to it
    scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
        vs.add(name);
        return name;
    }
    getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
    }
    // return code that assigns values in the external scope to the names that are used internally
    // (same names that were returned by gen.scopeName or gen.scopeValue)
    scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
    }
    scopeCode() {
        return this._extScope.scopeCode(this._values);
    }
    _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== undefined && constant)
            this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
    }
    // `const` declaration (`var` in es5 mode)
    const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    }
    // `let` declaration with optional assignment (`var` in es5 mode)
    let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    }
    // `var` declaration with optional assignment
    var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    }
    // assignment code
    assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    }
    // `+=` code
    add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    }
    // appends passed SafeExpr to code or executes Block
    code(c) {
        if (typeof c == "function")
            c();
        else if (c !== code_1.nil)
            this._leafNode(new AnyCode(c));
        return this;
    }
    // returns code for object literal for the passed argument list of key-value pairs
    object(...keyValues) {
        const code = ["{"];
        for (const [key, value] of keyValues) {
            if (code.length > 1)
                code.push(",");
            code.push(key);
            if (key !== value || this.opts.es5) {
                code.push(":");
                (0, code_1.addCodeArg)(code, value);
            }
        }
        code.push("}");
        return new code_1._Code(code);
    }
    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
        }
        else if (thenBody) {
            this.code(thenBody).endIf();
        }
        else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
    }
    // `else if` clause - invalid without `if` or after `else` clauses
    elseIf(condition) {
        return this._elseNode(new If(condition));
    }
    // `else` clause - only valid after `if` or `else if` clauses
    else() {
        return this._elseNode(new Else());
    }
    // end `if` statement (needed if gen.if was used only with condition)
    endIf() {
        return this._endBlockNode(If, Else);
    }
    _for(node, forBody) {
        this._blockNode(node);
        if (forBody)
            this.code(forBody).endFor();
        return this;
    }
    // a generic `for` clause (or statement if `forBody` is passed)
    for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
    }
    // `for` statement for a range of values
    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    }
    // `for-of` statement (in es5 mode replace with a normal for loop)
    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
                this.var(name, (0, code_1._) `${arr}[${i}]`);
                forBody(name);
            });
        }
        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    }
    // `for-in` statement.
    // With option `ownProperties` replaced with a `for-of` loop for object keys
    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
        }
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    }
    // end `for` loop
    endFor() {
        return this._endBlockNode(For);
    }
    // `label` statement
    label(label) {
        return this._leafNode(new Label(label));
    }
    // `break` statement
    break(label) {
        return this._leafNode(new Break(label));
    }
    // `return` statement
    return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
    }
    // `try` statement
    try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
            const error = this.name("e");
            this._currNode = node.catch = new Catch(error);
            catchCode(error);
        }
        if (finallyCode) {
            this._currNode = node.finally = new Finally();
            this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
    }
    // `throw` statement
    throw(error) {
        return this._leafNode(new Throw(error));
    }
    // start self-balancing block
    block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body)
            this.code(body).endBlock(nodeCount);
        return this;
    }
    // end the current self-balancing block
    endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === undefined)
            throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        }
        this._nodes.length = len;
        return this;
    }
    // `function` heading (or definition if funcBody is passed)
    func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody)
            this.code(funcBody).endFunc();
        return this;
    }
    // end function definition
    endFunc() {
        return this._endBlockNode(Func);
    }
    optimize(n = 1) {
        while (n-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
        }
    }
    _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
    }
    _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
    }
    _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || (N2 && n instanceof N2)) {
            this._nodes.pop();
            return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    }
    _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
    }
    get _root() {
        return this._nodes[0];
    }
    get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
    }
    set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
    }
}
exports.CodeGen = CodeGen;
function addNames(names, from) {
    for (const n in from)
        names[n] = (names[n] || 0) + (from[n] || 0);
    return names;
}
function addExprNames(names, from) {
    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
}
function optimizeExpr(expr, names, constants) {
    if (expr instanceof code_1.Name)
        return replaceName(expr);
    if (!canOptimize(expr))
        return expr;
    return new code_1._Code(expr._items.reduce((items, c) => {
        if (c instanceof code_1.Name)
            c = replaceName(c);
        if (c instanceof code_1._Code)
            items.push(...c._items);
        else
            items.push(c);
        return items;
    }, []));
    function replaceName(n) {
        const c = constants[n.str];
        if (c === undefined || names[n.str] !== 1)
            return n;
        delete names[n.str];
        return c;
    }
    function canOptimize(e) {
        return (e instanceof code_1._Code &&
            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
    }
}
function subtractNames(names, from) {
    for (const n in from)
        names[n] = (names[n] || 0) - (from[n] || 0);
}
function not(x) {
    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
}
exports.not = not;
const andCode = mappend(exports.operators.AND);
// boolean AND (&&) expression with the passed arguments
function and(...args) {
    return args.reduce(andCode);
}
exports.and = and;
const orCode = mappend(exports.operators.OR);
// boolean OR (||) expression with the passed arguments
function or(...args) {
    return args.reduce(orCode);
}
exports.or = or;
function mappend(op) {
    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
}
function par(x) {
    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
class _CodeOrName {
}
exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
class Name extends _CodeOrName {
    constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        return false;
    }
    get names() {
        return { [this.str]: 1 };
    }
}
exports.Name = Name;
class _Code extends _CodeOrName {
    constructor(code) {
        super();
        this._items = typeof code === "string" ? [code] : code;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        if (this._items.length > 1)
            return false;
        const item = this._items[0];
        return item === "" || item === '""';
    }
    get str() {
        var _a;
        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
    }
    get names() {
        var _a;
        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
            if (c instanceof Name)
                names[c.str] = (names[c.str] || 0) + 1;
            return names;
        }, {})));
    }
}
exports._Code = _Code;
exports.nil = new _Code("");
function _(strs, ...args) {
    const code = [strs[0]];
    let i = 0;
    while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
    }
    return new _Code(code);
}
exports._ = _;
const plus = new _Code("+");
function str(strs, ...args) {
    const expr = [safeStringify(strs[0])];
    let i = 0;
    while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
    }
    optimize(expr);
    return new _Code(expr);
}
exports.str = str;
function addCodeArg(code, arg) {
    if (arg instanceof _Code)
        code.push(...arg._items);
    else if (arg instanceof Name)
        code.push(arg);
    else
        code.push(interpolate(arg));
}
exports.addCodeArg = addCodeArg;
function optimize(expr) {
    let i = 1;
    while (i < expr.length - 1) {
        if (expr[i] === plus) {
            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== undefined) {
                expr.splice(i - 1, 3, res);
                continue;
            }
            expr[i++] = "+";
        }
        i++;
    }
}
function mergeExprItems(a, b) {
    if (b === '""')
        return a;
    if (a === '""')
        return b;
    if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
            return;
        if (typeof b != "string")
            return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"')
            return a.slice(0, -1) + b.slice(1);
        return;
    }
    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
    return;
}
function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
}
exports.strConcat = strConcat;
// TODO do not allow arrays here
function interpolate(x) {
    return typeof x == "number" || typeof x == "boolean" || x === null
        ? x
        : safeStringify(Array.isArray(x) ? x.join(",") : x);
}
function stringify(x) {
    return new _Code(safeStringify(x));
}
exports.stringify = stringify;
function safeStringify(x) {
    return JSON.stringify(x)
        .replace(/\u2028/g, "\\u2028")
        .replace(/\u2029/g, "\\u2029");
}
exports.safeStringify = safeStringify;
function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
}
exports.getProperty = getProperty;
//Does best effort to format the name properly
function getEsmExportName(key) {
    if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
        return new _Code(`${key}`);
    }
    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
}
exports.getEsmExportName = getEsmExportName;
function regexpCode(rx) {
    return new _Code(rx.toString());
}
exports.regexpCode = regexpCode;
//# sourceMappingURL=code.js.map

/***/ }),
/* 16 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
const code_1 = __webpack_require__(15);
class ValueError extends Error {
    constructor(name) {
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
    }
}
var UsedValueState;
(function (UsedValueState) {
    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState || (exports.UsedValueState = UsedValueState = {}));
exports.varKinds = {
    const: new code_1.Name("const"),
    let: new code_1.Name("let"),
    var: new code_1.Name("var"),
};
class Scope {
    constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
    }
    toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
    name(prefix) {
        return new code_1.Name(this._newName(prefix));
    }
    _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
    }
    _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        }
        return (this._names[prefix] = { prefix, index: 0 });
    }
}
exports.Scope = Scope;
class ValueScopeName extends code_1.Name {
    constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
    }
    setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
    }
}
exports.ValueScopeName = ValueScopeName;
const line = (0, code_1._) `\n`;
class ValueScope extends Scope {
    constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    }
    get() {
        return this._scope;
    }
    name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
    }
    value(nameOrPrefix, value) {
        var _a;
        if (value.ref === undefined)
            throw new Error("CodeGen: ref must be passed in value");
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
                return _name;
        }
        else {
            vs = this._values[prefix] = new Map();
        }
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex });
        return name;
    }
    getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs)
            return;
        return vs.get(keyOrRef);
    }
    scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name) => {
            if (name.scopePath === undefined)
                throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._) `${scopeName}${name.scopePath}`;
        });
    }
    scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name) => {
            if (name.value === undefined)
                throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
        }, usedValues, getCode);
    }
    _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
            const vs = values[prefix];
            if (!vs)
                continue;
            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
            vs.forEach((name) => {
                if (nameSet.has(name))
                    return;
                nameSet.set(name, UsedValueState.Started);
                let c = valueCode(name);
                if (c) {
                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                    code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
                }
                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
                    code = (0, code_1._) `${code}${c}${this.opts._n}`;
                }
                else {
                    throw new ValueError(name);
                }
                nameSet.set(name, UsedValueState.Completed);
            });
        }
        return code;
    }
}
exports.ValueScope = ValueScope;
//# sourceMappingURL=scope.js.map

/***/ }),
/* 17 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
const codegen_1 = __webpack_require__(14);
const code_1 = __webpack_require__(15);
// TODO refactor to use Set
function toHash(arr) {
    const hash = {};
    for (const item of arr)
        hash[item] = true;
    return hash;
}
exports.toHash = toHash;
function alwaysValidSchema(it, schema) {
    if (typeof schema == "boolean")
        return schema;
    if (Object.keys(schema).length === 0)
        return true;
    checkUnknownRules(it, schema);
    return !schemaHasRules(schema, it.self.RULES.all);
}
exports.alwaysValidSchema = alwaysValidSchema;
function checkUnknownRules(it, schema = it.schema) {
    const { opts, self } = it;
    if (!opts.strictSchema)
        return;
    if (typeof schema === "boolean")
        return;
    const rules = self.RULES.keywords;
    for (const key in schema) {
        if (!rules[key])
            checkStrictMode(it, `unknown keyword: "${key}"`);
    }
}
exports.checkUnknownRules = checkUnknownRules;
function schemaHasRules(schema, rules) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (rules[key])
            return true;
    return false;
}
exports.schemaHasRules = schemaHasRules;
function schemaHasRulesButRef(schema, RULES) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (key !== "$ref" && RULES.all[key])
            return true;
    return false;
}
exports.schemaHasRulesButRef = schemaHasRulesButRef;
function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean")
            return schema;
        if (typeof schema == "string")
            return (0, codegen_1._) `${schema}`;
    }
    return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
}
exports.schemaRefOrVal = schemaRefOrVal;
function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
}
exports.unescapeFragment = unescapeFragment;
function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
}
exports.escapeFragment = escapeFragment;
function escapeJsonPointer(str) {
    if (typeof str == "number")
        return `${str}`;
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
}
exports.escapeJsonPointer = escapeJsonPointer;
function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
exports.unescapeJsonPointer = unescapeJsonPointer;
function eachItem(xs, f) {
    if (Array.isArray(xs)) {
        for (const x of xs)
            f(x);
    }
    else {
        f(xs);
    }
}
exports.eachItem = eachItem;
function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
    return (gen, from, to, toName) => {
        const res = to === undefined
            ? from
            : to instanceof codegen_1.Name
                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
                : from instanceof codegen_1.Name
                    ? (mergeToName(gen, to, from), from)
                    : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    };
}
exports.mergeEvaluated = {
    props: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
            gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
        }),
        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
            if (from === true) {
                gen.assign(to, true);
            }
            else {
                gen.assign(to, (0, codegen_1._) `${to} || {}`);
                setEvaluated(gen, to, from);
            }
        }),
        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
        resultToName: evaluatedPropsToName,
    }),
    items: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
        resultToName: (gen, items) => gen.var("items", items),
    }),
};
function evaluatedPropsToName(gen, ps) {
    if (ps === true)
        return gen.var("props", true);
    const props = gen.var("props", (0, codegen_1._) `{}`);
    if (ps !== undefined)
        setEvaluated(gen, props, ps);
    return props;
}
exports.evaluatedPropsToName = evaluatedPropsToName;
function setEvaluated(gen, props, ps) {
    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
}
exports.setEvaluated = setEvaluated;
const snippets = {};
function useFunc(gen, f) {
    return gen.scopeValue("func", {
        ref: f,
        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
    });
}
exports.useFunc = useFunc;
var Type;
(function (Type) {
    Type[Type["Num"] = 0] = "Num";
    Type[Type["Str"] = 1] = "Str";
})(Type || (exports.Type = Type = {}));
function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    // let path
    if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax
            ? isNumber
                ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
                : (0, codegen_1._) `"['" + ${dataProp} + "']"`
            : isNumber
                ? (0, codegen_1._) `"/" + ${dataProp}`
                : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    }
    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
}
exports.getErrorPath = getErrorPath;
function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    if (!mode)
        return;
    msg = `strict mode: ${msg}`;
    if (mode === true)
        throw new Error(msg);
    it.self.logger.warn(msg);
}
exports.checkStrictMode = checkStrictMode;
//# sourceMappingURL=util.js.map

/***/ }),
/* 18 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const names = {
    // validation function arguments
    data: new codegen_1.Name("data"), // data passed to validation function
    // args passed from referencing schema
    valCxt: new codegen_1.Name("valCxt"), // validation/data context - should not be used directly, it is destructured to the names below
    instancePath: new codegen_1.Name("instancePath"),
    parentData: new codegen_1.Name("parentData"),
    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    rootData: new codegen_1.Name("rootData"), // root data - same as the data passed to the first/top validation function
    dynamicAnchors: new codegen_1.Name("dynamicAnchors"), // used to support recursiveRef and dynamicRef
    // function scoped variables
    vErrors: new codegen_1.Name("vErrors"), // null or array of validation errors
    errors: new codegen_1.Name("errors"), // counter of validation errors
    this: new codegen_1.Name("this"),
    // "globals"
    self: new codegen_1.Name("self"),
    scope: new codegen_1.Name("scope"),
    // JTD serialize/parse name for JSON string and position
    json: new codegen_1.Name("json"),
    jsonPos: new codegen_1.Name("jsonPos"),
    jsonLen: new codegen_1.Name("jsonLen"),
    jsonPart: new codegen_1.Name("jsonPart"),
};
exports["default"] = names;
//# sourceMappingURL=names.js.map

/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
const rules_1 = __webpack_require__(20);
const applicability_1 = __webpack_require__(21);
const errors_1 = __webpack_require__(13);
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
var DataType;
(function (DataType) {
    DataType[DataType["Correct"] = 0] = "Correct";
    DataType[DataType["Wrong"] = 1] = "Wrong";
})(DataType || (exports.DataType = DataType = {}));
function getSchemaTypes(schema) {
    const types = getJSONTypes(schema.type);
    const hasNull = types.includes("null");
    if (hasNull) {
        if (schema.nullable === false)
            throw new Error("type: null contradicts nullable: false");
    }
    else {
        if (!types.length && schema.nullable !== undefined) {
            throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true)
            types.push("null");
    }
    return types;
}
exports.getSchemaTypes = getSchemaTypes;
// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents
function getJSONTypes(ts) {
    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    if (types.every(rules_1.isJSONType))
        return types;
    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
}
exports.getJSONTypes = getJSONTypes;
function coerceAndCheckDataType(it, types) {
    const { gen, data, opts } = it;
    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    const checkTypes = types.length > 0 &&
        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
        gen.if(wrongType, () => {
            if (coerceTo.length)
                coerceData(it, types, coerceTo);
            else
                reportTypeError(it);
        });
    }
    return checkTypes;
}
exports.coerceAndCheckDataType = coerceAndCheckDataType;
const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
function coerceToTypes(types, coerceTypes) {
    return coerceTypes
        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
        : [];
}
function coerceData(it, types, coerceTo) {
    const { gen, data, opts } = it;
    const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
    const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
    if (opts.coerceTypes === "array") {
        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
            .assign(data, (0, codegen_1._) `${data}[0]`)
            .assign(dataType, (0, codegen_1._) `typeof ${data}`)
            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
    }
    gen.if((0, codegen_1._) `${coerced} !== undefined`);
    for (const t of coerceTo) {
        if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
            coerceSpecificType(t);
        }
    }
    gen.else();
    reportTypeError(it);
    gen.endIf();
    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
    });
    function coerceSpecificType(t) {
        switch (t) {
            case "string":
                gen
                    .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
                    .assign(coerced, (0, codegen_1._) `"" + ${data}`)
                    .elseIf((0, codegen_1._) `${data} === null`)
                    .assign(coerced, (0, codegen_1._) `""`);
                return;
            case "number":
                gen
                    .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
                    .assign(coerced, (0, codegen_1._) `+${data}`);
                return;
            case "integer":
                gen
                    .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
                    .assign(coerced, (0, codegen_1._) `+${data}`);
                return;
            case "boolean":
                gen
                    .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
                    .assign(coerced, false)
                    .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
                    .assign(coerced, true);
                return;
            case "null":
                gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
                gen.assign(coerced, null);
                return;
            case "array":
                gen
                    .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
                    .assign(coerced, (0, codegen_1._) `[${data}]`);
        }
    }
}
function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    // TODO use gen.property
    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
}
function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    let cond;
    switch (dataType) {
        case "null":
            return (0, codegen_1._) `${data} ${EQ} null`;
        case "array":
            cond = (0, codegen_1._) `Array.isArray(${data})`;
            break;
        case "object":
            cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
        case "integer":
            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
            break;
        case "number":
            cond = numCond();
            break;
        default:
            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
    }
    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    function numCond(_cond = codegen_1.nil) {
        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
    }
}
exports.checkDataType = checkDataType;
function checkDataTypes(dataTypes, data, strictNums, correct) {
    if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
    }
    let cond;
    const types = (0, util_1.toHash)(dataTypes);
    if (types.array && types.object) {
        const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
    }
    else {
        cond = codegen_1.nil;
    }
    if (types.number)
        delete types.integer;
    for (const t in types)
        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    return cond;
}
exports.checkDataTypes = checkDataTypes;
const typeError = {
    message: ({ schema }) => `must be ${schema}`,
    params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
};
function reportTypeError(it) {
    const cxt = getTypeErrorContext(it);
    (0, errors_1.reportError)(cxt, typeError);
}
exports.reportTypeError = reportTypeError;
function getTypeErrorContext(it) {
    const { gen, data, schema } = it;
    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it,
    };
}
//# sourceMappingURL=dataType.js.map

/***/ }),
/* 20 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRules = exports.isJSONType = void 0;
const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
const jsonTypes = new Set(_jsonTypes);
function isJSONType(x) {
    return typeof x == "string" && jsonTypes.has(x);
}
exports.isJSONType = isJSONType;
function getRules() {
    const groups = {
        number: { type: "number", rules: [] },
        string: { type: "string", rules: [] },
        array: { type: "array", rules: [] },
        object: { type: "object", rules: [] },
    };
    return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
        post: { rules: [] },
        all: {},
        keywords: {},
    };
}
exports.getRules = getRules;
//# sourceMappingURL=rules.js.map

/***/ }),
/* 21 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
function schemaHasRulesForType({ schema, self }, type) {
    const group = self.RULES.types[type];
    return group && group !== true && shouldUseGroup(schema, group);
}
exports.schemaHasRulesForType = schemaHasRulesForType;
function shouldUseGroup(schema, group) {
    return group.rules.some((rule) => shouldUseRule(schema, rule));
}
exports.shouldUseGroup = shouldUseGroup;
function shouldUseRule(schema, rule) {
    var _a;
    return (schema[rule.keyword] !== undefined ||
        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
}
exports.shouldUseRule = shouldUseRule;
//# sourceMappingURL=applicability.js.map

/***/ }),
/* 22 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assignDefaults = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
function assignDefaults(it, ty) {
    const { properties, items } = it.schema;
    if (ty === "object" && properties) {
        for (const key in properties) {
            assignDefault(it, key, properties[key].default);
        }
    }
    else if (ty === "array" && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
    }
}
exports.assignDefaults = assignDefaults;
function assignDefault(it, prop, defaultValue) {
    const { gen, compositeRule, data, opts } = it;
    if (defaultValue === undefined)
        return;
    const childData = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(prop)}`;
    if (compositeRule) {
        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
        return;
    }
    let condition = (0, codegen_1._) `${childData} === undefined`;
    if (opts.useDefaults === "empty") {
        condition = (0, codegen_1._) `${condition} || ${childData} === null || ${childData} === ""`;
    }
    // `${childData} === undefined` +
    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    gen.if(condition, (0, codegen_1._) `${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
}
//# sourceMappingURL=defaults.js.map

/***/ }),
/* 23 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
const codegen_1 = __webpack_require__(14);
const names_1 = __webpack_require__(18);
const code_1 = __webpack_require__(24);
const errors_1 = __webpack_require__(13);
function macroKeywordCode(cxt, def) {
    const { gen, keyword, schema, parentSchema, it } = cxt;
    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    const schemaRef = useKeyword(gen, keyword, macroSchema);
    if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
    const valid = gen.name("valid");
    cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true,
    }, valid);
    cxt.pass(valid, () => cxt.error(true));
}
exports.macroKeywordCode = macroKeywordCode;
function funcKeywordCode(cxt, def) {
    var _a;
    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    checkAsyncKeyword(it, def);
    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    const validateRef = useKeyword(gen, keyword, validate);
    const valid = gen.let("valid");
    cxt.block$data(valid, validateKeyword);
    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    function validateKeyword() {
        if (def.errors === false) {
            assignValid();
            if (def.modifying)
                modifyData(cxt);
            reportErrs(() => cxt.error());
        }
        else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
                modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
        }
    }
    function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(() => assignValid((0, codegen_1._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._) `${e}.errors`), () => gen.throw(e)));
        return ruleErrs;
    }
    function validateSync() {
        const validateErrs = (0, codegen_1._) `${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
    }
    function assignValid(_await = def.async ? (0, codegen_1._) `await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !(("compile" in def && !$data) || def.schema === false);
        gen.assign(valid, (0, codegen_1._) `${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    }
    function reportErrs(errors) {
        var _a;
        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    }
}
exports.funcKeywordCode = funcKeywordCode;
function modifyData(cxt) {
    const { gen, data, it } = cxt;
    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._) `${it.parentData}[${it.parentDataProperty}]`));
}
function addErrs(cxt, errs) {
    const { gen } = cxt;
    gen.if((0, codegen_1._) `Array.isArray(${errs})`, () => {
        gen
            .assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)
            .assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
        (0, errors_1.extendErrors)(cxt);
    }, () => cxt.error());
}
function checkAsyncKeyword({ schemaEnv }, def) {
    if (def.async && !schemaEnv.$async)
        throw new Error("async keyword in sync schema");
}
function useKeyword(gen, keyword, result) {
    if (result === undefined)
        throw new Error(`keyword "${keyword}" failed to compile`);
    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
}
function validSchemaType(schema, schemaType, allowUndefined = false) {
    // TODO add tests
    return (!schemaType.length ||
        schemaType.some((st) => st === "array"
            ? Array.isArray(schema)
            : st === "object"
                ? schema && typeof schema == "object" && !Array.isArray(schema)
                : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
}
exports.validSchemaType = validSchemaType;
function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    /* istanbul ignore if */
    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
        throw new Error("ajv implementation error");
    }
    const deps = def.dependencies;
    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    }
    if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
                self.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
                self.logger.error(msg);
            else
                throw new Error(msg);
        }
    }
}
exports.validateKeywordUsage = validateKeywordUsage;
//# sourceMappingURL=keyword.js.map

/***/ }),
/* 24 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const names_1 = __webpack_require__(18);
const util_2 = __webpack_require__(17);
function checkReportMissingProp(cxt, prop) {
    const { gen, data, it } = cxt;
    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: (0, codegen_1._) `${prop}` }, true);
        cxt.error();
    });
}
exports.checkReportMissingProp = checkReportMissingProp;
function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._) `${missing} = ${prop}`)));
}
exports.checkMissingProp = checkMissingProp;
function reportMissingProp(cxt, missing) {
    cxt.setParams({ missingProperty: missing }, true);
    cxt.error();
}
exports.reportMissingProp = reportMissingProp;
function hasPropFunc(gen) {
    return gen.scopeValue("func", {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ref: Object.prototype.hasOwnProperty,
        code: (0, codegen_1._) `Object.prototype.hasOwnProperty`,
    });
}
exports.hasPropFunc = hasPropFunc;
function isOwnProperty(gen, data, property) {
    return (0, codegen_1._) `${hasPropFunc(gen)}.call(${data}, ${property})`;
}
exports.isOwnProperty = isOwnProperty;
function propertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
    return ownProperties ? (0, codegen_1._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
}
exports.propertyInData = propertyInData;
function noPropertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} === undefined`;
    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
}
exports.noPropertyInData = noPropertyInData;
function allSchemaProperties(schemaMap) {
    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
}
exports.allSchemaProperties = allSchemaProperties;
function schemaProperties(it, schemaMap) {
    return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
}
exports.schemaProperties = schemaProperties;
function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    const dataAndSchema = passSchema ? (0, codegen_1._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    const valCxt = [
        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData],
    ];
    if (it.opts.dynamicRef)
        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
    const args = (0, codegen_1._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
    return context !== codegen_1.nil ? (0, codegen_1._) `${func}.call(${context}, ${args})` : (0, codegen_1._) `${func}(${args})`;
}
exports.callValidateCode = callValidateCode;
const newRegExp = (0, codegen_1._) `new RegExp`;
function usePattern({ gen, it: { opts } }, pattern) {
    const u = opts.unicodeRegExp ? "u" : "";
    const { regExp } = opts.code;
    const rx = regExp(pattern, u);
    return gen.scopeValue("pattern", {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._) `${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`,
    });
}
exports.usePattern = usePattern;
function validateArray(cxt) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
    }
    gen.var(valid, true);
    validateItems(() => gen.break());
    return valid;
    function validateItems(notValid) {
        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
        gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
                keyword,
                dataProp: i,
                dataPropType: util_1.Type.Num,
            }, valid);
            gen.if((0, codegen_1.not)(valid), notValid);
        });
    }
}
exports.validateArray = validateArray;
function validateUnion(cxt) {
    const { gen, schema, keyword, it } = cxt;
    /* istanbul ignore if */
    if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
    const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
    if (alwaysValid && !it.opts.unevaluated)
        return;
    const valid = gen.let("valid", false);
    const schValid = gen.name("_valid");
    gen.block(() => schema.forEach((_sch, i) => {
        const schCxt = cxt.subschema({
            keyword,
            schemaProp: i,
            compositeRule: true,
        }, schValid);
        gen.assign(valid, (0, codegen_1._) `${valid} || ${schValid}`);
        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
        // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
        // or if all properties and items were evaluated (it.props === true && it.items === true)
        if (!merged)
            gen.if((0, codegen_1.not)(valid));
    }));
    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
}
exports.validateUnion = validateUnion;
//# sourceMappingURL=code.js.map

/***/ }),
/* 25 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    if (keyword !== undefined && schema !== undefined) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
    }
    if (keyword !== undefined) {
        const sch = it.schema[keyword];
        return schemaProp === undefined
            ? {
                schema: sch,
                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
            }
            : {
                schema: sch[schemaProp],
                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,
            };
    }
    if (schema !== undefined) {
        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        }
        return {
            schema,
            schemaPath,
            topSchemaRef,
            errSchemaPath,
        };
    }
    throw new Error('either "keyword" or "schema" must be passed');
}
exports.getSubschema = getSubschema;
function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    if (data !== undefined && dataProp !== undefined) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
    }
    const { gen } = it;
    if (dataProp !== undefined) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    }
    if (data !== undefined) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
        dataContextProps(nextData);
        if (propertyName !== undefined)
            subschema.propertyName = propertyName;
        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    }
    if (dataTypes)
        subschema.dataTypes = dataTypes;
    function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
    }
}
exports.extendSubschemaData = extendSubschemaData;
function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    if (compositeRule !== undefined)
        subschema.compositeRule = compositeRule;
    if (createErrors !== undefined)
        subschema.createErrors = createErrors;
    if (allErrors !== undefined)
        subschema.allErrors = allErrors;
    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    subschema.jtdMetadata = jtdMetadata; // not inherited
}
exports.extendSubschemaMode = extendSubschemaMode;
//# sourceMappingURL=subschema.js.map

/***/ }),
/* 26 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
const util_1 = __webpack_require__(17);
const equal = __webpack_require__(27);
const traverse = __webpack_require__(28);
// TODO refactor to use keyword definitions
const SIMPLE_INLINED = new Set([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum",
    "const",
]);
function inlineRef(schema, limit = true) {
    if (typeof schema == "boolean")
        return true;
    if (limit === true)
        return !hasRef(schema);
    if (!limit)
        return false;
    return countKeys(schema) <= limit;
}
exports.inlineRef = inlineRef;
const REF_KEYWORDS = new Set([
    "$ref",
    "$recursiveRef",
    "$recursiveAnchor",
    "$dynamicRef",
    "$dynamicAnchor",
]);
function hasRef(schema) {
    for (const key in schema) {
        if (REF_KEYWORDS.has(key))
            return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef))
            return true;
        if (typeof sch == "object" && hasRef(sch))
            return true;
    }
    return false;
}
function countKeys(schema) {
    let count = 0;
    for (const key in schema) {
        if (key === "$ref")
            return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key))
            continue;
        if (typeof schema[key] == "object") {
            (0, util_1.eachItem)(schema[key], (sch) => (count += countKeys(sch)));
        }
        if (count === Infinity)
            return Infinity;
    }
    return count;
}
function getFullPath(resolver, id = "", normalize) {
    if (normalize !== false)
        id = normalizeId(id);
    const p = resolver.parse(id);
    return _getFullPath(resolver, p);
}
exports.getFullPath = getFullPath;
function _getFullPath(resolver, p) {
    const serialized = resolver.serialize(p);
    return serialized.split("#")[0] + "#";
}
exports._getFullPath = _getFullPath;
const TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
}
exports.normalizeId = normalizeId;
function resolveUrl(resolver, baseId, id) {
    id = normalizeId(id);
    return resolver.resolve(baseId, id);
}
exports.resolveUrl = resolveUrl;
const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
function getSchemaRefs(schema, baseId) {
    if (typeof schema == "boolean")
        return {};
    const { schemaId, uriResolver } = this.opts;
    const schId = normalizeId(schema[schemaId] || baseId);
    const baseIds = { "": schId };
    const pathPrefix = getFullPath(uriResolver, schId, false);
    const localRefs = {};
    const schemaRefs = new Set();
    traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
        if (parentJsonPtr === undefined)
            return;
        const fullPath = pathPrefix + jsonPtr;
        let innerBaseId = baseIds[parentJsonPtr];
        if (typeof sch[schemaId] == "string")
            innerBaseId = addRef.call(this, sch[schemaId]);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = innerBaseId;
        function addRef(ref) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            const _resolve = this.opts.uriResolver.resolve;
            ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref);
            if (schemaRefs.has(ref))
                throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
                schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
                checkAmbiguosRef(sch, schOrRef.schema, ref);
            }
            else if (ref !== normalizeId(fullPath)) {
                if (ref[0] === "#") {
                    checkAmbiguosRef(sch, localRefs[ref], ref);
                    localRefs[ref] = sch;
                }
                else {
                    this.refs[ref] = fullPath;
                }
            }
            return ref;
        }
        function addAnchor(anchor) {
            if (typeof anchor == "string") {
                if (!ANCHOR.test(anchor))
                    throw new Error(`invalid anchor "${anchor}"`);
                addRef.call(this, `#${anchor}`);
            }
        }
    });
    return localRefs;
    function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== undefined && !equal(sch1, sch2))
            throw ambiguos(ref);
    }
    function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
    }
}
exports.getSchemaRefs = getSchemaRefs;
//# sourceMappingURL=resolve.js.map

/***/ }),
/* 27 */
/***/ ((module) => {

"use strict";


// do not edit .js files directly - edit src/index.jst



module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }



    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];

      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a!==a && b!==b;
};


/***/ }),
/* 28 */
/***/ ((module) => {

"use strict";


var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
  var post = cb.post || function() {};

  _traverse(opts, pre, post, schema, '', schema);
};


traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true,
  if: true,
  then: true,
  else: true
};

traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};

traverse.propsKeywords = {
  $defs: true,
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};

traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};


function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i=0; i<sch.length; i++)
            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch)
            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }
    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}


function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}


/***/ }),
/* 29 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class ValidationError extends Error {
    constructor(errors) {
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
    }
}
exports["default"] = ValidationError;
//# sourceMappingURL=validation_error.js.map

/***/ }),
/* 30 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const resolve_1 = __webpack_require__(26);
class MissingRefError extends Error {
    constructor(resolver, baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    }
}
exports["default"] = MissingRefError;
//# sourceMappingURL=ref_error.js.map

/***/ }),
/* 31 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
const codegen_1 = __webpack_require__(14);
const validation_error_1 = __webpack_require__(29);
const names_1 = __webpack_require__(18);
const resolve_1 = __webpack_require__(26);
const util_1 = __webpack_require__(17);
const validate_1 = __webpack_require__(11);
class SchemaEnv {
    constructor(env) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == "object")
            schema = env.schema;
        this.schema = env.schema;
        this.schemaId = env.schemaId;
        this.root = env.root || this;
        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
        this.schemaPath = env.schemaPath;
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
    }
}
exports.SchemaEnv = SchemaEnv;
// let codeSize = 0
// let nodeCount = 0
// Compiles schema in SchemaEnv
function compileSchema(sch) {
    // TODO refactor - remove compilations
    const _sch = getCompilingSchema.call(this, sch);
    if (_sch)
        return _sch;
    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    let _ValidationError;
    if (sch.$async) {
        _ValidationError = gen.scopeValue("Error", {
            ref: validation_error_1.default,
            code: (0, codegen_1._) `require("ajv/dist/runtime/validation_error").default`,
        });
    }
    const validateName = gen.scopeName("validate");
    sch.validateName = validateName;
    const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil], // TODO can its length be used as dataLevel if nil is removed?
        dataLevel: 0,
        dataTypes: [],
        definedProperties: new Set(),
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
            ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) }
            : { ref: sch.schema }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
        errorPath: (0, codegen_1._) `""`,
        opts: this.opts,
        self: this,
    };
    let sourceCode;
    try {
        this._compilations.add(sch);
        (0, validate_1.validateFunctionCode)(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        // gen.optimize(1)
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
        if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
        // console.log("\n\n\n *** \n", sourceCode)
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate });
        validate.errors = null;
        validate.schema = sch.schema;
        validate.schemaEnv = sch;
        if (sch.$async)
            validate.$async = true;
        if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
        }
        if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
                props: props instanceof codegen_1.Name ? undefined : props,
                items: items instanceof codegen_1.Name ? undefined : items,
                dynamicProps: props instanceof codegen_1.Name,
                dynamicItems: items instanceof codegen_1.Name,
            };
            if (validate.source)
                validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
        }
        sch.validate = validate;
        return sch;
    }
    catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
        // console.log("\n\n\n *** \n", sourceCode, this.opts)
        throw e;
    }
    finally {
        this._compilations.delete(sch);
    }
}
exports.compileSchema = compileSchema;
function resolveRef(root, baseId, ref) {
    var _a;
    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
    const schOrFunc = root.refs[ref];
    if (schOrFunc)
        return schOrFunc;
    let _sch = resolve.call(this, root, ref);
    if (_sch === undefined) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
        const { schemaId } = this.opts;
        if (schema)
            _sch = new SchemaEnv({ schema, schemaId, root, baseId });
    }
    if (_sch === undefined)
        return;
    return (root.refs[ref] = inlineOrCompile.call(this, _sch));
}
exports.resolveRef = resolveRef;
function inlineOrCompile(sch) {
    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
        return sch.schema;
    return sch.validate ? sch : compileSchema.call(this, sch);
}
// Index of schema compilation in the currently compiled list
function getCompilingSchema(schEnv) {
    for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv))
            return sch;
    }
}
exports.getCompilingSchema = getCompilingSchema;
function sameSchemaEnv(s1, s2) {
    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
}
// resolve and compile the references ($ref)
// TODO returns AnySchemaObject (if the schema can be inlined) or validation function
function resolve(root, // information about the root schema for the current schema
ref // reference to resolve
) {
    let sch;
    while (typeof (sch = this.refs[ref]) == "string")
        ref = sch;
    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
}
// Resolve schema, its root and baseId
function resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
ref // reference to resolve
) {
    const p = this.opts.uriResolver.parse(ref);
    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
    if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
    }
    const id = (0, resolve_1.normalizeId)(refPath);
    const schOrRef = this.refs[id] || this.schemas[id];
    if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
        return getJsonPointer.call(this, p, sch);
    }
    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
        return;
    if (!schOrRef.validate)
        compileSchema.call(this, schOrRef);
    if (id === (0, resolve_1.normalizeId)(ref)) {
        const { schema } = schOrRef;
        const { schemaId } = this.opts;
        const schId = schema[schemaId];
        if (schId)
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        return new SchemaEnv({ schema, schemaId, root, baseId });
    }
    return getJsonPointer.call(this, p, schOrRef);
}
exports.resolveSchema = resolveSchema;
const PREVENT_SCOPE_CHANGE = new Set([
    "properties",
    "patternProperties",
    "enum",
    "dependencies",
    "definitions",
]);
function getJsonPointer(parsedRef, { baseId, schema, root }) {
    var _a;
    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
        return;
    for (const part of parsedRef.fragment.slice(1).split("/")) {
        if (typeof schema === "boolean")
            return;
        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
        if (partSchema === undefined)
            return;
        schema = partSchema;
        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
        const schId = typeof schema === "object" && schema[this.opts.schemaId];
        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        }
    }
    let env;
    if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
        env = resolveSchema.call(this, root, $ref);
    }
    // even though resolution failed we need to return SchemaEnv to throw exception
    // so that compileAsync loads missing schema.
    const { schemaId } = this.opts;
    env = env || new SchemaEnv({ schema, schemaId, root, baseId });
    if (env.schema !== env.root.schema)
        return env;
    return undefined;
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 32 */
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

/***/ }),
/* 33 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const uri = __webpack_require__(34);
uri.code = 'require("ajv/dist/runtime/uri").default';
exports["default"] = uri;
//# sourceMappingURL=uri.js.map

/***/ }),
/* 34 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = __webpack_require__(35)
const SCHEMES = __webpack_require__(37)

function normalize (uri, options) {
  if (typeof uri === 'string') {
    uri = serialize(parse(uri, options), options)
  } else if (typeof uri === 'object') {
    uri = parse(serialize(uri, options), options)
  }
  return uri
}

function resolve (baseURI, relativeURI, options) {
  const schemelessOptions = Object.assign({ scheme: 'null' }, options)
  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true)
  return serialize(resolved, { ...schemelessOptions, skipEscape: true })
}

function resolveComponents (base, relative, options, skipNormalization) {
  const target = {}
  if (!skipNormalization) {
    base = parse(serialize(base, options), options) // normalize base components
    relative = parse(serialize(relative, options), options) // normalize relative components
  }
  options = options || {}

  if (!options.tolerant && relative.scheme) {
    target.scheme = relative.scheme
    // target.authority = relative.authority;
    target.userinfo = relative.userinfo
    target.host = relative.host
    target.port = relative.port
    target.path = removeDotSegments(relative.path || '')
    target.query = relative.query
  } else {
    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
      // target.authority = relative.authority;
      target.userinfo = relative.userinfo
      target.host = relative.host
      target.port = relative.port
      target.path = removeDotSegments(relative.path || '')
      target.query = relative.query
    } else {
      if (!relative.path) {
        target.path = base.path
        if (relative.query !== undefined) {
          target.query = relative.query
        } else {
          target.query = base.query
        }
      } else {
        if (relative.path.charAt(0) === '/') {
          target.path = removeDotSegments(relative.path)
        } else {
          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
            target.path = '/' + relative.path
          } else if (!base.path) {
            target.path = relative.path
          } else {
            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path
          }
          target.path = removeDotSegments(target.path)
        }
        target.query = relative.query
      }
      // target.authority = base.authority;
      target.userinfo = base.userinfo
      target.host = base.host
      target.port = base.port
    }
    target.scheme = base.scheme
  }

  target.fragment = relative.fragment

  return target
}

function equal (uriA, uriB, options) {
  if (typeof uriA === 'string') {
    uriA = unescape(uriA)
    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true })
  } else if (typeof uriA === 'object') {
    uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true })
  }

  if (typeof uriB === 'string') {
    uriB = unescape(uriB)
    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true })
  } else if (typeof uriB === 'object') {
    uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true })
  }

  return uriA.toLowerCase() === uriB.toLowerCase()
}

function serialize (cmpts, opts) {
  const components = {
    host: cmpts.host,
    scheme: cmpts.scheme,
    userinfo: cmpts.userinfo,
    port: cmpts.port,
    path: cmpts.path,
    query: cmpts.query,
    nid: cmpts.nid,
    nss: cmpts.nss,
    uuid: cmpts.uuid,
    fragment: cmpts.fragment,
    reference: cmpts.reference,
    resourceName: cmpts.resourceName,
    secure: cmpts.secure,
    error: ''
  }
  const options = Object.assign({}, opts)
  const uriTokens = []

  // find scheme handler
  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()]

  // perform scheme specific serialization
  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)

  if (components.path !== undefined) {
    if (!options.skipEscape) {
      components.path = escape(components.path)

      if (components.scheme !== undefined) {
        components.path = components.path.split('%3A').join(':')
      }
    } else {
      components.path = unescape(components.path)
    }
  }

  if (options.reference !== 'suffix' && components.scheme) {
    uriTokens.push(components.scheme, ':')
  }

  const authority = recomposeAuthority(components)
  if (authority !== undefined) {
    if (options.reference !== 'suffix') {
      uriTokens.push('//')
    }

    uriTokens.push(authority)

    if (components.path && components.path.charAt(0) !== '/') {
      uriTokens.push('/')
    }
  }
  if (components.path !== undefined) {
    let s = components.path

    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
      s = removeDotSegments(s)
    }

    if (authority === undefined) {
      s = s.replace(/^\/\//u, '/%2F') // don't allow the path to start with "//"
    }

    uriTokens.push(s)
  }

  if (components.query !== undefined) {
    uriTokens.push('?', components.query)
  }

  if (components.fragment !== undefined) {
    uriTokens.push('#', components.fragment)
  }
  return uriTokens.join('')
}

const hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)))

function nonSimpleDomain (value) {
  let code = 0
  for (let i = 0, len = value.length; i < len; ++i) {
    code = value.charCodeAt(i)
    if (code > 126 || hexLookUp[code]) {
      return true
    }
  }
  return false
}

const URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u

function parse (uri, opts) {
  const options = Object.assign({}, opts)
  const parsed = {
    scheme: undefined,
    userinfo: undefined,
    host: '',
    port: undefined,
    path: '',
    query: undefined,
    fragment: undefined
  }
  const gotEncoding = uri.indexOf('%') !== -1
  let isIP = false
  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri

  const matches = uri.match(URI_PARSE)

  if (matches) {
    // store each component
    parsed.scheme = matches[1]
    parsed.userinfo = matches[3]
    parsed.host = matches[4]
    parsed.port = parseInt(matches[5], 10)
    parsed.path = matches[6] || ''
    parsed.query = matches[7]
    parsed.fragment = matches[8]

    // fix port number
    if (isNaN(parsed.port)) {
      parsed.port = matches[5]
    }
    if (parsed.host) {
      const ipv4result = normalizeIPv4(parsed.host)
      if (ipv4result.isIPV4 === false) {
        const ipv6result = normalizeIPv6(ipv4result.host)
        parsed.host = ipv6result.host.toLowerCase()
        isIP = ipv6result.isIPV6
      } else {
        parsed.host = ipv4result.host
        isIP = true
      }
    }
    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {
      parsed.reference = 'same-document'
    } else if (parsed.scheme === undefined) {
      parsed.reference = 'relative'
    } else if (parsed.fragment === undefined) {
      parsed.reference = 'absolute'
    } else {
      parsed.reference = 'uri'
    }

    // check for reference errors
    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {
      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.'
    }

    // find scheme handler
    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()]

    // check if scheme can't handle IRIs
    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
      // if host component is a domain name
      if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost)) && isIP === false && nonSimpleDomain(parsed.host)) {
        // convert Unicode IDN -> ASCII IDN
        try {
          parsed.host = URL.domainToASCII(parsed.host.toLowerCase())
        } catch (e) {
          parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e
        }
      }
      // convert IRI -> URI
    }

    if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {
      if (gotEncoding && parsed.scheme !== undefined) {
        parsed.scheme = unescape(parsed.scheme)
      }
      if (gotEncoding && parsed.host !== undefined) {
        parsed.host = unescape(parsed.host)
      }
      if (parsed.path) {
        parsed.path = escape(unescape(parsed.path))
      }
      if (parsed.fragment) {
        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment))
      }
    }

    // perform scheme specific parsing
    if (schemeHandler && schemeHandler.parse) {
      schemeHandler.parse(parsed, options)
    }
  } else {
    parsed.error = parsed.error || 'URI can not be parsed.'
  }
  return parsed
}

const fastUri = {
  SCHEMES,
  normalize,
  resolve,
  resolveComponents,
  equal,
  serialize,
  parse
}

module.exports = fastUri
module.exports["default"] = fastUri
module.exports.fastUri = fastUri


/***/ }),
/* 35 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const { HEX } = __webpack_require__(36)

const IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u

function normalizeIPv4 (host) {
  if (findToken(host, '.') < 3) { return { host, isIPV4: false } }
  const matches = host.match(IPV4_REG) || []
  const [address] = matches
  if (address) {
    return { host: stripLeadingZeros(address, '.'), isIPV4: true }
  } else {
    return { host, isIPV4: false }
  }
}

/**
 * @param {string[]} input
 * @param {boolean} [keepZero=false]
 * @returns {string|undefined}
 */
function stringArrayToHexStripped (input, keepZero = false) {
  let acc = ''
  let strip = true
  for (const c of input) {
    if (HEX[c] === undefined) return undefined
    if (c !== '0' && strip === true) strip = false
    if (!strip) acc += c
  }
  if (keepZero && acc.length === 0) acc = '0'
  return acc
}

function getIPV6 (input) {
  let tokenCount = 0
  const output = { error: false, address: '', zone: '' }
  const address = []
  const buffer = []
  let isZone = false
  let endipv6Encountered = false
  let endIpv6 = false

  function consume () {
    if (buffer.length) {
      if (isZone === false) {
        const hex = stringArrayToHexStripped(buffer)
        if (hex !== undefined) {
          address.push(hex)
        } else {
          output.error = true
          return false
        }
      }
      buffer.length = 0
    }
    return true
  }

  for (let i = 0; i < input.length; i++) {
    const cursor = input[i]
    if (cursor === '[' || cursor === ']') { continue }
    if (cursor === ':') {
      if (endipv6Encountered === true) {
        endIpv6 = true
      }
      if (!consume()) { break }
      tokenCount++
      address.push(':')
      if (tokenCount > 7) {
        // not valid
        output.error = true
        break
      }
      if (i - 1 >= 0 && input[i - 1] === ':') {
        endipv6Encountered = true
      }
      continue
    } else if (cursor === '%') {
      if (!consume()) { break }
      // switch to zone detection
      isZone = true
    } else {
      buffer.push(cursor)
      continue
    }
  }
  if (buffer.length) {
    if (isZone) {
      output.zone = buffer.join('')
    } else if (endIpv6) {
      address.push(buffer.join(''))
    } else {
      address.push(stringArrayToHexStripped(buffer))
    }
  }
  output.address = address.join('')
  return output
}

function normalizeIPv6 (host) {
  if (findToken(host, ':') < 2) { return { host, isIPV6: false } }
  const ipv6 = getIPV6(host)

  if (!ipv6.error) {
    let newHost = ipv6.address
    let escapedHost = ipv6.address
    if (ipv6.zone) {
      newHost += '%' + ipv6.zone
      escapedHost += '%25' + ipv6.zone
    }
    return { host: newHost, escapedHost, isIPV6: true }
  } else {
    return { host, isIPV6: false }
  }
}

function stripLeadingZeros (str, token) {
  let out = ''
  let skip = true
  const l = str.length
  for (let i = 0; i < l; i++) {
    const c = str[i]
    if (c === '0' && skip) {
      if ((i + 1 <= l && str[i + 1] === token) || i + 1 === l) {
        out += c
        skip = false
      }
    } else {
      if (c === token) {
        skip = true
      } else {
        skip = false
      }
      out += c
    }
  }
  return out
}

function findToken (str, token) {
  let ind = 0
  for (let i = 0; i < str.length; i++) {
    if (str[i] === token) ind++
  }
  return ind
}

const RDS1 = /^\.\.?\//u
const RDS2 = /^\/\.(?:\/|$)/u
const RDS3 = /^\/\.\.(?:\/|$)/u
const RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/u

function removeDotSegments (input) {
  const output = []

  while (input.length) {
    if (input.match(RDS1)) {
      input = input.replace(RDS1, '')
    } else if (input.match(RDS2)) {
      input = input.replace(RDS2, '/')
    } else if (input.match(RDS3)) {
      input = input.replace(RDS3, '/')
      output.pop()
    } else if (input === '.' || input === '..') {
      input = ''
    } else {
      const im = input.match(RDS5)
      if (im) {
        const s = im[0]
        input = input.slice(s.length)
        output.push(s)
      } else {
        throw new Error('Unexpected dot segment condition')
      }
    }
  }
  return output.join('')
}

function normalizeComponentEncoding (components, esc) {
  const func = esc !== true ? escape : unescape
  if (components.scheme !== undefined) {
    components.scheme = func(components.scheme)
  }
  if (components.userinfo !== undefined) {
    components.userinfo = func(components.userinfo)
  }
  if (components.host !== undefined) {
    components.host = func(components.host)
  }
  if (components.path !== undefined) {
    components.path = func(components.path)
  }
  if (components.query !== undefined) {
    components.query = func(components.query)
  }
  if (components.fragment !== undefined) {
    components.fragment = func(components.fragment)
  }
  return components
}

function recomposeAuthority (components) {
  const uriTokens = []

  if (components.userinfo !== undefined) {
    uriTokens.push(components.userinfo)
    uriTokens.push('@')
  }

  if (components.host !== undefined) {
    let host = unescape(components.host)
    const ipV4res = normalizeIPv4(host)

    if (ipV4res.isIPV4) {
      host = ipV4res.host
    } else {
      const ipV6res = normalizeIPv6(ipV4res.host)
      if (ipV6res.isIPV6 === true) {
        host = `[${ipV6res.escapedHost}]`
      } else {
        host = components.host
      }
    }
    uriTokens.push(host)
  }

  if (typeof components.port === 'number' || typeof components.port === 'string') {
    uriTokens.push(':')
    uriTokens.push(String(components.port))
  }

  return uriTokens.length ? uriTokens.join('') : undefined
};

module.exports = {
  recomposeAuthority,
  normalizeComponentEncoding,
  removeDotSegments,
  normalizeIPv4,
  normalizeIPv6,
  stringArrayToHexStripped
}


/***/ }),
/* 36 */
/***/ ((module) => {

"use strict";


const HEX = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  a: 10,
  A: 10,
  b: 11,
  B: 11,
  c: 12,
  C: 12,
  d: 13,
  D: 13,
  e: 14,
  E: 14,
  f: 15,
  F: 15
}

module.exports = {
  HEX
}


/***/ }),
/* 37 */
/***/ ((module) => {

"use strict";


const UUID_REG = /^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu
const URN_REG = /([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu

function isSecure (wsComponents) {
  return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === 'wss'
}

function httpParse (components) {
  if (!components.host) {
    components.error = components.error || 'HTTP URIs must have a host.'
  }

  return components
}

function httpSerialize (components) {
  const secure = String(components.scheme).toLowerCase() === 'https'

  // normalize the default port
  if (components.port === (secure ? 443 : 80) || components.port === '') {
    components.port = undefined
  }

  // normalize the empty path
  if (!components.path) {
    components.path = '/'
  }

  // NOTE: We do not parse query strings for HTTP URIs
  // as WWW Form Url Encoded query strings are part of the HTML4+ spec,
  // and not the HTTP spec.

  return components
}

function wsParse (wsComponents) {
// indicate if the secure flag is set
  wsComponents.secure = isSecure(wsComponents)

  // construct resouce name
  wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '')
  wsComponents.path = undefined
  wsComponents.query = undefined

  return wsComponents
}

function wsSerialize (wsComponents) {
// normalize the default port
  if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === '') {
    wsComponents.port = undefined
  }

  // ensure scheme matches secure flag
  if (typeof wsComponents.secure === 'boolean') {
    wsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws')
    wsComponents.secure = undefined
  }

  // reconstruct path from resource name
  if (wsComponents.resourceName) {
    const [path, query] = wsComponents.resourceName.split('?')
    wsComponents.path = (path && path !== '/' ? path : undefined)
    wsComponents.query = query
    wsComponents.resourceName = undefined
  }

  // forbid fragment component
  wsComponents.fragment = undefined

  return wsComponents
}

function urnParse (urnComponents, options) {
  if (!urnComponents.path) {
    urnComponents.error = 'URN can not be parsed'
    return urnComponents
  }
  const matches = urnComponents.path.match(URN_REG)
  if (matches) {
    const scheme = options.scheme || urnComponents.scheme || 'urn'
    urnComponents.nid = matches[1].toLowerCase()
    urnComponents.nss = matches[2]
    const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`
    const schemeHandler = SCHEMES[urnScheme]
    urnComponents.path = undefined

    if (schemeHandler) {
      urnComponents = schemeHandler.parse(urnComponents, options)
    }
  } else {
    urnComponents.error = urnComponents.error || 'URN can not be parsed.'
  }

  return urnComponents
}

function urnSerialize (urnComponents, options) {
  const scheme = options.scheme || urnComponents.scheme || 'urn'
  const nid = urnComponents.nid.toLowerCase()
  const urnScheme = `${scheme}:${options.nid || nid}`
  const schemeHandler = SCHEMES[urnScheme]

  if (schemeHandler) {
    urnComponents = schemeHandler.serialize(urnComponents, options)
  }

  const uriComponents = urnComponents
  const nss = urnComponents.nss
  uriComponents.path = `${nid || options.nid}:${nss}`

  options.skipEscape = true
  return uriComponents
}

function urnuuidParse (urnComponents, options) {
  const uuidComponents = urnComponents
  uuidComponents.uuid = uuidComponents.nss
  uuidComponents.nss = undefined

  if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {
    uuidComponents.error = uuidComponents.error || 'UUID is not valid.'
  }

  return uuidComponents
}

function urnuuidSerialize (uuidComponents) {
  const urnComponents = uuidComponents
  // normalize UUID
  urnComponents.nss = (uuidComponents.uuid || '').toLowerCase()
  return urnComponents
}

const http = {
  scheme: 'http',
  domainHost: true,
  parse: httpParse,
  serialize: httpSerialize
}

const https = {
  scheme: 'https',
  domainHost: http.domainHost,
  parse: httpParse,
  serialize: httpSerialize
}

const ws = {
  scheme: 'ws',
  domainHost: true,
  parse: wsParse,
  serialize: wsSerialize
}

const wss = {
  scheme: 'wss',
  domainHost: ws.domainHost,
  parse: ws.parse,
  serialize: ws.serialize
}

const urn = {
  scheme: 'urn',
  parse: urnParse,
  serialize: urnSerialize,
  skipNormalize: true
}

const urnuuid = {
  scheme: 'urn:uuid',
  parse: urnuuidParse,
  serialize: urnuuidSerialize,
  skipNormalize: true
}

const SCHEMES = {
  http,
  https,
  ws,
  wss,
  urn,
  'urn:uuid': urnuuid
}

module.exports = SCHEMES


/***/ }),
/* 38 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(39);
const validation_1 = __webpack_require__(42);
const applicator_1 = __webpack_require__(55);
const format_1 = __webpack_require__(72);
const metadata_1 = __webpack_require__(74);
const draft7Vocabularies = [
    core_1.default,
    validation_1.default,
    (0, applicator_1.default)(),
    format_1.default,
    metadata_1.metadataVocabulary,
    metadata_1.contentVocabulary,
];
exports["default"] = draft7Vocabularies;
//# sourceMappingURL=draft7.js.map

/***/ }),
/* 39 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const id_1 = __webpack_require__(40);
const ref_1 = __webpack_require__(41);
const core = [
    "$schema",
    "$id",
    "$defs",
    "$vocabulary",
    { keyword: "$comment" },
    "definitions",
    id_1.default,
    ref_1.default,
];
exports["default"] = core;
//# sourceMappingURL=index.js.map

/***/ }),
/* 40 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const def = {
    keyword: "id",
    code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
    },
};
exports["default"] = def;
//# sourceMappingURL=id.js.map

/***/ }),
/* 41 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.callRef = exports.getValidate = void 0;
const ref_error_1 = __webpack_require__(30);
const code_1 = __webpack_require__(24);
const codegen_1 = __webpack_require__(14);
const names_1 = __webpack_require__(18);
const compile_1 = __webpack_require__(31);
const util_1 = __webpack_require__(17);
const def = {
    keyword: "$ref",
    schemaType: "string",
    code(cxt) {
        const { gen, schema: $ref, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self } = it;
        const { root } = env;
        if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
            return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);
        if (schOrEnv === undefined)
            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
        if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
            if (env === root)
                return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: root });
            return callRef(cxt, (0, codegen_1._) `${rootName}.validate`, root, root.$async);
        }
        function callValidate(sch) {
            const v = getValidate(cxt, sch);
            callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
                schema: sch,
                dataTypes: [],
                schemaPath: codegen_1.nil,
                topSchemaRef: schName,
                errSchemaPath: $ref,
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
        }
    },
};
function getValidate(cxt, sch) {
    const { gen } = cxt;
    return sch.validate
        ? gen.scopeValue("validate", { ref: sch.validate })
        : (0, codegen_1._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
}
exports.getValidate = getValidate;
function callRef(cxt, v, sch, $async) {
    const { gen, it } = cxt;
    const { allErrors, schemaEnv: env, opts } = it;
    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
    if ($async)
        callAsyncRef();
    else
        callSyncRef();
    function callAsyncRef() {
        if (!env.$async)
            throw new Error("async schema referenced by sync schema");
        const valid = gen.let("valid");
        gen.try(() => {
            gen.code((0, codegen_1._) `await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
            if (!allErrors)
                gen.assign(valid, true);
        }, (e) => {
            gen.if((0, codegen_1._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
            addErrorsFrom(e);
            if (!allErrors)
                gen.assign(valid, false);
        });
        cxt.ok(valid);
    }
    function callSyncRef() {
        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
    }
    function addErrorsFrom(source) {
        const errs = (0, codegen_1._) `${source}.errors`;
        gen.assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged
        gen.assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
    }
    function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated)
            return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        // TODO refactor
        if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
                if (schEvaluated.props !== undefined) {
                    it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                }
            }
            else {
                const props = gen.var("props", (0, codegen_1._) `${source}.evaluated.props`);
                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
        }
        if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
                if (schEvaluated.items !== undefined) {
                    it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                }
            }
            else {
                const items = gen.var("items", (0, codegen_1._) `${source}.evaluated.items`);
                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
        }
    }
}
exports.callRef = callRef;
exports["default"] = def;
//# sourceMappingURL=ref.js.map

/***/ }),
/* 42 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const limitNumber_1 = __webpack_require__(43);
const multipleOf_1 = __webpack_require__(44);
const limitLength_1 = __webpack_require__(45);
const pattern_1 = __webpack_require__(47);
const limitProperties_1 = __webpack_require__(48);
const required_1 = __webpack_require__(49);
const limitItems_1 = __webpack_require__(50);
const uniqueItems_1 = __webpack_require__(51);
const const_1 = __webpack_require__(53);
const enum_1 = __webpack_require__(54);
const validation = [
    // number
    limitNumber_1.default,
    multipleOf_1.default,
    // string
    limitLength_1.default,
    pattern_1.default,
    // object
    limitProperties_1.default,
    required_1.default,
    // array
    limitItems_1.default,
    uniqueItems_1.default,
    // any
    { keyword: "type", schemaType: ["string", "array"] },
    { keyword: "nullable", schemaType: "boolean" },
    const_1.default,
    enum_1.default,
];
exports["default"] = validation;
//# sourceMappingURL=index.js.map

/***/ }),
/* 43 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const ops = codegen_1.operators;
const KWDs = {
    maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
};
const error = {
    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
};
const def = {
    keyword: Object.keys(KWDs),
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitNumber.js.map

/***/ }),
/* 44 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const error = {
    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,
    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,
};
const def = {
    keyword: "multipleOf",
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec
            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
            : (0, codegen_1._) `${res} !== parseInt(${res})`;
        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
    },
};
exports["default"] = def;
//# sourceMappingURL=multipleOf.js.map

/***/ }),
/* 45 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const ucs2length_1 = __webpack_require__(46);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;
    },
    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxLength", "minLength"],
    type: "string",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitLength.js.map

/***/ }),
/* 46 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
function ucs2length(str) {
    const len = str.length;
    let length = 0;
    let pos = 0;
    let value;
    while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 0xd800 && value <= 0xdbff && pos < len) {
            // high surrogate, and there is a next character
            value = str.charCodeAt(pos);
            if ((value & 0xfc00) === 0xdc00)
                pos++; // low surrogate
        }
    }
    return length;
}
exports["default"] = ucs2length;
ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
//# sourceMappingURL=ucs2length.js.map

/***/ }),
/* 47 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(24);
const codegen_1 = __webpack_require__(14);
const error = {
    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern "${schemaCode}"`,
    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,
};
const def = {
    keyword: "pattern",
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
        const { data, $data, schema, schemaCode, it } = cxt;
        // TODO regexp should be wrapped in try/catchs
        const u = it.opts.unicodeRegExp ? "u" : "";
        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=pattern.js.map

/***/ }),
/* 48 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} properties`;
    },
    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxProperties", "minProperties"],
    type: "object",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._) `Object.keys(${data}).length ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitProperties.js.map

/***/ }),
/* 49 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(24);
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const error = {
    message: ({ params: { missingProperty } }) => (0, codegen_1.str) `must have required property '${missingProperty}'`,
    params: ({ params: { missingProperty } }) => (0, codegen_1._) `{missingProperty: ${missingProperty}}`,
};
const def = {
    keyword: "required",
    type: "object",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0)
            return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors)
            allErrorsMode();
        else
            exitOnErrorMode();
        if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema) {
                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                    const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
                }
            }
        }
        function allErrorsMode() {
            if (useLoop || $data) {
                cxt.block$data(codegen_1.nil, loopAllRequired);
            }
            else {
                for (const prop of schema) {
                    (0, code_1.checkReportMissingProp)(cxt, prop);
                }
            }
        }
        function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
                const valid = gen.let("valid", true);
                cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                cxt.ok(valid);
            }
            else {
                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
                (0, code_1.reportMissingProp)(cxt, missing);
                gen.else();
            }
        }
        function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
                cxt.setParams({ missingProperty: prop });
                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
        }
        function loopUntilMissing(missing, valid) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
                gen.if((0, codegen_1.not)(valid), () => {
                    cxt.error();
                    gen.break();
                });
            }, codegen_1.nil);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=required.js.map

/***/ }),
/* 50 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} items`;
    },
    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxItems", "minItems"],
    type: "array",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._) `${data}.length ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitItems.js.map

/***/ }),
/* 51 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const dataType_1 = __webpack_require__(19);
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const equal_1 = __webpack_require__(52);
const error = {
    message: ({ params: { i, j } }) => (0, codegen_1.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
    params: ({ params: { i, j } }) => (0, codegen_1._) `{i: ${i}, j: ${j}}`,
};
const def = {
    keyword: "uniqueItems",
    type: "array",
    schemaType: "boolean",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema)
            return;
        const valid = gen.let("valid");
        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._) `${schemaCode} === false`);
        cxt.ok(valid);
        function validateUniqueItems() {
            const i = gen.let("i", (0, codegen_1._) `${data}.length`);
            const j = gen.let("j");
            cxt.setParams({ i, j });
            gen.assign(valid, true);
            gen.if((0, codegen_1._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
        }
        function loopN(i, j) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._) `{}`);
            gen.for((0, codegen_1._) `;${i}--;`, () => {
                gen.let(item, (0, codegen_1._) `${data}[${i}]`);
                gen.if(wrongType, (0, codegen_1._) `continue`);
                if (itemTypes.length > 1)
                    gen.if((0, codegen_1._) `typeof ${item} == "string"`, (0, codegen_1._) `${item} += "_"`);
                gen
                    .if((0, codegen_1._) `typeof ${indices}[${item}] == "number"`, () => {
                    gen.assign(j, (0, codegen_1._) `${indices}[${item}]`);
                    cxt.error();
                    gen.assign(valid, false).break();
                })
                    .code((0, codegen_1._) `${indices}[${item}] = ${i}`);
            });
        }
        function loopN2(i, j) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._) `;${i}--;`, () => gen.for((0, codegen_1._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                cxt.error();
                gen.assign(valid, false).break(outer);
            })));
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=uniqueItems.js.map

/***/ }),
/* 52 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// https://github.com/ajv-validator/ajv/issues/889
const equal = __webpack_require__(27);
equal.code = 'require("ajv/dist/runtime/equal").default';
exports["default"] = equal;
//# sourceMappingURL=equal.js.map

/***/ }),
/* 53 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const equal_1 = __webpack_require__(52);
const error = {
    message: "must be equal to constant",
    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValue: ${schemaCode}}`,
};
const def = {
    keyword: "const",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schemaCode, schema } = cxt;
        if ($data || (schema && typeof schema == "object")) {
            cxt.fail$data((0, codegen_1._) `!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
        }
        else {
            cxt.fail((0, codegen_1._) `${schema} !== ${data}`);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=const.js.map

/***/ }),
/* 54 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const equal_1 = __webpack_require__(52);
const error = {
    message: "must be equal to one of the allowed values",
    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValues: ${schemaCode}}`,
};
const def = {
    keyword: "enum",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
            throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        let eql;
        const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1.useFunc)(gen, equal_1.default)));
        let valid;
        if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
        }
        else {
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
        }
        cxt.pass(valid);
        function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
        }
        function equalCode(vSchema, i) {
            const sch = schema[i];
            return typeof sch === "object" && sch !== null
                ? (0, codegen_1._) `${getEql()}(${data}, ${vSchema}[${i}])`
                : (0, codegen_1._) `${data} === ${sch}`;
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=enum.js.map

/***/ }),
/* 55 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const additionalItems_1 = __webpack_require__(56);
const prefixItems_1 = __webpack_require__(57);
const items_1 = __webpack_require__(58);
const items2020_1 = __webpack_require__(59);
const contains_1 = __webpack_require__(60);
const dependencies_1 = __webpack_require__(61);
const propertyNames_1 = __webpack_require__(62);
const additionalProperties_1 = __webpack_require__(63);
const properties_1 = __webpack_require__(64);
const patternProperties_1 = __webpack_require__(65);
const not_1 = __webpack_require__(66);
const anyOf_1 = __webpack_require__(67);
const oneOf_1 = __webpack_require__(68);
const allOf_1 = __webpack_require__(69);
const if_1 = __webpack_require__(70);
const thenElse_1 = __webpack_require__(71);
function getApplicator(draft2020 = false) {
    const applicator = [
        // any
        not_1.default,
        anyOf_1.default,
        oneOf_1.default,
        allOf_1.default,
        if_1.default,
        thenElse_1.default,
        // object
        propertyNames_1.default,
        additionalProperties_1.default,
        dependencies_1.default,
        properties_1.default,
        patternProperties_1.default,
    ];
    // array
    if (draft2020)
        applicator.push(prefixItems_1.default, items2020_1.default);
    else
        applicator.push(additionalItems_1.default, items_1.default);
    applicator.push(contains_1.default);
    return applicator;
}
exports["default"] = getApplicator;
//# sourceMappingURL=index.js.map

/***/ }),
/* 56 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateAdditionalItems = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const error = {
    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
};
const def = {
    keyword: "additionalItems",
    type: "array",
    schemaType: ["boolean", "object"],
    before: "uniqueItems",
    error,
    code(cxt) {
        const { parentSchema, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
        }
        validateAdditionalItems(cxt, items);
    },
};
function validateAdditionalItems(cxt, items) {
    const { gen, schema, data, keyword, it } = cxt;
    it.items = true;
    const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    if (schema === false) {
        cxt.setParams({ len: items.length });
        cxt.pass((0, codegen_1._) `${len} <= ${items.length}`);
    }
    else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
        const valid = gen.var("valid", (0, codegen_1._) `${len} <= ${items.length}`); // TODO var
        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
        cxt.ok(valid);
    }
    function validateItems(valid) {
        gen.forRange("i", items.length, len, (i) => {
            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
            if (!it.allErrors)
                gen.if((0, codegen_1.not)(valid), () => gen.break());
        });
    }
}
exports.validateAdditionalItems = validateAdditionalItems;
exports["default"] = def;
//# sourceMappingURL=additionalItems.js.map

/***/ }),
/* 57 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const items_1 = __webpack_require__(58);
const def = {
    keyword: "prefixItems",
    type: "array",
    schemaType: ["array"],
    before: "uniqueItems",
    code: (cxt) => (0, items_1.validateTuple)(cxt, "items"),
};
exports["default"] = def;
//# sourceMappingURL=prefixItems.js.map

/***/ }),
/* 58 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateTuple = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const code_1 = __webpack_require__(24);
const def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "array", "boolean"],
    before: "uniqueItems",
    code(cxt) {
        const { schema, it } = cxt;
        if (Array.isArray(schema))
            return validateTuple(cxt, "additionalItems", schema);
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
        cxt.ok((0, code_1.validateArray)(cxt));
    },
};
function validateTuple(cxt, extraItems, schArr = cxt.schema) {
    const { gen, parentSchema, data, keyword, it } = cxt;
    checkStrictTuple(parentSchema);
    if (it.opts.unevaluated && schArr.length && it.items !== true) {
        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
    }
    const valid = gen.name("valid");
    const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    schArr.forEach((sch, i) => {
        if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
        gen.if((0, codegen_1._) `${len} > ${i}`, () => cxt.subschema({
            keyword,
            schemaProp: i,
            dataProp: i,
        }, valid));
        cxt.ok(valid);
    });
    function checkStrictTuple(sch) {
        const { opts, errSchemaPath } = it;
        const l = schArr.length;
        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
        if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
        }
    }
}
exports.validateTuple = validateTuple;
exports["default"] = def;
//# sourceMappingURL=items.js.map

/***/ }),
/* 59 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const code_1 = __webpack_require__(24);
const additionalItems_1 = __webpack_require__(56);
const error = {
    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
};
const def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    error,
    code(cxt) {
        const { schema, parentSchema, it } = cxt;
        const { prefixItems } = parentSchema;
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
        if (prefixItems)
            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
        else
            cxt.ok((0, code_1.validateArray)(cxt));
    },
};
exports["default"] = def;
//# sourceMappingURL=items2020.js.map

/***/ }),
/* 60 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const error = {
    message: ({ params: { min, max } }) => max === undefined
        ? (0, codegen_1.str) `must contain at least ${min} valid item(s)`
        : (0, codegen_1.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
    params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1._) `{minContains: ${min}}` : (0, codegen_1._) `{minContains: ${min}, maxContains: ${max}}`,
};
const def = {
    keyword: "contains",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
            min = minContains === undefined ? 1 : minContains;
            max = maxContains;
        }
        else {
            min = 1;
        }
        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
        cxt.setParams({ min, max });
        if (max === undefined && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
        }
        if (max !== undefined && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
        }
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
            let cond = (0, codegen_1._) `${len} >= ${min}`;
            if (max !== undefined)
                cond = (0, codegen_1._) `${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
        }
        it.items = true;
        const valid = gen.name("valid");
        if (max === undefined && min === 1) {
            validateItems(valid, () => gen.if(valid, () => gen.break()));
        }
        else if (min === 0) {
            gen.let(valid, true);
            if (max !== undefined)
                gen.if((0, codegen_1._) `${data}.length > 0`, validateItemsWithCount);
        }
        else {
            gen.let(valid, false);
            validateItemsWithCount();
        }
        cxt.result(valid, () => cxt.reset());
        function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
        }
        function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i) => {
                cxt.subschema({
                    keyword: "contains",
                    dataProp: i,
                    dataPropType: util_1.Type.Num,
                    compositeRule: true,
                }, _valid);
                block();
            });
        }
        function checkLimits(count) {
            gen.code((0, codegen_1._) `${count}++`);
            if (max === undefined) {
                gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
            }
            else {
                gen.if((0, codegen_1._) `${count} > ${max}`, () => gen.assign(valid, false).break());
                if (min === 1)
                    gen.assign(valid, true);
                else
                    gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true));
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=contains.js.map

/***/ }),
/* 61 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const code_1 = __webpack_require__(24);
exports.error = {
    message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? "property" : "properties";
        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
    },
    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
};
const def = {
    keyword: "dependencies",
    type: "object",
    schemaType: "object",
    error: exports.error,
    code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
    },
};
function splitDependencies({ schema }) {
    const propertyDeps = {};
    const schemaDeps = {};
    for (const key in schema) {
        if (key === "__proto__")
            continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
    }
    return [propertyDeps, schemaDeps];
}
function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    const { gen, data, it } = cxt;
    if (Object.keys(propertyDeps).length === 0)
        return;
    const missing = gen.let("missing");
    for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0)
            continue;
        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
        cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", "),
        });
        if (it.allErrors) {
            gen.if(hasProperty, () => {
                for (const depProp of deps) {
                    (0, code_1.checkReportMissingProp)(cxt, depProp);
                }
            });
        }
        else {
            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
        }
    }
}
exports.validatePropertyDeps = validatePropertyDeps;
function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    for (const prop in schemaDeps) {
        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
            continue;
        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
        }, () => gen.var(valid, true) // TODO var
        );
        cxt.ok(valid);
    }
}
exports.validateSchemaDeps = validateSchemaDeps;
exports["default"] = def;
//# sourceMappingURL=dependencies.js.map

/***/ }),
/* 62 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const error = {
    message: "property name must be valid",
    params: ({ params }) => (0, codegen_1._) `{propertyName: ${params.propertyName}}`,
};
const def = {
    keyword: "propertyNames",
    type: "object",
    schemaType: ["object", "boolean"],
    error,
    code(cxt) {
        const { gen, schema, data, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
        const valid = gen.name("valid");
        gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
                keyword: "propertyNames",
                data: key,
                dataTypes: ["string"],
                propertyName: key,
                compositeRule: true,
            }, valid);
            gen.if((0, codegen_1.not)(valid), () => {
                cxt.error(true);
                if (!it.allErrors)
                    gen.break();
            });
        });
        cxt.ok(valid);
    },
};
exports["default"] = def;
//# sourceMappingURL=propertyNames.js.map

/***/ }),
/* 63 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(24);
const codegen_1 = __webpack_require__(14);
const names_1 = __webpack_require__(18);
const util_1 = __webpack_require__(17);
const error = {
    message: "must NOT have additional properties",
    params: ({ params }) => (0, codegen_1._) `{additionalProperty: ${params.additionalProperty}}`,
};
const def = {
    keyword: "additionalProperties",
    type: ["object"],
    schemaType: ["boolean", "object"],
    allowUndefined: true,
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        /* istanbul ignore if */
        if (!errsCount)
            throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
            return;
        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok((0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
                if (!props.length && !patProps.length)
                    additionalPropertyCode(key);
                else
                    gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
        }
        function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
                // TODO maybe an option instead of hard-coded 8?
                const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
                definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            }
            else if (props.length) {
                definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._) `${key} === ${p}`));
            }
            else {
                definedProp = codegen_1.nil;
            }
            if (patProps.length) {
                definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._) `${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
            }
            return (0, codegen_1.not)(definedProp);
        }
        function deleteAdditional(key) {
            gen.code((0, codegen_1._) `delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                deleteAdditional(key);
                return;
            }
            if (schema === false) {
                cxt.setParams({ additionalProperty: key });
                cxt.error();
                if (!allErrors)
                    gen.break();
                return;
            }
            if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
                const valid = gen.name("valid");
                if (opts.removeAdditional === "failing") {
                    applyAdditionalSchema(key, valid, false);
                    gen.if((0, codegen_1.not)(valid), () => {
                        cxt.reset();
                        deleteAdditional(key);
                    });
                }
                else {
                    applyAdditionalSchema(key, valid);
                    if (!allErrors)
                        gen.if((0, codegen_1.not)(valid), () => gen.break());
                }
            }
        }
        function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
                keyword: "additionalProperties",
                dataProp: key,
                dataPropType: util_1.Type.Str,
            };
            if (errors === false) {
                Object.assign(subschema, {
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                });
            }
            cxt.subschema(subschema, valid);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=additionalProperties.js.map

/***/ }),
/* 64 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const validate_1 = __webpack_require__(11);
const code_1 = __webpack_require__(24);
const util_1 = __webpack_require__(17);
const additionalProperties_1 = __webpack_require__(63);
const def = {
    keyword: "properties",
    type: "object",
    schemaType: "object",
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
        }
        const allProps = (0, code_1.allSchemaProperties)(schema);
        for (const prop of allProps) {
            it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
        }
        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
        if (properties.length === 0)
            return;
        const valid = gen.name("valid");
        for (const prop of properties) {
            if (hasDefault(prop)) {
                applyPropertySchema(prop);
            }
            else {
                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
                applyPropertySchema(prop);
                if (!it.allErrors)
                    gen.else().var(valid, true);
                gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
        }
        function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
        }
        function applyPropertySchema(prop) {
            cxt.subschema({
                keyword: "properties",
                schemaProp: prop,
                dataProp: prop,
            }, valid);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=properties.js.map

/***/ }),
/* 65 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(24);
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const util_2 = __webpack_require__(17);
const def = {
    keyword: "patternProperties",
    type: "object",
    schemaType: "object",
    code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = (0, code_1.allSchemaProperties)(schema);
        const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));
        if (patterns.length === 0 ||
            (alwaysValidPatterns.length === patterns.length &&
                (!it.opts.unevaluated || it.props === true))) {
            return;
        }
        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
        const valid = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
            for (const pat of patterns) {
                if (checkProperties)
                    checkMatchingProperties(pat);
                if (it.allErrors) {
                    validateProperties(pat);
                }
                else {
                    gen.var(valid, true); // TODO var
                    validateProperties(pat);
                    gen.if(valid);
                }
            }
        }
        function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
                if (new RegExp(pat).test(prop)) {
                    (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                }
            }
        }
        function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
                gen.if((0, codegen_1._) `${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
                    const alwaysValid = alwaysValidPatterns.includes(pat);
                    if (!alwaysValid) {
                        cxt.subschema({
                            keyword: "patternProperties",
                            schemaProp: pat,
                            dataProp: key,
                            dataPropType: util_2.Type.Str,
                        }, valid);
                    }
                    if (it.opts.unevaluated && props !== true) {
                        gen.assign((0, codegen_1._) `${props}[${key}]`, true);
                    }
                    else if (!alwaysValid && !it.allErrors) {
                        // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                        // or if all properties were evaluated (props === true)
                        gen.if((0, codegen_1.not)(valid), () => gen.break());
                    }
                });
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=patternProperties.js.map

/***/ }),
/* 66 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(17);
const def = {
    keyword: "not",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    code(cxt) {
        const { gen, schema, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
            cxt.fail();
            return;
        }
        const valid = gen.name("valid");
        cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false,
        }, valid);
        cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
    },
    error: { message: "must NOT be valid" },
};
exports["default"] = def;
//# sourceMappingURL=not.js.map

/***/ }),
/* 67 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(24);
const def = {
    keyword: "anyOf",
    schemaType: "array",
    trackErrors: true,
    code: code_1.validateUnion,
    error: { message: "must match a schema in anyOf" },
};
exports["default"] = def;
//# sourceMappingURL=anyOf.js.map

/***/ }),
/* 68 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const error = {
    message: "must match exactly one schema in oneOf",
    params: ({ params }) => (0, codegen_1._) `{passingSchemas: ${params.passing}}`,
};
const def = {
    keyword: "oneOf",
    schemaType: "array",
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        if (it.opts.discriminator && parentSchema.discriminator)
            return;
        const schArr = schema;
        const valid = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({ passing });
        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
        gen.block(validateOneOf);
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
        function validateOneOf() {
            schArr.forEach((sch, i) => {
                let schCxt;
                if ((0, util_1.alwaysValidSchema)(it, sch)) {
                    gen.var(schValid, true);
                }
                else {
                    schCxt = cxt.subschema({
                        keyword: "oneOf",
                        schemaProp: i,
                        compositeRule: true,
                    }, schValid);
                }
                if (i > 0) {
                    gen
                        .if((0, codegen_1._) `${schValid} && ${valid}`)
                        .assign(valid, false)
                        .assign(passing, (0, codegen_1._) `[${passing}, ${i}]`)
                        .else();
                }
                gen.if(schValid, () => {
                    gen.assign(valid, true);
                    gen.assign(passing, i);
                    if (schCxt)
                        cxt.mergeEvaluated(schCxt, codegen_1.Name);
                });
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=oneOf.js.map

/***/ }),
/* 69 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(17);
const def = {
    keyword: "allOf",
    schemaType: "array",
    code(cxt) {
        const { gen, schema, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const valid = gen.name("valid");
        schema.forEach((sch, i) => {
            if ((0, util_1.alwaysValidSchema)(it, sch))
                return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
        });
    },
};
exports["default"] = def;
//# sourceMappingURL=allOf.js.map

/***/ }),
/* 70 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const util_1 = __webpack_require__(17);
const error = {
    message: ({ params }) => (0, codegen_1.str) `must match "${params.ifClause}" schema`,
    params: ({ params }) => (0, codegen_1._) `{failingKeyword: ${params.ifClause}}`,
};
const def = {
    keyword: "if",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === undefined && parentSchema.else === undefined) {
            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
        }
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse)
            return;
        const valid = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        }
        else if (hasThen) {
            gen.if(schValid, validateClause("then"));
        }
        else {
            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
        }
        cxt.pass(valid, () => cxt.error(true));
        function validateIf() {
            const schCxt = cxt.subschema({
                keyword: "if",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, schValid);
            cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
            return () => {
                const schCxt = cxt.subschema({ keyword }, schValid);
                gen.assign(valid, schValid);
                cxt.mergeValidEvaluated(schCxt, valid);
                if (ifClause)
                    gen.assign(ifClause, (0, codegen_1._) `${keyword}`);
                else
                    cxt.setParams({ ifClause: keyword });
            };
        }
    },
};
function hasSchema(it, keyword) {
    const schema = it.schema[keyword];
    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);
}
exports["default"] = def;
//# sourceMappingURL=if.js.map

/***/ }),
/* 71 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(17);
const def = {
    keyword: ["then", "else"],
    schemaType: ["object", "boolean"],
    code({ keyword, parentSchema, it }) {
        if (parentSchema.if === undefined)
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
    },
};
exports["default"] = def;
//# sourceMappingURL=thenElse.js.map

/***/ }),
/* 72 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const format_1 = __webpack_require__(73);
const format = [format_1.default];
exports["default"] = format;
//# sourceMappingURL=index.js.map

/***/ }),
/* 73 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const error = {
    message: ({ schemaCode }) => (0, codegen_1.str) `must match format "${schemaCode}"`,
    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,
};
const def = {
    keyword: "format",
    type: ["number", "string"],
    schemaType: "string",
    $data: true,
    error,
    code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self } = it;
        if (!opts.validateFormats)
            return;
        if ($data)
            validate$DataFormat();
        else
            validateFormat();
        function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
                ref: self.formats,
                code: opts.code.formats,
            });
            const fDef = gen.const("fDef", (0, codegen_1._) `${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            // TODO simplify
            gen.if((0, codegen_1._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || "string"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `"string"`).assign(format, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
                if (opts.strictSchema === false)
                    return codegen_1.nil;
                return (0, codegen_1._) `${schemaCode} && !${format}`;
            }
            function invalidFmt() {
                const callFormat = schemaEnv.$async
                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                    : (0, codegen_1._) `${format}(${data})`;
                const validData = (0, codegen_1._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
        }
        function validateFormat() {
            const formatDef = self.formats[schema];
            if (!formatDef) {
                unknownFormat();
                return;
            }
            if (formatDef === true)
                return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
                cxt.pass(validCondition());
            function unknownFormat() {
                if (opts.strictSchema === false) {
                    self.logger.warn(unknownMsg());
                    return;
                }
                throw new Error(unknownMsg());
                function unknownMsg() {
                    return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                }
            }
            function getFormat(fmtDef) {
                const code = fmtDef instanceof RegExp
                    ? (0, codegen_1.regexpCode)(fmtDef)
                    : opts.code.formats
                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`
                        : undefined;
                const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
                if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                    return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];
                }
                return ["string", fmtDef, fmt];
            }
            function validCondition() {
                if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                    if (!schemaEnv.$async)
                        throw new Error("async format in sync schema");
                    return (0, codegen_1._) `await ${fmtRef}(${data})`;
                }
                return typeof format == "function" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=format.js.map

/***/ }),
/* 74 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contentVocabulary = exports.metadataVocabulary = void 0;
exports.metadataVocabulary = [
    "title",
    "description",
    "default",
    "deprecated",
    "readOnly",
    "writeOnly",
    "examples",
];
exports.contentVocabulary = [
    "contentMediaType",
    "contentEncoding",
    "contentSchema",
];
//# sourceMappingURL=metadata.js.map

/***/ }),
/* 75 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const types_1 = __webpack_require__(76);
const compile_1 = __webpack_require__(31);
const ref_error_1 = __webpack_require__(30);
const util_1 = __webpack_require__(17);
const error = {
    message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag
        ? `tag "${tagName}" must be string`
        : `value of tag "${tagName}" must be in oneOf`,
    params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
};
const def = {
    keyword: "discriminator",
    type: "object",
    schemaType: "object",
    error,
    code(cxt) {
        const { gen, data, schema, parentSchema, it } = cxt;
        const { oneOf } = parentSchema;
        if (!it.opts.discriminator) {
            throw new Error("discriminator: requires discriminator option");
        }
        const tagName = schema.propertyName;
        if (typeof tagName != "string")
            throw new Error("discriminator: requires propertyName");
        if (schema.mapping)
            throw new Error("discriminator: mapping is not supported");
        if (!oneOf)
            throw new Error("discriminator: requires oneOf keyword");
        const valid = gen.let("valid", false);
        const tag = gen.const("tag", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(tagName)}`);
        gen.if((0, codegen_1._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
        cxt.ok(valid);
        function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for (const tagValue in mapping) {
                gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);
                gen.assign(valid, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
            gen.endIf();
        }
        function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
        }
        function getMapping() {
            var _a;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for (let i = 0; i < oneOf.length; i++) {
                let sch = oneOf[i];
                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                    const ref = sch.$ref;
                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
                    if (sch instanceof compile_1.SchemaEnv)
                        sch = sch.schema;
                    if (sch === undefined)
                        throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
                }
                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                if (typeof propSch != "object") {
                    throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                }
                tagRequired = tagRequired && (topRequired || hasRequired(sch));
                addMappings(propSch, i);
            }
            if (!tagRequired)
                throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
                return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i) {
                if (sch.const) {
                    addMapping(sch.const, i);
                }
                else if (sch.enum) {
                    for (const tagValue of sch.enum) {
                        addMapping(tagValue, i);
                    }
                }
                else {
                    throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                }
            }
            function addMapping(tagValue, i) {
                if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                    throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                }
                oneOfMapping[tagValue] = i;
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=index.js.map

/***/ }),
/* 76 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiscrError = void 0;
var DiscrError;
(function (DiscrError) {
    DiscrError["Tag"] = "tag";
    DiscrError["Mapping"] = "mapping";
})(DiscrError || (exports.DiscrError = DiscrError = {}));
//# sourceMappingURL=types.js.map

/***/ }),
/* 77 */
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

/***/ }),
/* 78 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const formats_1 = __webpack_require__(79);
const limit_1 = __webpack_require__(80);
const codegen_1 = __webpack_require__(14);
const fullName = new codegen_1.Name("fullFormats");
const fastName = new codegen_1.Name("fastFormats");
const formatsPlugin = (ajv, opts = { keywords: true }) => {
    if (Array.isArray(opts)) {
        addFormats(ajv, opts, formats_1.fullFormats, fullName);
        return ajv;
    }
    const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
    const list = opts.formats || formats_1.formatNames;
    addFormats(ajv, list, formats, exportName);
    if (opts.keywords)
        (0, limit_1.default)(ajv);
    return ajv;
};
formatsPlugin.get = (name, mode = "full") => {
    const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
    const f = formats[name];
    if (!f)
        throw new Error(`Unknown format "${name}"`);
    return f;
};
function addFormats(ajv, list, fs, exportName) {
    var _a;
    var _b;
    (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : (_b.formats = (0, codegen_1._) `require("ajv-formats/dist/formats").${exportName}`);
    for (const f of list)
        ajv.addFormat(f, fs[f]);
}
module.exports = exports = formatsPlugin;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = formatsPlugin;
//# sourceMappingURL=index.js.map

/***/ }),
/* 79 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatNames = exports.fastFormats = exports.fullFormats = void 0;
function fmtDef(validate, compare) {
    return { validate, compare };
}
exports.fullFormats = {
    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    date: fmtDef(date, compareDate),
    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    time: fmtDef(getTime(true), compareTime),
    "date-time": fmtDef(getDateTime(true), compareDateTime),
    "iso-time": fmtDef(getTime(), compareIsoTime),
    "iso-date-time": fmtDef(getDateTime(), compareIsoDateTime),
    // duration: https://tools.ietf.org/html/rfc3339#appendix-A
    duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
    uri,
    "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
    // uri-template: https://tools.ietf.org/html/rfc6570
    "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
    // For the source: https://gist.github.com/dperini/729294
    // For test cases: https://mathiasbynens.be/demo/url-regex
    url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/,
    ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
    regex,
    // uuid: http://tools.ietf.org/html/rfc4122
    uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
    // JSON-pointer: https://tools.ietf.org/html/rfc6901
    // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
    "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
    "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
    // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
    "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
    // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types
    // byte: https://github.com/miguelmota/is-base64
    byte,
    // signed 32 bit integer
    int32: { type: "number", validate: validateInt32 },
    // signed 64 bit integer
    int64: { type: "number", validate: validateInt64 },
    // C-type float
    float: { type: "number", validate: validateNumber },
    // C-type double
    double: { type: "number", validate: validateNumber },
    // hint to the UI to hide input strings
    password: true,
    // unchecked string payload
    binary: true,
};
exports.fastFormats = {
    ...exports.fullFormats,
    date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
    time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareTime),
    "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
    "iso-time": fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareIsoTime),
    "iso-date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareIsoDateTime),
    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    // email (sources from jsen validator):
    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
};
exports.formatNames = Object.keys(exports.fullFormats);
function isLeapYear(year) {
    // https://tools.ietf.org/html/rfc3339#appendix-C
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function date(str) {
    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    const matches = DATE.exec(str);
    if (!matches)
        return false;
    const year = +matches[1];
    const month = +matches[2];
    const day = +matches[3];
    return (month >= 1 &&
        month <= 12 &&
        day >= 1 &&
        day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]));
}
function compareDate(d1, d2) {
    if (!(d1 && d2))
        return undefined;
    if (d1 > d2)
        return 1;
    if (d1 < d2)
        return -1;
    return 0;
}
const TIME = /^(\d\d):(\d\d):(\d\d(?:\.\d+)?)(z|([+-])(\d\d)(?::?(\d\d))?)?$/i;
function getTime(strictTimeZone) {
    return function time(str) {
        const matches = TIME.exec(str);
        if (!matches)
            return false;
        const hr = +matches[1];
        const min = +matches[2];
        const sec = +matches[3];
        const tz = matches[4];
        const tzSign = matches[5] === "-" ? -1 : 1;
        const tzH = +(matches[6] || 0);
        const tzM = +(matches[7] || 0);
        if (tzH > 23 || tzM > 59 || (strictTimeZone && !tz))
            return false;
        if (hr <= 23 && min <= 59 && sec < 60)
            return true;
        // leap second
        const utcMin = min - tzM * tzSign;
        const utcHr = hr - tzH * tzSign - (utcMin < 0 ? 1 : 0);
        return (utcHr === 23 || utcHr === -1) && (utcMin === 59 || utcMin === -1) && sec < 61;
    };
}
function compareTime(s1, s2) {
    if (!(s1 && s2))
        return undefined;
    const t1 = new Date("2020-01-01T" + s1).valueOf();
    const t2 = new Date("2020-01-01T" + s2).valueOf();
    if (!(t1 && t2))
        return undefined;
    return t1 - t2;
}
function compareIsoTime(t1, t2) {
    if (!(t1 && t2))
        return undefined;
    const a1 = TIME.exec(t1);
    const a2 = TIME.exec(t2);
    if (!(a1 && a2))
        return undefined;
    t1 = a1[1] + a1[2] + a1[3];
    t2 = a2[1] + a2[2] + a2[3];
    if (t1 > t2)
        return 1;
    if (t1 < t2)
        return -1;
    return 0;
}
const DATE_TIME_SEPARATOR = /t|\s/i;
function getDateTime(strictTimeZone) {
    const time = getTime(strictTimeZone);
    return function date_time(str) {
        // http://tools.ietf.org/html/rfc3339#section-5.6
        const dateTime = str.split(DATE_TIME_SEPARATOR);
        return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1]);
    };
}
function compareDateTime(dt1, dt2) {
    if (!(dt1 && dt2))
        return undefined;
    const d1 = new Date(dt1).valueOf();
    const d2 = new Date(dt2).valueOf();
    if (!(d1 && d2))
        return undefined;
    return d1 - d2;
}
function compareIsoDateTime(dt1, dt2) {
    if (!(dt1 && dt2))
        return undefined;
    const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
    const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
    const res = compareDate(d1, d2);
    if (res === undefined)
        return undefined;
    return res || compareTime(t1, t2);
}
const NOT_URI_FRAGMENT = /\/|:/;
const URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
function uri(str) {
    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}
const BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
function byte(str) {
    BYTE.lastIndex = 0;
    return BYTE.test(str);
}
const MIN_INT32 = -(2 ** 31);
const MAX_INT32 = 2 ** 31 - 1;
function validateInt32(value) {
    return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
}
function validateInt64(value) {
    // JSON and javascript max Int is 2**53, so any int that passes isInteger is valid for Int64
    return Number.isInteger(value);
}
function validateNumber() {
    return true;
}
const Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
    if (Z_ANCHOR.test(str))
        return false;
    try {
        new RegExp(str);
        return true;
    }
    catch (e) {
        return false;
    }
}
//# sourceMappingURL=formats.js.map

/***/ }),
/* 80 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatLimitDefinition = void 0;
const ajv_1 = __webpack_require__(9);
const codegen_1 = __webpack_require__(14);
const ops = codegen_1.operators;
const KWDs = {
    formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
};
const error = {
    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `should be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
};
exports.formatLimitDefinition = {
    keyword: Object.keys(KWDs),
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, schemaCode, keyword, it } = cxt;
        const { opts, self } = it;
        if (!opts.validateFormats)
            return;
        const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, "format");
        if (fCxt.$data)
            validate$DataFormat();
        else
            validateFormat();
        function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
                ref: self.formats,
                code: opts.code.formats,
            });
            const fmt = gen.const("fmt", (0, codegen_1._) `${fmts}[${fCxt.schemaCode}]`);
            cxt.fail$data((0, codegen_1.or)((0, codegen_1._) `typeof ${fmt} != "object"`, (0, codegen_1._) `${fmt} instanceof RegExp`, (0, codegen_1._) `typeof ${fmt}.compare != "function"`, compareCode(fmt)));
        }
        function validateFormat() {
            const format = fCxt.schema;
            const fmtDef = self.formats[format];
            if (!fmtDef || fmtDef === true)
                return;
            if (typeof fmtDef != "object" ||
                fmtDef instanceof RegExp ||
                typeof fmtDef.compare != "function") {
                throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
            }
            const fmt = gen.scopeValue("formats", {
                key: format,
                ref: fmtDef,
                code: opts.code.formats ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(format)}` : undefined,
            });
            cxt.fail$data(compareCode(fmt));
        }
        function compareCode(fmt) {
            return (0, codegen_1._) `${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
        }
    },
    dependencies: ["format"],
};
const formatLimitPlugin = (ajv) => {
    ajv.addKeyword(exports.formatLimitDefinition);
    return ajv;
};
exports["default"] = formatLimitPlugin;
//# sourceMappingURL=limit.js.map

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const keywords_1 = __importDefault(__webpack_require__(82));
const ajvKeywords = (ajv, keyword) => {
    if (Array.isArray(keyword)) {
        for (const k of keyword)
            get(k)(ajv);
        return ajv;
    }
    if (keyword) {
        get(keyword)(ajv);
        return ajv;
    }
    for (keyword in keywords_1.default)
        get(keyword)(ajv);
    return ajv;
};
ajvKeywords.get = get;
function get(keyword) {
    const defFunc = keywords_1.default[keyword];
    if (!defFunc)
        throw new Error("Unknown keyword " + keyword);
    return defFunc;
}
exports["default"] = ajvKeywords;
module.exports = ajvKeywords;
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
module.exports["default"] = ajvKeywords;
//# sourceMappingURL=index.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const typeof_1 = __importDefault(__webpack_require__(83));
const instanceof_1 = __importDefault(__webpack_require__(85));
const range_1 = __importDefault(__webpack_require__(87));
const exclusiveRange_1 = __importDefault(__webpack_require__(90));
const regexp_1 = __importDefault(__webpack_require__(92));
const transform_1 = __importDefault(__webpack_require__(95));
const uniqueItemProperties_1 = __importDefault(__webpack_require__(97));
const allRequired_1 = __importDefault(__webpack_require__(99));
const anyRequired_1 = __importDefault(__webpack_require__(101));
const oneRequired_1 = __importDefault(__webpack_require__(104));
const patternRequired_1 = __importDefault(__webpack_require__(106));
const prohibited_1 = __importDefault(__webpack_require__(108));
const deepProperties_1 = __importDefault(__webpack_require__(110));
const deepRequired_1 = __importDefault(__webpack_require__(112));
const dynamicDefaults_1 = __importDefault(__webpack_require__(114));
const select_1 = __importDefault(__webpack_require__(116));
// TODO type
const ajvKeywords = {
    typeof: typeof_1.default,
    instanceof: instanceof_1.default,
    range: range_1.default,
    exclusiveRange: exclusiveRange_1.default,
    regexp: regexp_1.default,
    transform: transform_1.default,
    uniqueItemProperties: uniqueItemProperties_1.default,
    allRequired: allRequired_1.default,
    anyRequired: anyRequired_1.default,
    oneRequired: oneRequired_1.default,
    patternRequired: patternRequired_1.default,
    prohibited: prohibited_1.default,
    deepProperties: deepProperties_1.default,
    deepRequired: deepRequired_1.default,
    dynamicDefaults: dynamicDefaults_1.default,
    select: select_1.default,
};
exports["default"] = ajvKeywords;
module.exports = ajvKeywords;
//# sourceMappingURL=index.js.map

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const typeof_1 = __importDefault(__webpack_require__(84));
const typeofPlugin = (ajv) => ajv.addKeyword((0, typeof_1.default)());
exports["default"] = typeofPlugin;
module.exports = typeofPlugin;
//# sourceMappingURL=typeof.js.map

/***/ }),
/* 84 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const TYPES = ["undefined", "string", "number", "object", "function", "boolean", "symbol"];
function getDef() {
    return {
        keyword: "typeof",
        schemaType: ["string", "array"],
        code(cxt) {
            const { data, schema, schemaValue } = cxt;
            cxt.fail(typeof schema == "string"
                ? (0, codegen_1._) `typeof ${data} != ${schema}`
                : (0, codegen_1._) `${schemaValue}.indexOf(typeof ${data}) < 0`);
        },
        metaSchema: {
            anyOf: [
                { type: "string", enum: TYPES },
                { type: "array", items: { type: "string", enum: TYPES } },
            ],
        },
    };
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=typeof.js.map

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const instanceof_1 = __importDefault(__webpack_require__(86));
const instanceofPlugin = (ajv) => ajv.addKeyword((0, instanceof_1.default)());
exports["default"] = instanceofPlugin;
module.exports = instanceofPlugin;
//# sourceMappingURL=instanceof.js.map

/***/ }),
/* 86 */
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const CONSTRUCTORS = {
    Object,
    Array,
    Function,
    Number,
    String,
    Date,
    RegExp,
};
/* istanbul ignore else */
if (typeof Buffer != "undefined")
    CONSTRUCTORS.Buffer = Buffer;
/* istanbul ignore else */
if (typeof Promise != "undefined")
    CONSTRUCTORS.Promise = Promise;
const getDef = Object.assign(_getDef, { CONSTRUCTORS });
function _getDef() {
    return {
        keyword: "instanceof",
        schemaType: ["string", "array"],
        compile(schema) {
            if (typeof schema == "string") {
                const C = getConstructor(schema);
                return (data) => data instanceof C;
            }
            if (Array.isArray(schema)) {
                const constructors = schema.map(getConstructor);
                return (data) => {
                    for (const C of constructors) {
                        if (data instanceof C)
                            return true;
                    }
                    return false;
                };
            }
            /* istanbul ignore next */
            throw new Error("ajv implementation error");
        },
        metaSchema: {
            anyOf: [{ type: "string" }, { type: "array", items: { type: "string" } }],
        },
    };
}
function getConstructor(c) {
    const C = CONSTRUCTORS[c];
    if (C)
        return C;
    throw new Error(`invalid "instanceof" keyword value ${c}`);
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=instanceof.js.map

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const range_1 = __importDefault(__webpack_require__(88));
const range = (ajv) => ajv.addKeyword((0, range_1.default)());
exports["default"] = range;
module.exports = range;
//# sourceMappingURL=range.js.map

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const _range_1 = __importDefault(__webpack_require__(89));
const getDef = (0, _range_1.default)("range");
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=range.js.map

/***/ }),
/* 89 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function getRangeDef(keyword) {
    return () => ({
        keyword,
        type: "number",
        schemaType: "array",
        macro: function ([min, max]) {
            validateRangeSchema(min, max);
            return keyword === "range"
                ? { minimum: min, maximum: max }
                : { exclusiveMinimum: min, exclusiveMaximum: max };
        },
        metaSchema: {
            type: "array",
            minItems: 2,
            maxItems: 2,
            items: { type: "number" },
        },
    });
    function validateRangeSchema(min, max) {
        if (min > max || (keyword === "exclusiveRange" && min === max)) {
            throw new Error("There are no numbers in range");
        }
    }
}
exports["default"] = getRangeDef;
//# sourceMappingURL=_range.js.map

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const exclusiveRange_1 = __importDefault(__webpack_require__(91));
const exclusiveRange = (ajv) => ajv.addKeyword((0, exclusiveRange_1.default)());
exports["default"] = exclusiveRange;
module.exports = exclusiveRange;
//# sourceMappingURL=exclusiveRange.js.map

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const _range_1 = __importDefault(__webpack_require__(89));
const getDef = (0, _range_1.default)("exclusiveRange");
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=exclusiveRange.js.map

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const regexp_1 = __importDefault(__webpack_require__(93));
const regexp = (ajv) => ajv.addKeyword((0, regexp_1.default)());
exports["default"] = regexp;
module.exports = regexp;
//# sourceMappingURL=regexp.js.map

/***/ }),
/* 93 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const _util_1 = __webpack_require__(94);
const regexpMetaSchema = {
    type: "object",
    properties: {
        pattern: { type: "string" },
        flags: { type: "string", nullable: true },
    },
    required: ["pattern"],
    additionalProperties: false,
};
const metaRegexp = /^\/(.*)\/([gimuy]*)$/;
function getDef() {
    return {
        keyword: "regexp",
        type: "string",
        schemaType: ["string", "object"],
        code(cxt) {
            const { data, schema } = cxt;
            const regx = getRegExp(schema);
            cxt.pass((0, codegen_1._) `${regx}.test(${data})`);
            function getRegExp(sch) {
                if (typeof sch == "object")
                    return (0, _util_1.usePattern)(cxt, sch.pattern, sch.flags);
                const rx = metaRegexp.exec(sch);
                if (rx)
                    return (0, _util_1.usePattern)(cxt, rx[1], rx[2]);
                throw new Error("cannot parse string into RegExp");
            }
        },
        metaSchema: {
            anyOf: [{ type: "string" }, regexpMetaSchema],
        },
    };
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=regexp.js.map

/***/ }),
/* 94 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.usePattern = exports.metaSchemaRef = void 0;
const codegen_1 = __webpack_require__(14);
const META_SCHEMA_ID = "http://json-schema.org/schema";
function metaSchemaRef({ defaultMeta } = {}) {
    return defaultMeta === false ? {} : { $ref: defaultMeta || META_SCHEMA_ID };
}
exports.metaSchemaRef = metaSchemaRef;
function usePattern({ gen, it: { opts } }, pattern, flags = opts.unicodeRegExp ? "u" : "") {
    const rx = new RegExp(pattern, flags);
    return gen.scopeValue("pattern", {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._) `new RegExp(${pattern}, ${flags})`,
    });
}
exports.usePattern = usePattern;
//# sourceMappingURL=_util.js.map

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const transform_1 = __importDefault(__webpack_require__(96));
const transform = (ajv) => ajv.addKeyword((0, transform_1.default)());
exports["default"] = transform;
module.exports = transform;
//# sourceMappingURL=transform.js.map

/***/ }),
/* 96 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const transform = {
    trimStart: (s) => s.trimStart(),
    trimEnd: (s) => s.trimEnd(),
    trimLeft: (s) => s.trimStart(),
    trimRight: (s) => s.trimEnd(),
    trim: (s) => s.trim(),
    toLowerCase: (s) => s.toLowerCase(),
    toUpperCase: (s) => s.toUpperCase(),
    toEnumCase: (s, cfg) => (cfg === null || cfg === void 0 ? void 0 : cfg.hash[configKey(s)]) || s,
};
const getDef = Object.assign(_getDef, { transform });
function _getDef() {
    return {
        keyword: "transform",
        schemaType: "array",
        before: "enum",
        code(cxt) {
            const { gen, data, schema, parentSchema, it } = cxt;
            const { parentData, parentDataProperty } = it;
            const tNames = schema;
            if (!tNames.length)
                return;
            let cfg;
            if (tNames.includes("toEnumCase")) {
                const config = getEnumCaseCfg(parentSchema);
                cfg = gen.scopeValue("obj", { ref: config, code: (0, codegen_1.stringify)(config) });
            }
            gen.if((0, codegen_1._) `typeof ${data} == "string" && ${parentData} !== undefined`, () => {
                gen.assign(data, transformExpr(tNames.slice()));
                gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, data);
            });
            function transformExpr(ts) {
                if (!ts.length)
                    return data;
                const t = ts.pop();
                if (!(t in transform))
                    throw new Error(`transform: unknown transformation ${t}`);
                const func = gen.scopeValue("func", {
                    ref: transform[t],
                    code: (0, codegen_1._) `require("ajv-keywords/dist/definitions/transform").transform${(0, codegen_1.getProperty)(t)}`,
                });
                const arg = transformExpr(ts);
                return cfg && t === "toEnumCase" ? (0, codegen_1._) `${func}(${arg}, ${cfg})` : (0, codegen_1._) `${func}(${arg})`;
            }
        },
        metaSchema: {
            type: "array",
            items: { type: "string", enum: Object.keys(transform) },
        },
    };
}
function getEnumCaseCfg(parentSchema) {
    // build hash table to enum values
    const cfg = { hash: {} };
    // requires `enum` in the same schema as transform
    if (!parentSchema.enum)
        throw new Error('transform: "toEnumCase" requires "enum"');
    for (const v of parentSchema.enum) {
        if (typeof v !== "string")
            continue;
        const k = configKey(v);
        // requires all `enum` values have unique keys
        if (cfg.hash[k]) {
            throw new Error('transform: "toEnumCase" requires all lowercased "enum" values to be unique');
        }
        cfg.hash[k] = v;
    }
    return cfg;
}
function configKey(s) {
    return s.toLowerCase();
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=transform.js.map

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const uniqueItemProperties_1 = __importDefault(__webpack_require__(98));
const uniqueItemProperties = (ajv) => ajv.addKeyword((0, uniqueItemProperties_1.default)());
exports["default"] = uniqueItemProperties;
module.exports = uniqueItemProperties;
//# sourceMappingURL=uniqueItemProperties.js.map

/***/ }),
/* 98 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const equal = __webpack_require__(27);
const SCALAR_TYPES = ["number", "integer", "string", "boolean", "null"];
function getDef() {
    return {
        keyword: "uniqueItemProperties",
        type: "array",
        schemaType: "array",
        compile(keys, parentSchema) {
            const scalar = getScalarKeys(keys, parentSchema);
            return (data) => {
                if (data.length <= 1)
                    return true;
                for (let k = 0; k < keys.length; k++) {
                    const key = keys[k];
                    if (scalar[k]) {
                        const hash = {};
                        for (const x of data) {
                            if (!x || typeof x != "object")
                                continue;
                            let p = x[key];
                            if (p && typeof p == "object")
                                continue;
                            if (typeof p == "string")
                                p = '"' + p;
                            if (hash[p])
                                return false;
                            hash[p] = true;
                        }
                    }
                    else {
                        for (let i = data.length; i--;) {
                            const x = data[i];
                            if (!x || typeof x != "object")
                                continue;
                            for (let j = i; j--;) {
                                const y = data[j];
                                if (y && typeof y == "object" && equal(x[key], y[key]))
                                    return false;
                            }
                        }
                    }
                }
                return true;
            };
        },
        metaSchema: {
            type: "array",
            items: { type: "string" },
        },
    };
}
exports["default"] = getDef;
function getScalarKeys(keys, schema) {
    return keys.map((key) => {
        var _a, _b, _c;
        const t = (_c = (_b = (_a = schema.items) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b[key]) === null || _c === void 0 ? void 0 : _c.type;
        return Array.isArray(t)
            ? !t.includes("object") && !t.includes("array")
            : SCALAR_TYPES.includes(t);
    });
}
module.exports = getDef;
//# sourceMappingURL=uniqueItemProperties.js.map

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const allRequired_1 = __importDefault(__webpack_require__(100));
const allRequired = (ajv) => ajv.addKeyword((0, allRequired_1.default)());
exports["default"] = allRequired;
module.exports = allRequired;
//# sourceMappingURL=allRequired.js.map

/***/ }),
/* 100 */
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function getDef() {
    return {
        keyword: "allRequired",
        type: "object",
        schemaType: "boolean",
        macro(schema, parentSchema) {
            if (!schema)
                return true;
            const required = Object.keys(parentSchema.properties);
            if (required.length === 0)
                return true;
            return { required };
        },
        dependencies: ["properties"],
    };
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=allRequired.js.map

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const anyRequired_1 = __importDefault(__webpack_require__(102));
const anyRequired = (ajv) => ajv.addKeyword((0, anyRequired_1.default)());
exports["default"] = anyRequired;
module.exports = anyRequired;
//# sourceMappingURL=anyRequired.js.map

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const _required_1 = __importDefault(__webpack_require__(103));
const getDef = (0, _required_1.default)("anyRequired");
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=anyRequired.js.map

/***/ }),
/* 103 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function getRequiredDef(keyword) {
    return () => ({
        keyword,
        type: "object",
        schemaType: "array",
        macro(schema) {
            if (schema.length === 0)
                return true;
            if (schema.length === 1)
                return { required: schema };
            const comb = keyword === "anyRequired" ? "anyOf" : "oneOf";
            return { [comb]: schema.map((p) => ({ required: [p] })) };
        },
        metaSchema: {
            type: "array",
            items: { type: "string" },
        },
    });
}
exports["default"] = getRequiredDef;
//# sourceMappingURL=_required.js.map

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const oneRequired_1 = __importDefault(__webpack_require__(105));
const oneRequired = (ajv) => ajv.addKeyword((0, oneRequired_1.default)());
exports["default"] = oneRequired;
module.exports = oneRequired;
//# sourceMappingURL=oneRequired.js.map

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const _required_1 = __importDefault(__webpack_require__(103));
const getDef = (0, _required_1.default)("oneRequired");
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=oneRequired.js.map

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const patternRequired_1 = __importDefault(__webpack_require__(107));
const patternRequired = (ajv) => ajv.addKeyword((0, patternRequired_1.default)());
exports["default"] = patternRequired;
module.exports = patternRequired;
//# sourceMappingURL=patternRequired.js.map

/***/ }),
/* 107 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const _util_1 = __webpack_require__(94);
const error = {
    message: ({ params: { missingPattern } }) => (0, codegen_1.str) `should have property matching pattern '${missingPattern}'`,
    params: ({ params: { missingPattern } }) => (0, codegen_1._) `{missingPattern: ${missingPattern}}`,
};
function getDef() {
    return {
        keyword: "patternRequired",
        type: "object",
        schemaType: "array",
        error,
        code(cxt) {
            const { gen, schema, data } = cxt;
            if (schema.length === 0)
                return;
            const valid = gen.let("valid", true);
            for (const pat of schema)
                validateProperties(pat);
            function validateProperties(pattern) {
                const matched = gen.let("matched", false);
                gen.forIn("key", data, (key) => {
                    gen.assign(matched, (0, codegen_1._) `${(0, _util_1.usePattern)(cxt, pattern)}.test(${key})`);
                    gen.if(matched, () => gen.break());
                });
                cxt.setParams({ missingPattern: pattern });
                gen.assign(valid, (0, codegen_1.and)(valid, matched));
                cxt.pass(valid);
            }
        },
        metaSchema: {
            type: "array",
            items: { type: "string", format: "regex" },
            uniqueItems: true,
        },
    };
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=patternRequired.js.map

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const prohibited_1 = __importDefault(__webpack_require__(109));
const prohibited = (ajv) => ajv.addKeyword((0, prohibited_1.default)());
exports["default"] = prohibited;
module.exports = prohibited;
//# sourceMappingURL=prohibited.js.map

/***/ }),
/* 109 */
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function getDef() {
    return {
        keyword: "prohibited",
        type: "object",
        schemaType: "array",
        macro: function (schema) {
            if (schema.length === 0)
                return true;
            if (schema.length === 1)
                return { not: { required: schema } };
            return { not: { anyOf: schema.map((p) => ({ required: [p] })) } };
        },
        metaSchema: {
            type: "array",
            items: { type: "string" },
        },
    };
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=prohibited.js.map

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const deepProperties_1 = __importDefault(__webpack_require__(111));
const deepProperties = (ajv, opts) => ajv.addKeyword((0, deepProperties_1.default)(opts));
exports["default"] = deepProperties;
module.exports = deepProperties;
//# sourceMappingURL=deepProperties.js.map

/***/ }),
/* 111 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const _util_1 = __webpack_require__(94);
function getDef(opts) {
    return {
        keyword: "deepProperties",
        type: "object",
        schemaType: "object",
        macro: function (schema) {
            const allOf = [];
            for (const pointer in schema)
                allOf.push(getSchema(pointer, schema[pointer]));
            return { allOf };
        },
        metaSchema: {
            type: "object",
            propertyNames: { type: "string", format: "json-pointer" },
            additionalProperties: (0, _util_1.metaSchemaRef)(opts),
        },
    };
}
exports["default"] = getDef;
function getSchema(jsonPointer, schema) {
    const segments = jsonPointer.split("/");
    const rootSchema = {};
    let pointerSchema = rootSchema;
    for (let i = 1; i < segments.length; i++) {
        let segment = segments[i];
        const isLast = i === segments.length - 1;
        segment = unescapeJsonPointer(segment);
        const properties = (pointerSchema.properties = {});
        let items;
        if (/[0-9]+/.test(segment)) {
            let count = +segment;
            items = pointerSchema.items = [];
            pointerSchema.type = ["object", "array"];
            while (count--)
                items.push({});
        }
        else {
            pointerSchema.type = "object";
        }
        pointerSchema = isLast ? schema : {};
        properties[segment] = pointerSchema;
        if (items)
            items.push(pointerSchema);
    }
    return rootSchema;
}
function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
module.exports = getDef;
//# sourceMappingURL=deepProperties.js.map

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const deepRequired_1 = __importDefault(__webpack_require__(113));
const deepRequired = (ajv) => ajv.addKeyword((0, deepRequired_1.default)());
exports["default"] = deepRequired;
module.exports = deepRequired;
//# sourceMappingURL=deepRequired.js.map

/***/ }),
/* 113 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
function getDef() {
    return {
        keyword: "deepRequired",
        type: "object",
        schemaType: "array",
        code(ctx) {
            const { schema, data } = ctx;
            const props = schema.map((jp) => (0, codegen_1._) `(${getData(jp)}) === undefined`);
            ctx.fail((0, codegen_1.or)(...props));
            function getData(jsonPointer) {
                if (jsonPointer === "")
                    throw new Error("empty JSON pointer not allowed");
                const segments = jsonPointer.split("/");
                let x = data;
                const xs = segments.map((s, i) => i ? (x = (0, codegen_1._) `${x}${(0, codegen_1.getProperty)(unescapeJPSegment(s))}`) : x);
                return (0, codegen_1.and)(...xs);
            }
        },
        metaSchema: {
            type: "array",
            items: { type: "string", format: "json-pointer" },
        },
    };
}
exports["default"] = getDef;
function unescapeJPSegment(s) {
    return s.replace(/~1/g, "/").replace(/~0/g, "~");
}
module.exports = getDef;
//# sourceMappingURL=deepRequired.js.map

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const dynamicDefaults_1 = __importDefault(__webpack_require__(115));
const dynamicDefaults = (ajv) => ajv.addKeyword((0, dynamicDefaults_1.default)());
exports["default"] = dynamicDefaults;
module.exports = dynamicDefaults;
//# sourceMappingURL=dynamicDefaults.js.map

/***/ }),
/* 115 */
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const sequences = {};
const DEFAULTS = {
    timestamp: () => () => Date.now(),
    datetime: () => () => new Date().toISOString(),
    date: () => () => new Date().toISOString().slice(0, 10),
    time: () => () => new Date().toISOString().slice(11),
    random: () => () => Math.random(),
    randomint: (args) => {
        var _a;
        const max = (_a = args === null || args === void 0 ? void 0 : args.max) !== null && _a !== void 0 ? _a : 2;
        return () => Math.floor(Math.random() * max);
    },
    seq: (args) => {
        var _a;
        const name = (_a = args === null || args === void 0 ? void 0 : args.name) !== null && _a !== void 0 ? _a : "";
        sequences[name] || (sequences[name] = 0);
        return () => sequences[name]++;
    },
};
const getDef = Object.assign(_getDef, { DEFAULTS });
function _getDef() {
    return {
        keyword: "dynamicDefaults",
        type: "object",
        schemaType: ["string", "object"],
        modifying: true,
        valid: true,
        compile(schema, _parentSchema, it) {
            if (!it.opts.useDefaults || it.compositeRule)
                return () => true;
            const fs = {};
            for (const key in schema)
                fs[key] = getDefault(schema[key]);
            const empty = it.opts.useDefaults === "empty";
            return (data) => {
                for (const prop in schema) {
                    if (data[prop] === undefined || (empty && (data[prop] === null || data[prop] === ""))) {
                        data[prop] = fs[prop]();
                    }
                }
                return true;
            };
        },
        metaSchema: {
            type: "object",
            additionalProperties: {
                anyOf: [
                    { type: "string" },
                    {
                        type: "object",
                        additionalProperties: false,
                        required: ["func", "args"],
                        properties: {
                            func: { type: "string" },
                            args: { type: "object" },
                        },
                    },
                ],
            },
        },
    };
}
function getDefault(d) {
    return typeof d == "object" ? getObjDefault(d) : getStrDefault(d);
}
function getObjDefault({ func, args }) {
    const def = DEFAULTS[func];
    assertDefined(func, def);
    return def(args);
}
function getStrDefault(d = "") {
    const def = DEFAULTS[d];
    assertDefined(d, def);
    return def();
}
function assertDefined(name, def) {
    if (!def)
        throw new Error(`invalid "dynamicDefaults" keyword property value: ${name}`);
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=dynamicDefaults.js.map

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const select_1 = __importDefault(__webpack_require__(117));
const select = (ajv, opts) => {
    (0, select_1.default)(opts).forEach((d) => ajv.addKeyword(d));
    return ajv;
};
exports["default"] = select;
module.exports = select;
//# sourceMappingURL=select.js.map

/***/ }),
/* 117 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(14);
const _util_1 = __webpack_require__(94);
const error = {
    message: ({ params: { schemaProp } }) => schemaProp
        ? (0, codegen_1.str) `should match case "${schemaProp}" schema`
        : (0, codegen_1.str) `should match default case schema`,
    params: ({ params: { schemaProp } }) => schemaProp ? (0, codegen_1._) `{failingCase: ${schemaProp}}` : (0, codegen_1._) `{failingDefault: true}`,
};
function getDef(opts) {
    const metaSchema = (0, _util_1.metaSchemaRef)(opts);
    return [
        {
            keyword: "select",
            schemaType: ["string", "number", "boolean", "null"],
            $data: true,
            error,
            dependencies: ["selectCases"],
            code(cxt) {
                const { gen, schemaCode, parentSchema } = cxt;
                cxt.block$data(codegen_1.nil, () => {
                    const valid = gen.let("valid", true);
                    const schValid = gen.name("_valid");
                    const value = gen.const("value", (0, codegen_1._) `${schemaCode} === null ? "null" : ${schemaCode}`);
                    gen.if(false); // optimizer should remove it from generated code
                    for (const schemaProp in parentSchema.selectCases) {
                        cxt.setParams({ schemaProp });
                        gen.elseIf((0, codegen_1._) `"" + ${value} == ${schemaProp}`); // intentional ==, to match numbers and booleans
                        const schCxt = cxt.subschema({ keyword: "selectCases", schemaProp }, schValid);
                        cxt.mergeEvaluated(schCxt, codegen_1.Name);
                        gen.assign(valid, schValid);
                    }
                    gen.else();
                    if (parentSchema.selectDefault !== undefined) {
                        cxt.setParams({ schemaProp: undefined });
                        const schCxt = cxt.subschema({ keyword: "selectDefault" }, schValid);
                        cxt.mergeEvaluated(schCxt, codegen_1.Name);
                        gen.assign(valid, schValid);
                    }
                    gen.endIf();
                    cxt.pass(valid);
                });
            },
        },
        {
            keyword: "selectCases",
            dependencies: ["select"],
            metaSchema: {
                type: "object",
                additionalProperties: metaSchema,
            },
        },
        {
            keyword: "selectDefault",
            dependencies: ["select", "selectCases"],
            metaSchema,
        },
    ];
}
exports["default"] = getDef;
module.exports = getDef;
//# sourceMappingURL=select.js.map

/***/ }),
/* 118 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const ajv_1 = __webpack_require__(9);
const codegen_1 = __webpack_require__(14);
const code_1 = __webpack_require__(15);
const validate_1 = __webpack_require__(11);
const errors_1 = __webpack_require__(13);
const names_1 = __webpack_require__(18);
const keyword = "errorMessage";
const used = new ajv_1.Name("emUsed");
const KEYWORD_PROPERTY_PARAMS = {
    required: "missingProperty",
    dependencies: "property",
    dependentRequired: "property",
};
const INTERPOLATION = /\$\{[^}]+\}/;
const INTERPOLATION_REPLACE = /\$\{([^}]+)\}/g;
const EMPTY_STR = /^""\s*\+\s*|\s*\+\s*""$/g;
function errorMessage(options) {
    return {
        keyword,
        schemaType: ["string", "object"],
        post: true,
        code(cxt) {
            const { gen, data, schema, schemaValue, it } = cxt;
            if (it.createErrors === false)
                return;
            const sch = schema;
            const instancePath = codegen_1.strConcat(names_1.default.instancePath, it.errorPath);
            gen.if(ajv_1._ `${names_1.default.errors} > 0`, () => {
                if (typeof sch == "object") {
                    const [kwdPropErrors, kwdErrors] = keywordErrorsConfig(sch);
                    if (kwdErrors)
                        processKeywordErrors(kwdErrors);
                    if (kwdPropErrors)
                        processKeywordPropErrors(kwdPropErrors);
                    processChildErrors(childErrorsConfig(sch));
                }
                const schMessage = typeof sch == "string" ? sch : sch._;
                if (schMessage)
                    processAllErrors(schMessage);
                if (!options.keepErrors)
                    removeUsedErrors();
            });
            function childErrorsConfig({ properties, items }) {
                const errors = {};
                if (properties) {
                    errors.props = {};
                    for (const p in properties)
                        errors.props[p] = [];
                }
                if (items) {
                    errors.items = {};
                    for (let i = 0; i < items.length; i++)
                        errors.items[i] = [];
                }
                return errors;
            }
            function keywordErrorsConfig(emSchema) {
                let propErrors;
                let errors;
                for (const k in emSchema) {
                    if (k === "properties" || k === "items")
                        continue;
                    const kwdSch = emSchema[k];
                    if (typeof kwdSch == "object") {
                        propErrors || (propErrors = {});
                        const errMap = (propErrors[k] = {});
                        for (const p in kwdSch)
                            errMap[p] = [];
                    }
                    else {
                        errors || (errors = {});
                        errors[k] = [];
                    }
                }
                return [propErrors, errors];
            }
            function processKeywordErrors(kwdErrors) {
                const kwdErrs = gen.const("emErrors", ajv_1.stringify(kwdErrors));
                const templates = gen.const("templates", getTemplatesCode(kwdErrors, schema));
                gen.forOf("err", names_1.default.vErrors, (err) => gen.if(matchKeywordError(err, kwdErrs), () => gen.code(ajv_1._ `${kwdErrs}[${err}.keyword].push(${err})`).assign(ajv_1._ `${err}.${used}`, true)));
                const { singleError } = options;
                if (singleError) {
                    const message = gen.let("message", ajv_1._ `""`);
                    const paramsErrors = gen.let("paramsErrors", ajv_1._ `[]`);
                    loopErrors((key) => {
                        gen.if(message, () => gen.code(ajv_1._ `${message} += ${typeof singleError == "string" ? singleError : ";"}`));
                        gen.code(ajv_1._ `${message} += ${errMessage(key)}`);
                        gen.assign(paramsErrors, ajv_1._ `${paramsErrors}.concat(${kwdErrs}[${key}])`);
                    });
                    errors_1.reportError(cxt, { message, params: ajv_1._ `{errors: ${paramsErrors}}` });
                }
                else {
                    loopErrors((key) => errors_1.reportError(cxt, {
                        message: errMessage(key),
                        params: ajv_1._ `{errors: ${kwdErrs}[${key}]}`,
                    }));
                }
                function loopErrors(body) {
                    gen.forIn("key", kwdErrs, (key) => gen.if(ajv_1._ `${kwdErrs}[${key}].length`, () => body(key)));
                }
                function errMessage(key) {
                    return ajv_1._ `${key} in ${templates} ? ${templates}[${key}]() : ${schemaValue}[${key}]`;
                }
            }
            function processKeywordPropErrors(kwdPropErrors) {
                const kwdErrs = gen.const("emErrors", ajv_1.stringify(kwdPropErrors));
                const templatesCode = [];
                for (const k in kwdPropErrors) {
                    templatesCode.push([
                        k,
                        getTemplatesCode(kwdPropErrors[k], schema[k]),
                    ]);
                }
                const templates = gen.const("templates", gen.object(...templatesCode));
                const kwdPropParams = gen.scopeValue("obj", {
                    ref: KEYWORD_PROPERTY_PARAMS,
                    code: ajv_1.stringify(KEYWORD_PROPERTY_PARAMS),
                });
                const propParam = gen.let("emPropParams");
                const paramsErrors = gen.let("emParamsErrors");
                gen.forOf("err", names_1.default.vErrors, (err) => gen.if(matchKeywordError(err, kwdErrs), () => {
                    gen.assign(propParam, ajv_1._ `${kwdPropParams}[${err}.keyword]`);
                    gen.assign(paramsErrors, ajv_1._ `${kwdErrs}[${err}.keyword][${err}.params[${propParam}]]`);
                    gen.if(paramsErrors, () => gen.code(ajv_1._ `${paramsErrors}.push(${err})`).assign(ajv_1._ `${err}.${used}`, true));
                }));
                gen.forIn("key", kwdErrs, (key) => gen.forIn("keyProp", ajv_1._ `${kwdErrs}[${key}]`, (keyProp) => {
                    gen.assign(paramsErrors, ajv_1._ `${kwdErrs}[${key}][${keyProp}]`);
                    gen.if(ajv_1._ `${paramsErrors}.length`, () => {
                        const tmpl = gen.const("tmpl", ajv_1._ `${templates}[${key}] && ${templates}[${key}][${keyProp}]`);
                        errors_1.reportError(cxt, {
                            message: ajv_1._ `${tmpl} ? ${tmpl}() : ${schemaValue}[${key}][${keyProp}]`,
                            params: ajv_1._ `{errors: ${paramsErrors}}`,
                        });
                    });
                }));
            }
            function processChildErrors(childErrors) {
                const { props, items } = childErrors;
                if (!props && !items)
                    return;
                const isObj = ajv_1._ `typeof ${data} == "object"`;
                const isArr = ajv_1._ `Array.isArray(${data})`;
                const childErrs = gen.let("emErrors");
                let childKwd;
                let childProp;
                const templates = gen.let("templates");
                if (props && items) {
                    childKwd = gen.let("emChildKwd");
                    gen.if(isObj);
                    gen.if(isArr, () => {
                        init(items, schema.items);
                        gen.assign(childKwd, ajv_1.str `items`);
                    }, () => {
                        init(props, schema.properties);
                        gen.assign(childKwd, ajv_1.str `properties`);
                    });
                    childProp = ajv_1._ `[${childKwd}]`;
                }
                else if (items) {
                    gen.if(isArr);
                    init(items, schema.items);
                    childProp = ajv_1._ `.items`;
                }
                else if (props) {
                    gen.if(codegen_1.and(isObj, codegen_1.not(isArr)));
                    init(props, schema.properties);
                    childProp = ajv_1._ `.properties`;
                }
                gen.forOf("err", names_1.default.vErrors, (err) => ifMatchesChildError(err, childErrs, (child) => gen.code(ajv_1._ `${childErrs}[${child}].push(${err})`).assign(ajv_1._ `${err}.${used}`, true)));
                gen.forIn("key", childErrs, (key) => gen.if(ajv_1._ `${childErrs}[${key}].length`, () => {
                    errors_1.reportError(cxt, {
                        message: ajv_1._ `${key} in ${templates} ? ${templates}[${key}]() : ${schemaValue}${childProp}[${key}]`,
                        params: ajv_1._ `{errors: ${childErrs}[${key}]}`,
                    });
                    gen.assign(ajv_1._ `${names_1.default.vErrors}[${names_1.default.errors}-1].instancePath`, ajv_1._ `${instancePath} + "/" + ${key}.replace(/~/g, "~0").replace(/\\//g, "~1")`);
                }));
                gen.endIf();
                function init(children, msgs) {
                    gen.assign(childErrs, ajv_1.stringify(children));
                    gen.assign(templates, getTemplatesCode(children, msgs));
                }
            }
            function processAllErrors(schMessage) {
                const errs = gen.const("emErrs", ajv_1._ `[]`);
                gen.forOf("err", names_1.default.vErrors, (err) => gen.if(matchAnyError(err), () => gen.code(ajv_1._ `${errs}.push(${err})`).assign(ajv_1._ `${err}.${used}`, true)));
                gen.if(ajv_1._ `${errs}.length`, () => errors_1.reportError(cxt, {
                    message: templateExpr(schMessage),
                    params: ajv_1._ `{errors: ${errs}}`,
                }));
            }
            function removeUsedErrors() {
                const errs = gen.const("emErrs", ajv_1._ `[]`);
                gen.forOf("err", names_1.default.vErrors, (err) => gen.if(ajv_1._ `!${err}.${used}`, () => gen.code(ajv_1._ `${errs}.push(${err})`)));
                gen.assign(names_1.default.vErrors, errs).assign(names_1.default.errors, ajv_1._ `${errs}.length`);
            }
            function matchKeywordError(err, kwdErrs) {
                return codegen_1.and(ajv_1._ `${err}.keyword !== ${keyword}`, ajv_1._ `!${err}.${used}`, ajv_1._ `${err}.instancePath === ${instancePath}`, ajv_1._ `${err}.keyword in ${kwdErrs}`, 
                // TODO match the end of the string?
                ajv_1._ `${err}.schemaPath.indexOf(${it.errSchemaPath}) === 0`, ajv_1._ `/^\\/[^\\/]*$/.test(${err}.schemaPath.slice(${it.errSchemaPath.length}))`);
            }
            function ifMatchesChildError(err, childErrs, thenBody) {
                gen.if(codegen_1.and(ajv_1._ `${err}.keyword !== ${keyword}`, ajv_1._ `!${err}.${used}`, ajv_1._ `${err}.instancePath.indexOf(${instancePath}) === 0`), () => {
                    const childRegex = gen.scopeValue("pattern", {
                        ref: /^\/([^/]*)(?:\/|$)/,
                        code: ajv_1._ `new RegExp("^\\\/([^/]*)(?:\\\/|$)")`,
                    });
                    const matches = gen.const("emMatches", ajv_1._ `${childRegex}.exec(${err}.instancePath.slice(${instancePath}.length))`);
                    const child = gen.const("emChild", ajv_1._ `${matches} && ${matches}[1].replace(/~1/g, "/").replace(/~0/g, "~")`);
                    gen.if(ajv_1._ `${child} !== undefined && ${child} in ${childErrs}`, () => thenBody(child));
                });
            }
            function matchAnyError(err) {
                return codegen_1.and(ajv_1._ `${err}.keyword !== ${keyword}`, ajv_1._ `!${err}.${used}`, codegen_1.or(ajv_1._ `${err}.instancePath === ${instancePath}`, codegen_1.and(ajv_1._ `${err}.instancePath.indexOf(${instancePath}) === 0`, ajv_1._ `${err}.instancePath[${instancePath}.length] === "/"`)), ajv_1._ `${err}.schemaPath.indexOf(${it.errSchemaPath}) === 0`, ajv_1._ `${err}.schemaPath[${it.errSchemaPath}.length] === "/"`);
            }
            function getTemplatesCode(keys, msgs) {
                const templatesCode = [];
                for (const k in keys) {
                    const msg = msgs[k];
                    if (INTERPOLATION.test(msg))
                        templatesCode.push([k, templateFunc(msg)]);
                }
                return gen.object(...templatesCode);
            }
            function templateExpr(msg) {
                if (!INTERPOLATION.test(msg))
                    return ajv_1.stringify(msg);
                return new code_1._Code(code_1.safeStringify(msg)
                    .replace(INTERPOLATION_REPLACE, (_s, ptr) => `" + JSON.stringify(${validate_1.getData(ptr, it)}) + "`)
                    .replace(EMPTY_STR, ""));
            }
            function templateFunc(msg) {
                return ajv_1._ `function(){return ${templateExpr(msg)}}`;
            }
        },
        metaSchema: {
            anyOf: [
                { type: "string" },
                {
                    type: "object",
                    properties: {
                        properties: { $ref: "#/$defs/stringMap" },
                        items: { $ref: "#/$defs/stringList" },
                        required: { $ref: "#/$defs/stringOrMap" },
                        dependencies: { $ref: "#/$defs/stringOrMap" },
                    },
                    additionalProperties: { type: "string" },
                },
            ],
            $defs: {
                stringMap: {
                    type: "object",
                    additionalProperties: { type: "string" },
                },
                stringOrMap: {
                    anyOf: [{ type: "string" }, { $ref: "#/$defs/stringMap" }],
                },
                stringList: { type: "array", items: { type: "string" } },
            },
        },
    };
}
const ajvErrors = (ajv, options = {}) => {
    if (!ajv.opts.allErrors)
        throw new Error("ajv-errors: Ajv option allErrors must be true");
    if (ajv.opts.jsPropertySyntax) {
        throw new Error("ajv-errors: ajv option jsPropertySyntax is not supported");
    }
    return ajv.addKeyword(errorMessage(options));
};
exports["default"] = ajvErrors;
module.exports = ajvErrors;
module.exports["default"] = ajvErrors;
//# sourceMappingURL=index.js.map

/***/ }),
/* 119 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.version = exports.validate = exports.v7 = exports.v6ToV1 = exports.v6 = exports.v5 = exports.v4 = exports.v3 = exports.v1ToV6 = exports.v1 = exports.stringify = exports.parse = exports.NIL = exports.MAX = void 0;
var max_js_1 = __webpack_require__(120);
Object.defineProperty(exports, "MAX", ({ enumerable: true, get: function () { return max_js_1.default; } }));
var nil_js_1 = __webpack_require__(121);
Object.defineProperty(exports, "NIL", ({ enumerable: true, get: function () { return nil_js_1.default; } }));
var parse_js_1 = __webpack_require__(122);
Object.defineProperty(exports, "parse", ({ enumerable: true, get: function () { return parse_js_1.default; } }));
var stringify_js_1 = __webpack_require__(125);
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return stringify_js_1.default; } }));
var v1_js_1 = __webpack_require__(126);
Object.defineProperty(exports, "v1", ({ enumerable: true, get: function () { return v1_js_1.default; } }));
var v1ToV6_js_1 = __webpack_require__(129);
Object.defineProperty(exports, "v1ToV6", ({ enumerable: true, get: function () { return v1ToV6_js_1.default; } }));
var v3_js_1 = __webpack_require__(130);
Object.defineProperty(exports, "v3", ({ enumerable: true, get: function () { return v3_js_1.default; } }));
var v4_js_1 = __webpack_require__(133);
Object.defineProperty(exports, "v4", ({ enumerable: true, get: function () { return v4_js_1.default; } }));
var v5_js_1 = __webpack_require__(135);
Object.defineProperty(exports, "v5", ({ enumerable: true, get: function () { return v5_js_1.default; } }));
var v6_js_1 = __webpack_require__(137);
Object.defineProperty(exports, "v6", ({ enumerable: true, get: function () { return v6_js_1.default; } }));
var v6ToV1_js_1 = __webpack_require__(138);
Object.defineProperty(exports, "v6ToV1", ({ enumerable: true, get: function () { return v6ToV1_js_1.default; } }));
var v7_js_1 = __webpack_require__(139);
Object.defineProperty(exports, "v7", ({ enumerable: true, get: function () { return v7_js_1.default; } }));
var validate_js_1 = __webpack_require__(123);
Object.defineProperty(exports, "validate", ({ enumerable: true, get: function () { return validate_js_1.default; } }));
var version_js_1 = __webpack_require__(140);
Object.defineProperty(exports, "version", ({ enumerable: true, get: function () { return version_js_1.default; } }));


/***/ }),
/* 120 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = 'ffffffff-ffff-ffff-ffff-ffffffffffff';


/***/ }),
/* 121 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = '00000000-0000-0000-0000-000000000000';


/***/ }),
/* 122 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const validate_js_1 = __webpack_require__(123);
function parse(uuid) {
    if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError('Invalid UUID');
    }
    let v;
    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);
}
exports["default"] = parse;


/***/ }),
/* 123 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const regex_js_1 = __webpack_require__(124);
function validate(uuid) {
    return typeof uuid === 'string' && regex_js_1.default.test(uuid);
}
exports["default"] = validate;


/***/ }),
/* 124 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;


/***/ }),
/* 125 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unsafeStringify = void 0;
const validate_js_1 = __webpack_require__(123);
const byteToHex = [];
for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
    return (byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]).toLowerCase();
}
exports.unsafeStringify = unsafeStringify;
function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
}
exports["default"] = stringify;


/***/ }),
/* 126 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateV1State = void 0;
const rng_js_1 = __webpack_require__(127);
const stringify_js_1 = __webpack_require__(125);
const _state = {};
function v1(options, buf, offset) {
    let bytes;
    const isV6 = options?._v6 ?? false;
    if (options) {
        const optionsKeys = Object.keys(options);
        if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') {
            options = undefined;
        }
    }
    if (options) {
        bytes = v1Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);
    }
    else {
        const now = Date.now();
        const rnds = (0, rng_js_1.default)();
        updateV1State(_state, now, rnds);
        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);
    }
    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);
}
function updateV1State(state, now, rnds) {
    state.msecs ??= -Infinity;
    state.nsecs ??= 0;
    if (now === state.msecs) {
        state.nsecs++;
        if (state.nsecs >= 10000) {
            state.node = undefined;
            state.nsecs = 0;
        }
    }
    else if (now > state.msecs) {
        state.nsecs = 0;
    }
    else if (now < state.msecs) {
        state.node = undefined;
    }
    if (!state.node) {
        state.node = rnds.slice(10, 16);
        state.node[0] |= 0x01;
        state.clockseq = ((rnds[8] << 8) | rnds[9]) & 0x3fff;
    }
    state.msecs = now;
    return state;
}
exports.updateV1State = updateV1State;
function v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {
    if (rnds.length < 16) {
        throw new Error('Random bytes length must be >= 16');
    }
    if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
    }
    else {
        if (offset < 0 || offset + 16 > buf.length) {
            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
    }
    msecs ??= Date.now();
    nsecs ??= 0;
    clockseq ??= ((rnds[8] << 8) | rnds[9]) & 0x3fff;
    node ??= rnds.slice(10, 16);
    msecs += 12219292800000;
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    buf[offset++] = (tl >>> 24) & 0xff;
    buf[offset++] = (tl >>> 16) & 0xff;
    buf[offset++] = (tl >>> 8) & 0xff;
    buf[offset++] = tl & 0xff;
    const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;
    buf[offset++] = (tmh >>> 8) & 0xff;
    buf[offset++] = tmh & 0xff;
    buf[offset++] = ((tmh >>> 24) & 0xf) | 0x10;
    buf[offset++] = (tmh >>> 16) & 0xff;
    buf[offset++] = (clockseq >>> 8) | 0x80;
    buf[offset++] = clockseq & 0xff;
    for (let n = 0; n < 6; ++n) {
        buf[offset++] = node[n];
    }
    return buf;
}
exports["default"] = v1;


/***/ }),
/* 127 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const crypto_1 = __webpack_require__(128);
const rnds8Pool = new Uint8Array(256);
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        (0, crypto_1.randomFillSync)(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, (poolPtr += 16));
}
exports["default"] = rng;


/***/ }),
/* 128 */
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),
/* 129 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const parse_js_1 = __webpack_require__(122);
const stringify_js_1 = __webpack_require__(125);
function v1ToV6(uuid) {
    const v1Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;
    const v6Bytes = _v1ToV6(v1Bytes);
    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v6Bytes) : v6Bytes;
}
exports["default"] = v1ToV6;
function _v1ToV6(v1Bytes) {
    return Uint8Array.of(((v1Bytes[6] & 0x0f) << 4) | ((v1Bytes[7] >> 4) & 0x0f), ((v1Bytes[7] & 0x0f) << 4) | ((v1Bytes[4] & 0xf0) >> 4), ((v1Bytes[4] & 0x0f) << 4) | ((v1Bytes[5] & 0xf0) >> 4), ((v1Bytes[5] & 0x0f) << 4) | ((v1Bytes[0] & 0xf0) >> 4), ((v1Bytes[0] & 0x0f) << 4) | ((v1Bytes[1] & 0xf0) >> 4), ((v1Bytes[1] & 0x0f) << 4) | ((v1Bytes[2] & 0xf0) >> 4), 0x60 | (v1Bytes[2] & 0x0f), v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);
}


/***/ }),
/* 130 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.URL = exports.DNS = void 0;
const md5_js_1 = __webpack_require__(131);
const v35_js_1 = __webpack_require__(132);
var v35_js_2 = __webpack_require__(132);
Object.defineProperty(exports, "DNS", ({ enumerable: true, get: function () { return v35_js_2.DNS; } }));
Object.defineProperty(exports, "URL", ({ enumerable: true, get: function () { return v35_js_2.URL; } }));
function v3(value, namespace, buf, offset) {
    return (0, v35_js_1.default)(0x30, md5_js_1.default, value, namespace, buf, offset);
}
v3.DNS = v35_js_1.DNS;
v3.URL = v35_js_1.URL;
exports["default"] = v3;


/***/ }),
/* 131 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const crypto_1 = __webpack_require__(128);
function md5(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    }
    else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
    }
    return (0, crypto_1.createHash)('md5').update(bytes).digest();
}
exports["default"] = md5;


/***/ }),
/* 132 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.URL = exports.DNS = exports.stringToBytes = void 0;
const parse_js_1 = __webpack_require__(122);
const stringify_js_1 = __webpack_require__(125);
function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = new Uint8Array(str.length);
    for (let i = 0; i < str.length; ++i) {
        bytes[i] = str.charCodeAt(i);
    }
    return bytes;
}
exports.stringToBytes = stringToBytes;
exports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(version, hash, value, namespace, buf, offset) {
    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;
    const namespaceBytes = typeof namespace === 'string' ? (0, parse_js_1.default)(namespace) : namespace;
    if (typeof namespace === 'string') {
        namespace = (0, parse_js_1.default)(namespace);
    }
    if (namespace?.length !== 16) {
        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    }
    let bytes = new Uint8Array(16 + valueBytes.length);
    bytes.set(namespaceBytes);
    bytes.set(valueBytes, namespaceBytes.length);
    bytes = hash(bytes);
    bytes[6] = (bytes[6] & 0x0f) | version;
    bytes[8] = (bytes[8] & 0x3f) | 0x80;
    if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
        }
        return buf;
    }
    return (0, stringify_js_1.unsafeStringify)(bytes);
}
exports["default"] = v35;


/***/ }),
/* 133 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const native_js_1 = __webpack_require__(134);
const rng_js_1 = __webpack_require__(127);
const stringify_js_1 = __webpack_require__(125);
function v4(options, buf, offset) {
    if (native_js_1.default.randomUUID && !buf && !options) {
        return native_js_1.default.randomUUID();
    }
    options = options || {};
    const rnds = options.random ?? options.rng?.() ?? (0, rng_js_1.default)();
    if (rnds.length < 16) {
        throw new Error('Random bytes length must be >= 16');
    }
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;
    if (buf) {
        offset = offset || 0;
        if (offset < 0 || offset + 16 > buf.length) {
            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
        for (let i = 0; i < 16; ++i) {
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return (0, stringify_js_1.unsafeStringify)(rnds);
}
exports["default"] = v4;


/***/ }),
/* 134 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const crypto_1 = __webpack_require__(128);
exports["default"] = { randomUUID: crypto_1.randomUUID };


/***/ }),
/* 135 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.URL = exports.DNS = void 0;
const sha1_js_1 = __webpack_require__(136);
const v35_js_1 = __webpack_require__(132);
var v35_js_2 = __webpack_require__(132);
Object.defineProperty(exports, "DNS", ({ enumerable: true, get: function () { return v35_js_2.DNS; } }));
Object.defineProperty(exports, "URL", ({ enumerable: true, get: function () { return v35_js_2.URL; } }));
function v5(value, namespace, buf, offset) {
    return (0, v35_js_1.default)(0x50, sha1_js_1.default, value, namespace, buf, offset);
}
v5.DNS = v35_js_1.DNS;
v5.URL = v35_js_1.URL;
exports["default"] = v5;


/***/ }),
/* 136 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const crypto_1 = __webpack_require__(128);
function sha1(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    }
    else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
    }
    return (0, crypto_1.createHash)('sha1').update(bytes).digest();
}
exports["default"] = sha1;


/***/ }),
/* 137 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const stringify_js_1 = __webpack_require__(125);
const v1_js_1 = __webpack_require__(126);
const v1ToV6_js_1 = __webpack_require__(129);
function v6(options, buf, offset) {
    options ??= {};
    offset ??= 0;
    let bytes = (0, v1_js_1.default)({ ...options, _v6: true }, new Uint8Array(16));
    bytes = (0, v1ToV6_js_1.default)(bytes);
    if (buf) {
        for (let i = 0; i < 16; i++) {
            buf[offset + i] = bytes[i];
        }
        return buf;
    }
    return (0, stringify_js_1.unsafeStringify)(bytes);
}
exports["default"] = v6;


/***/ }),
/* 138 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const parse_js_1 = __webpack_require__(122);
const stringify_js_1 = __webpack_require__(125);
function v6ToV1(uuid) {
    const v6Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;
    const v1Bytes = _v6ToV1(v6Bytes);
    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v1Bytes) : v1Bytes;
}
exports["default"] = v6ToV1;
function _v6ToV1(v6Bytes) {
    return Uint8Array.of(((v6Bytes[3] & 0x0f) << 4) | ((v6Bytes[4] >> 4) & 0x0f), ((v6Bytes[4] & 0x0f) << 4) | ((v6Bytes[5] & 0xf0) >> 4), ((v6Bytes[5] & 0x0f) << 4) | (v6Bytes[6] & 0x0f), v6Bytes[7], ((v6Bytes[1] & 0x0f) << 4) | ((v6Bytes[2] & 0xf0) >> 4), ((v6Bytes[2] & 0x0f) << 4) | ((v6Bytes[3] & 0xf0) >> 4), 0x10 | ((v6Bytes[0] & 0xf0) >> 4), ((v6Bytes[0] & 0x0f) << 4) | ((v6Bytes[1] & 0xf0) >> 4), v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);
}


/***/ }),
/* 139 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateV7State = void 0;
const rng_js_1 = __webpack_require__(127);
const stringify_js_1 = __webpack_require__(125);
const _state = {};
function v7(options, buf, offset) {
    let bytes;
    if (options) {
        bytes = v7Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.seq, buf, offset);
    }
    else {
        const now = Date.now();
        const rnds = (0, rng_js_1.default)();
        updateV7State(_state, now, rnds);
        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);
    }
    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);
}
function updateV7State(state, now, rnds) {
    state.msecs ??= -Infinity;
    state.seq ??= 0;
    if (now > state.msecs) {
        state.seq = (rnds[6] << 23) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];
        state.msecs = now;
    }
    else {
        state.seq = (state.seq + 1) | 0;
        if (state.seq === 0) {
            state.msecs++;
        }
    }
    return state;
}
exports.updateV7State = updateV7State;
function v7Bytes(rnds, msecs, seq, buf, offset = 0) {
    if (rnds.length < 16) {
        throw new Error('Random bytes length must be >= 16');
    }
    if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
    }
    else {
        if (offset < 0 || offset + 16 > buf.length) {
            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
    }
    msecs ??= Date.now();
    seq ??= ((rnds[6] * 0x7f) << 24) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];
    buf[offset++] = (msecs / 0x10000000000) & 0xff;
    buf[offset++] = (msecs / 0x100000000) & 0xff;
    buf[offset++] = (msecs / 0x1000000) & 0xff;
    buf[offset++] = (msecs / 0x10000) & 0xff;
    buf[offset++] = (msecs / 0x100) & 0xff;
    buf[offset++] = msecs & 0xff;
    buf[offset++] = 0x70 | ((seq >>> 28) & 0x0f);
    buf[offset++] = (seq >>> 20) & 0xff;
    buf[offset++] = 0x80 | ((seq >>> 14) & 0x3f);
    buf[offset++] = (seq >>> 6) & 0xff;
    buf[offset++] = ((seq << 2) & 0xff) | (rnds[10] & 0x03);
    buf[offset++] = rnds[11];
    buf[offset++] = rnds[12];
    buf[offset++] = rnds[13];
    buf[offset++] = rnds[14];
    buf[offset++] = rnds[15];
    return buf;
}
exports["default"] = v7;


/***/ }),
/* 140 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const validate_js_1 = __webpack_require__(123);
function version(uuid) {
    if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError('Invalid UUID');
    }
    return parseInt(uuid.slice(14, 15), 16);
}
exports["default"] = version;


/***/ }),
/* 141 */
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
const fs = __webpack_require__(142);
const path = __webpack_require__(143);
const { validate } = __webpack_require__(8);

exports.resolvePaths = resolvePaths;

/**
 * Recursively resolves all relative path properties in a configuration or specification object to absolute paths.
 *
 * Traverses the provided object, converting all recognized path-related properties to absolute paths using the given configuration and reference file path. Supports nested objects and distinguishes between config and spec objects based on schema validation. Throws an error if the object is not a valid config or spec, or if the object type is missing for nested objects.
 *
 * @async
 * @param {Object} options - Options for path resolution.
 * @param {Object} options.config - Configuration object containing settings such as `relativePathBase`.
 * @param {Object} options.object - The config or spec object whose path properties will be resolved.
 * @param {string} options.filePath - Reference file path used for resolving relative paths.
 * @param {boolean} [options.nested=false] - Indicates if this is a recursive call for a nested object.
 * @param {string} [options.objectType] - Specifies the object type ('config' or 'spec'); required for nested objects.
 * @returns {Promise<Object>} The object with all applicable path properties resolved to absolute paths.
 * @throws {Error} If the object is neither a valid config nor spec, or if `objectType` is missing for nested objects.
 */
async function resolvePaths({
  config,
  object,
  filePath,
  nested = false,
  objectType,
}) {
  // Config properties that contain paths
  const configPaths = [
    "input",
    "output",
    "loadVariables",
    "setup",
    "cleanup",
    "configPath",
    "beforeAny",
    "afterAll",
    "mediaDirectory",
    "downloadDirectory",
    "descriptionPath",
    "path",
  ];
  // Spec properties that contain paths
  const specPaths = [
    "file",
    "path",
    "directory",
    "before",
    "after",
    "loadVariables",
    "setup",
    "cleanup",
    "savePath",
    "saveDirectory",
    "specPath",
    "descriptionPath",
    "workingDirectory",
  ];
  // Spec objects that are configurable by the user and shouldn't be resolved
  const specNoResolve = [
    "requestData",
    "responseData",
    "requestHeaders",
    "responseHeaders",
    "requestParams",
    "responseParams",
  ];

  /**
   * Resolves a relative path to an absolute path using a specified base type and reference file path.
   *
   * @param {string} baseType - Indicates whether to resolve relative to the reference file's directory ("file") or the current working directory ("cwd").
   * @param {string} relativePath - The path to resolve, which may be relative or absolute.
   * @param {string} filePath - The reference file or directory path used for resolution.
   * @returns {string} The absolute path corresponding to {@link relativePath}.
   *
   * @remark If {@link relativePath} is already absolute, it is returned unchanged. If {@link filePath} does not exist, its extension is used to infer whether it is a file or directory.
   */
  function resolve(baseType, relativePath, filePath) {
    // If path is already absolute, return it
    if (path.isAbsolute(relativePath)) {
      return relativePath;
    }

    // Check if filePath exists and is a file
    const fileExists = fs.existsSync(filePath);
    const isFile = fileExists
      ? fs.lstatSync(filePath).isFile()
      : path.parse(filePath).ext !== "";

    // Use directory of filePath if it's a file (or looks like one)
    const basePath = isFile ? path.dirname(filePath) : filePath;

    // Resolve the path based on the base type
    return baseType === "file"
      ? path.resolve(basePath, relativePath)
      : path.resolve(relativePath);
  }

  const relativePathBase = config.relativePathBase;

  let pathProperties;
  if (!nested && !objectType) {
    // Check if object matches the config schema
    const validation = validate({
      schemaKey: "config_v3",
      object: { ...object },
    });
    if (validation.valid) {
      pathProperties = configPaths;
      objectType = "config";
    } else {
      // Check if object matches the spec schema
      const validation = validate({
        schemaKey: "spec_v3",
        object: { ...object },
      });
      if (validation.valid) {
        pathProperties = specPaths;
        objectType = "spec";
      } else {
        throw new Error("Object isn't a valid config or spec.");
      }
    }
  } else if (nested && !objectType) {
    // If the object is nested, the object type is required
    throw new Error("Object type is required for nested objects.");
  } else if (objectType === "config") {
    // If the object type is config, use configPaths
    pathProperties = configPaths;
  } else if (objectType === "spec") {
    // If the object type is spec, use specPaths
    pathProperties = specPaths;
  }

  for (const property of Object.keys(object)) {
    // If the property is an array, recursively call resolvePaths for each item in the array
    if (Array.isArray(object[property])) {
      for (let i = 0; i < object[property].length; i++) {
        const item = object[property][i];

        // If the item is an object, recursively call resolvePaths to resolve paths within the object
        if (typeof item === "object") {
          await resolvePaths({
            config: config,
            object: item,
            filePath: filePath,
            nested: true,
            objectType: objectType,
          });
        } else if (
          typeof item === "string" &&
          pathProperties.includes(property)
        ) {
          // Resolve the string path and write it back into the array
          const resolved =
            property === "path" &&
            object.directory &&
            path.isAbsolute(object.directory)
              ? resolve(relativePathBase, item, object.directory)
              : resolve(relativePathBase, item, filePath);
          object[property][i] = resolved;
        }
      }
    }
    // If the property is an object, recursively call resolvePaths to resolve paths within the object
    else if (
      typeof object[property] === "object" &&
      ((objectType === "spec" && !specNoResolve.includes(property)) ||
        objectType === "config")
    ) {
      // If the property is an object, recursively call resolvePaths to resolve paths within the object
      object[property] = await resolvePaths({
        config: config,
        object: object[property],
        filePath: filePath,
        nested: true,
        objectType: objectType,
      });
    } else if (typeof object[property] === "string") {
      // If the property begins with "https://" or "http://", skip it
      if (
        object[property].startsWith("https://") ||
        object[property].startsWith("http://")
      ) {
        continue;
      }
      // Check if it matches any of the path properties and resolve it if it does
      if (pathProperties.includes(property)) {
        if (property === "path" && object.directory) {
          const directory = path.isAbsolute(object.directory)
            ? object.directory
            : resolve(relativePathBase, object.directory, filePath);
          object[property] = resolve(
            relativePathBase,
            object[property],
            directory
          );
        } else {
          object[property] = resolve(
            relativePathBase,
            object[property],
            filePath
          );
        }
      }
    }
  }
  return object;
}

// If called directly, resolve paths in the provided object
if (__webpack_require__.c[__webpack_require__.s] === module) {
  (async () => {
    // Example usage
    const config = {
      relativePathBase: "file",
    };
    const object = {
      tests: [
        {
          steps: [
            {
              screenshot: {
                path: "file.png",
                directory:
                  "/home/hawkeyexl/Workspaces/doc-detective-common/screenshots",
              },
            },
          ],
        },
      ],
    };
    const filePath = process.cwd();

    await resolvePaths({ config, object, filePath });
    console.log(JSON.stringify(object, null, 2));
  })();
}


/***/ }),
/* 142 */
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),
/* 143 */
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),
/* 144 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fs = __webpack_require__(142);
const YAML = __webpack_require__(145);
const axios = __webpack_require__(219);
const { URL } = __webpack_require__(227);

/**
 * Reads and parses content from a remote URL or local file path, supporting JSON and YAML formats.
 *
 * Attempts to parse the file content as JSON first, then YAML. If both parsing attempts fail, returns the raw content as a string. Returns `null` if the file cannot be read.
 *
 * @param {Object} options
 * @param {string} options.fileURLOrPath - The URL or local file path to read.
 * @returns {Promise<Object|string|null>} Parsed object for JSON or YAML files, raw string for other formats, or `null` if reading fails.
 *
 * @throws {Error} If {@link fileURLOrPath} is missing, not a string, or is an empty string.
 */
async function readFile({ fileURLOrPath }) {
  if (!fileURLOrPath) {
    throw new Error("fileURLOrPath is required");
  }
  if (typeof fileURLOrPath !== "string") {
    throw new Error("fileURLOrPath must be a string");
  }
  if (fileURLOrPath.trim() === "") {
    throw new Error("fileURLOrPath cannot be an empty string");
  }

  let content;
  let isRemote = false;

  try {
    const parsedURL = new URL(fileURLOrPath);
    isRemote =
      parsedURL.protocol === "http:" || parsedURL.protocol === "https:";
  } catch (error) {
    // Not a valid URL, assume local file path
  }

  if (isRemote) {
    try {
      const response = await axios.get(fileURLOrPath);
      content = response.data;
    } catch (error) {
      console.warn(
        `Error reading remote file from ${fileURLOrPath}: ${error.message}`
      );
      return null;
    }
  } else {
    try {
      content = await fs.promises.readFile(fileURLOrPath, "utf8");
    } catch (error) {
      if (error.code === "ENOENT") {
        console.warn(`File not found: ${fileURLOrPath}`);
      } else {
        console.warn(`Error reading file: ${error.message}`);
      }
      return null;
    }
  }

  // Parse based on file content, and return either object or string
  try {
    // Try to parse as JSON
    return JSON.parse(content);
  } catch (error) {
    try {
      // Try to parse as YAML
      return YAML.parse(content);
    } catch (error) {
      // Return raw content if not JSON or YAML
      return content;
    }
  }
}

module.exports = { readFile };


/***/ }),
/* 145 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var composer = __webpack_require__(146);
var Document = __webpack_require__(151);
var Schema = __webpack_require__(169);
var errors = __webpack_require__(195);
var Alias = __webpack_require__(152);
var identity = __webpack_require__(149);
var Pair = __webpack_require__(160);
var Scalar = __webpack_require__(159);
var YAMLMap = __webpack_require__(171);
var YAMLSeq = __webpack_require__(174);
var cst = __webpack_require__(211);
var lexer = __webpack_require__(215);
var lineCounter = __webpack_require__(216);
var parser = __webpack_require__(217);
var publicApi = __webpack_require__(218);
var visit = __webpack_require__(150);



exports.Composer = composer.Composer;
exports.Document = Document.Document;
exports.Schema = Schema.Schema;
exports.YAMLError = errors.YAMLError;
exports.YAMLParseError = errors.YAMLParseError;
exports.YAMLWarning = errors.YAMLWarning;
exports.Alias = Alias.Alias;
exports.isAlias = identity.isAlias;
exports.isCollection = identity.isCollection;
exports.isDocument = identity.isDocument;
exports.isMap = identity.isMap;
exports.isNode = identity.isNode;
exports.isPair = identity.isPair;
exports.isScalar = identity.isScalar;
exports.isSeq = identity.isSeq;
exports.Pair = Pair.Pair;
exports.Scalar = Scalar.Scalar;
exports.YAMLMap = YAMLMap.YAMLMap;
exports.YAMLSeq = YAMLSeq.YAMLSeq;
exports.CST = cst;
exports.Lexer = lexer.Lexer;
exports.LineCounter = lineCounter.LineCounter;
exports.Parser = parser.Parser;
exports.parse = publicApi.parse;
exports.parseAllDocuments = publicApi.parseAllDocuments;
exports.parseDocument = publicApi.parseDocument;
exports.stringify = publicApi.stringify;
exports.visit = visit.visit;
exports.visitAsync = visit.visitAsync;


/***/ }),
/* 146 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var node_process = __webpack_require__(147);
var directives = __webpack_require__(148);
var Document = __webpack_require__(151);
var errors = __webpack_require__(195);
var identity = __webpack_require__(149);
var composeDoc = __webpack_require__(196);
var resolveEnd = __webpack_require__(206);

function getErrorPos(src) {
    if (typeof src === 'number')
        return [src, src + 1];
    if (Array.isArray(src))
        return src.length === 2 ? src : [src[0], src[1]];
    const { offset, source } = src;
    return [offset, offset + (typeof source === 'string' ? source.length : 1)];
}
function parsePrelude(prelude) {
    let comment = '';
    let atComment = false;
    let afterEmptyLine = false;
    for (let i = 0; i < prelude.length; ++i) {
        const source = prelude[i];
        switch (source[0]) {
            case '#':
                comment +=
                    (comment === '' ? '' : afterEmptyLine ? '\n\n' : '\n') +
                        (source.substring(1) || ' ');
                atComment = true;
                afterEmptyLine = false;
                break;
            case '%':
                if (prelude[i + 1]?.[0] !== '#')
                    i += 1;
                atComment = false;
                break;
            default:
                // This may be wrong after doc-end, but in that case it doesn't matter
                if (!atComment)
                    afterEmptyLine = true;
                atComment = false;
        }
    }
    return { comment, afterEmptyLine };
}
/**
 * Compose a stream of CST nodes into a stream of YAML Documents.
 *
 * ```ts
 * import { Composer, Parser } from 'yaml'
 *
 * const src: string = ...
 * const tokens = new Parser().parse(src)
 * const docs = new Composer().compose(tokens)
 * ```
 */
class Composer {
    constructor(options = {}) {
        this.doc = null;
        this.atDirectives = false;
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
        this.onError = (source, code, message, warning) => {
            const pos = getErrorPos(source);
            if (warning)
                this.warnings.push(new errors.YAMLWarning(pos, code, message));
            else
                this.errors.push(new errors.YAMLParseError(pos, code, message));
        };
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        this.directives = new directives.Directives({ version: options.version || '1.2' });
        this.options = options;
    }
    decorate(doc, afterDoc) {
        const { comment, afterEmptyLine } = parsePrelude(this.prelude);
        //console.log({ dc: doc.comment, prelude, comment })
        if (comment) {
            const dc = doc.contents;
            if (afterDoc) {
                doc.comment = doc.comment ? `${doc.comment}\n${comment}` : comment;
            }
            else if (afterEmptyLine || doc.directives.docStart || !dc) {
                doc.commentBefore = comment;
            }
            else if (identity.isCollection(dc) && !dc.flow && dc.items.length > 0) {
                let it = dc.items[0];
                if (identity.isPair(it))
                    it = it.key;
                const cb = it.commentBefore;
                it.commentBefore = cb ? `${comment}\n${cb}` : comment;
            }
            else {
                const cb = dc.commentBefore;
                dc.commentBefore = cb ? `${comment}\n${cb}` : comment;
            }
        }
        if (afterDoc) {
            Array.prototype.push.apply(doc.errors, this.errors);
            Array.prototype.push.apply(doc.warnings, this.warnings);
        }
        else {
            doc.errors = this.errors;
            doc.warnings = this.warnings;
        }
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
    }
    /**
     * Current stream status information.
     *
     * Mostly useful at the end of input for an empty stream.
     */
    streamInfo() {
        return {
            comment: parsePrelude(this.prelude).comment,
            directives: this.directives,
            errors: this.errors,
            warnings: this.warnings
        };
    }
    /**
     * Compose tokens into documents.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)
            yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
    }
    /** Advance the composer by one CST token. */
    *next(token) {
        if (node_process.env.LOG_STREAM)
            console.dir(token, { depth: null });
        switch (token.type) {
            case 'directive':
                this.directives.add(token.source, (offset, message, warning) => {
                    const pos = getErrorPos(token);
                    pos[0] += offset;
                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
            case 'document': {
                const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
                if (this.atDirectives && !doc.directives.docStart)
                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');
                this.decorate(doc, false);
                if (this.doc)
                    yield this.doc;
                this.doc = doc;
                this.atDirectives = false;
                break;
            }
            case 'byte-order-mark':
            case 'space':
                break;
            case 'comment':
            case 'newline':
                this.prelude.push(token.source);
                break;
            case 'error': {
                const msg = token.source
                    ? `${token.message}: ${JSON.stringify(token.source)}`
                    : token.message;
                const error = new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);
                if (this.atDirectives || !this.doc)
                    this.errors.push(error);
                else
                    this.doc.errors.push(error);
                break;
            }
            case 'doc-end': {
                if (!this.doc) {
                    const msg = 'Unexpected doc-end without preceding document';
                    this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));
                    break;
                }
                this.doc.directives.docEnd = true;
                const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                this.decorate(this.doc, true);
                if (end.comment) {
                    const dc = this.doc.comment;
                    this.doc.comment = dc ? `${dc}\n${end.comment}` : end.comment;
                }
                this.doc.range[2] = end.offset;
                break;
            }
            default:
                this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));
        }
    }
    /**
     * Call at end of input to yield any remaining document.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
        }
        else if (forceDoc) {
            const opts = Object.assign({ _directives: this.directives }, this.options);
            const doc = new Document.Document(undefined, opts);
            if (this.atDirectives)
                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');
            doc.range = [0, endOffset, endOffset];
            this.decorate(doc, false);
            yield doc;
        }
    }
}

exports.Composer = Composer;


/***/ }),
/* 147 */
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),
/* 148 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var visit = __webpack_require__(150);

const escapeChars = {
    '!': '%21',
    ',': '%2C',
    '[': '%5B',
    ']': '%5D',
    '{': '%7B',
    '}': '%7D'
};
const escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, ch => escapeChars[ch]);
class Directives {
    constructor(yaml, tags) {
        /**
         * The directives-end/doc-start marker `---`. If `null`, a marker may still be
         * included in the document's stringified representation.
         */
        this.docStart = null;
        /** The doc-end marker `...`.  */
        this.docEnd = false;
        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
        const copy = new Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
     * During parsing, get a Directives instance for the current document and
     * update the stream state according to the current version's spec.
     */
    atDocument() {
        const res = new Directives(this.yaml, this.tags);
        switch (this.yaml.version) {
            case '1.1':
                this.atNextDocument = true;
                break;
            case '1.2':
                this.atNextDocument = false;
                this.yaml = {
                    explicit: Directives.defaultYaml.explicit,
                    version: '1.2'
                };
                this.tags = Object.assign({}, Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
     * @param onError - May be called even if the action was successful
     * @returns `true` on success
     */
    add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch (name) {
            case '%TAG': {
                if (parts.length !== 2) {
                    onError(0, '%TAG directive should contain exactly two parts');
                    if (parts.length < 2)
                        return false;
                }
                const [handle, prefix] = parts;
                this.tags[handle] = prefix;
                return true;
            }
            case '%YAML': {
                this.yaml.explicit = true;
                if (parts.length !== 1) {
                    onError(0, '%YAML directive should contain exactly one part');
                    return false;
                }
                const [version] = parts;
                if (version === '1.1' || version === '1.2') {
                    this.yaml.version = version;
                    return true;
                }
                else {
                    const isValid = /^\d+\.\d+$/.test(version);
                    onError(6, `Unsupported YAML version ${version}`, isValid);
                    return false;
                }
            }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
     * Resolves a tag, matching handles to those defined in %TAG directives.
     *
     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
     *   `'!local'` tag, or `null` if unresolvable.
     */
    tagName(source, onError) {
        if (source === '!')
            return '!'; // non-specific tag
        if (source[0] !== '!') {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === '<') {
            const verbatim = source.slice(2, -1);
            if (verbatim === '!' || verbatim === '!!') {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== '>')
                onError('Verbatim tags must end with a >');
            return verbatim;
        }
        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);
        if (!suffix)
            onError(`The ${source} tag has no suffix`);
        const prefix = this.tags[handle];
        if (prefix) {
            try {
                return prefix + decodeURIComponent(suffix);
            }
            catch (error) {
                onError(String(error));
                return null;
            }
        }
        if (handle === '!')
            return source; // local tag
        onError(`Could not resolve tag: ${source}`);
        return null;
    }
    /**
     * Given a fully resolved tag, returns its printable string form,
     * taking into account current tag prefixes and defaults.
     */
    tagString(tag) {
        for (const [handle, prefix] of Object.entries(this.tags)) {
            if (tag.startsWith(prefix))
                return handle + escapeTagName(tag.substring(prefix.length));
        }
        return tag[0] === '!' ? tag : `!<${tag}>`;
    }
    toString(doc) {
        const lines = this.yaml.explicit
            ? [`%YAML ${this.yaml.version || '1.2'}`]
            : [];
        const tagEntries = Object.entries(this.tags);
        let tagNames;
        if (doc && tagEntries.length > 0 && identity.isNode(doc.contents)) {
            const tags = {};
            visit.visit(doc.contents, (_key, node) => {
                if (identity.isNode(node) && node.tag)
                    tags[node.tag] = true;
            });
            tagNames = Object.keys(tags);
        }
        else
            tagNames = [];
        for (const [handle, prefix] of tagEntries) {
            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')
                continue;
            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))
                lines.push(`%TAG ${handle} ${prefix}`);
        }
        return lines.join('\n');
    }
}
Directives.defaultYaml = { explicit: false, version: '1.2' };
Directives.defaultTags = { '!!': 'tag:yaml.org,2002:' };

exports.Directives = Directives;


/***/ }),
/* 149 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


const ALIAS = Symbol.for('yaml.alias');
const DOC = Symbol.for('yaml.document');
const MAP = Symbol.for('yaml.map');
const PAIR = Symbol.for('yaml.pair');
const SCALAR = Symbol.for('yaml.scalar');
const SEQ = Symbol.for('yaml.seq');
const NODE_TYPE = Symbol.for('yaml.node.type');
const isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;
const isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;
const isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;
const isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;
const isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;
const isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;
function isCollection(node) {
    if (node && typeof node === 'object')
        switch (node[NODE_TYPE]) {
            case MAP:
            case SEQ:
                return true;
        }
    return false;
}
function isNode(node) {
    if (node && typeof node === 'object')
        switch (node[NODE_TYPE]) {
            case ALIAS:
            case MAP:
            case SCALAR:
            case SEQ:
                return true;
        }
    return false;
}
const hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;

exports.ALIAS = ALIAS;
exports.DOC = DOC;
exports.MAP = MAP;
exports.NODE_TYPE = NODE_TYPE;
exports.PAIR = PAIR;
exports.SCALAR = SCALAR;
exports.SEQ = SEQ;
exports.hasAnchor = hasAnchor;
exports.isAlias = isAlias;
exports.isCollection = isCollection;
exports.isDocument = isDocument;
exports.isMap = isMap;
exports.isNode = isNode;
exports.isPair = isPair;
exports.isScalar = isScalar;
exports.isSeq = isSeq;


/***/ }),
/* 150 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);

const BREAK = Symbol('break visit');
const SKIP = Symbol('skip children');
const REMOVE = Symbol('remove node');
/**
 * Apply a visitor to an AST node or document.
 *
 * Walks through the tree (depth-first) starting from `node`, calling a
 * `visitor` function with three arguments:
 *   - `key`: For sequence values and map `Pair`, the node's index in the
 *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
 *     `null` for the root node.
 *   - `node`: The current node.
 *   - `path`: The ancestry of the current node.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this node, continue with next
 *     sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current node, then continue with the next one
 *   - `Node`: Replace the current node, then continue by visiting it
 *   - `number`: While iterating the items of a sequence or map, set the index
 *     of the next step. This is useful especially if the index of the current
 *     node has changed.
 *
 * If `visitor` is a single function, it will be called with all values
 * encountered in the tree, including e.g. `null` values. Alternatively,
 * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
 * `Alias` and `Scalar` node. To define the same visitor function for more than
 * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
 * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
 * specific defined one will be used for each node.
 */
function visit(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (identity.isDocument(node)) {
        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
            node.contents = null;
    }
    else
        visit_(null, node, visitor_, Object.freeze([]));
}
// Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.
/** Terminate visit traversal completely */
visit.BREAK = BREAK;
/** Do not visit the children of the current node */
visit.SKIP = SKIP;
/** Remove the current node */
visit.REMOVE = REMOVE;
function visit_(key, node, visitor, path) {
    const ctrl = callVisitor(key, node, visitor, path);
    if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
        replaceNode(key, path, ctrl);
        return visit_(key, ctrl, visitor, path);
    }
    if (typeof ctrl !== 'symbol') {
        if (identity.isCollection(node)) {
            path = Object.freeze(path.concat(node));
            for (let i = 0; i < node.items.length; ++i) {
                const ci = visit_(i, node.items[i], visitor, path);
                if (typeof ci === 'number')
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        }
        else if (identity.isPair(node)) {
            path = Object.freeze(path.concat(node));
            const ck = visit_('key', node.key, visitor, path);
            if (ck === BREAK)
                return BREAK;
            else if (ck === REMOVE)
                node.key = null;
            const cv = visit_('value', node.value, visitor, path);
            if (cv === BREAK)
                return BREAK;
            else if (cv === REMOVE)
                node.value = null;
        }
    }
    return ctrl;
}
/**
 * Apply an async visitor to an AST node or document.
 *
 * Walks through the tree (depth-first) starting from `node`, calling a
 * `visitor` function with three arguments:
 *   - `key`: For sequence values and map `Pair`, the node's index in the
 *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
 *     `null` for the root node.
 *   - `node`: The current node.
 *   - `path`: The ancestry of the current node.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `Promise`: Must resolve to one of the following values
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this node, continue with next
 *     sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current node, then continue with the next one
 *   - `Node`: Replace the current node, then continue by visiting it
 *   - `number`: While iterating the items of a sequence or map, set the index
 *     of the next step. This is useful especially if the index of the current
 *     node has changed.
 *
 * If `visitor` is a single function, it will be called with all values
 * encountered in the tree, including e.g. `null` values. Alternatively,
 * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
 * `Alias` and `Scalar` node. To define the same visitor function for more than
 * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
 * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
 * specific defined one will be used for each node.
 */
async function visitAsync(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (identity.isDocument(node)) {
        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
            node.contents = null;
    }
    else
        await visitAsync_(null, node, visitor_, Object.freeze([]));
}
// Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.
/** Terminate visit traversal completely */
visitAsync.BREAK = BREAK;
/** Do not visit the children of the current node */
visitAsync.SKIP = SKIP;
/** Remove the current node */
visitAsync.REMOVE = REMOVE;
async function visitAsync_(key, node, visitor, path) {
    const ctrl = await callVisitor(key, node, visitor, path);
    if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
        replaceNode(key, path, ctrl);
        return visitAsync_(key, ctrl, visitor, path);
    }
    if (typeof ctrl !== 'symbol') {
        if (identity.isCollection(node)) {
            path = Object.freeze(path.concat(node));
            for (let i = 0; i < node.items.length; ++i) {
                const ci = await visitAsync_(i, node.items[i], visitor, path);
                if (typeof ci === 'number')
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        }
        else if (identity.isPair(node)) {
            path = Object.freeze(path.concat(node));
            const ck = await visitAsync_('key', node.key, visitor, path);
            if (ck === BREAK)
                return BREAK;
            else if (ck === REMOVE)
                node.key = null;
            const cv = await visitAsync_('value', node.value, visitor, path);
            if (cv === BREAK)
                return BREAK;
            else if (cv === REMOVE)
                node.value = null;
        }
    }
    return ctrl;
}
function initVisitor(visitor) {
    if (typeof visitor === 'object' &&
        (visitor.Collection || visitor.Node || visitor.Value)) {
        return Object.assign({
            Alias: visitor.Node,
            Map: visitor.Node,
            Scalar: visitor.Node,
            Seq: visitor.Node
        }, visitor.Value && {
            Map: visitor.Value,
            Scalar: visitor.Value,
            Seq: visitor.Value
        }, visitor.Collection && {
            Map: visitor.Collection,
            Seq: visitor.Collection
        }, visitor);
    }
    return visitor;
}
function callVisitor(key, node, visitor, path) {
    if (typeof visitor === 'function')
        return visitor(key, node, path);
    if (identity.isMap(node))
        return visitor.Map?.(key, node, path);
    if (identity.isSeq(node))
        return visitor.Seq?.(key, node, path);
    if (identity.isPair(node))
        return visitor.Pair?.(key, node, path);
    if (identity.isScalar(node))
        return visitor.Scalar?.(key, node, path);
    if (identity.isAlias(node))
        return visitor.Alias?.(key, node, path);
    return undefined;
}
function replaceNode(key, path, node) {
    const parent = path[path.length - 1];
    if (identity.isCollection(parent)) {
        parent.items[key] = node;
    }
    else if (identity.isPair(parent)) {
        if (key === 'key')
            parent.key = node;
        else
            parent.value = node;
    }
    else if (identity.isDocument(parent)) {
        parent.contents = node;
    }
    else {
        const pt = identity.isAlias(parent) ? 'alias' : 'scalar';
        throw new Error(`Cannot replace node with ${pt} parent`);
    }
}

exports.visit = visit;
exports.visitAsync = visitAsync;


/***/ }),
/* 151 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Alias = __webpack_require__(152);
var Collection = __webpack_require__(157);
var identity = __webpack_require__(149);
var Pair = __webpack_require__(160);
var toJS = __webpack_require__(156);
var Schema = __webpack_require__(169);
var stringifyDocument = __webpack_require__(194);
var anchors = __webpack_require__(153);
var applyReviver = __webpack_require__(155);
var createNode = __webpack_require__(158);
var directives = __webpack_require__(148);

class Document {
    constructor(value, replacer, options) {
        /** A comment before this Document */
        this.commentBefore = null;
        /** A comment immediately after this Document */
        this.comment = null;
        /** Errors encountered during parsing. */
        this.errors = [];
        /** Warnings encountered during parsing. */
        this.warnings = [];
        Object.defineProperty(this, identity.NODE_TYPE, { value: identity.DOC });
        let _replacer = null;
        if (typeof replacer === 'function' || Array.isArray(replacer)) {
            _replacer = replacer;
        }
        else if (options === undefined && replacer) {
            options = replacer;
            replacer = undefined;
        }
        const opt = Object.assign({
            intAsBigInt: false,
            keepSourceTokens: false,
            logLevel: 'warn',
            prettyErrors: true,
            strict: true,
            stringKeys: false,
            uniqueKeys: true,
            version: '1.2'
        }, options);
        this.options = opt;
        let { version } = opt;
        if (options?._directives) {
            this.directives = options._directives.atDocument();
            if (this.directives.yaml.explicit)
                version = this.directives.yaml.version;
        }
        else
            this.directives = new directives.Directives({ version });
        this.setSchema(version, options);
        // @ts-expect-error We can't really know that this matches Contents.
        this.contents =
            value === undefined ? null : this.createNode(value, _replacer, options);
    }
    /**
     * Create a deep copy of this Document and its contents.
     *
     * Custom Node values that inherit from `Object` still refer to their original instances.
     */
    clone() {
        const copy = Object.create(Document.prototype, {
            [identity.NODE_TYPE]: { value: identity.DOC }
        });
        copy.commentBefore = this.commentBefore;
        copy.comment = this.comment;
        copy.errors = this.errors.slice();
        copy.warnings = this.warnings.slice();
        copy.options = Object.assign({}, this.options);
        if (this.directives)
            copy.directives = this.directives.clone();
        copy.schema = this.schema.clone();
        // @ts-expect-error We can't really know that this matches Contents.
        copy.contents = identity.isNode(this.contents)
            ? this.contents.clone(copy.schema)
            : this.contents;
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /** Adds a value to the document. */
    add(value) {
        if (assertCollection(this.contents))
            this.contents.add(value);
    }
    /** Adds a value to the document. */
    addIn(path, value) {
        if (assertCollection(this.contents))
            this.contents.addIn(path, value);
    }
    /**
     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
     *
     * If `node` already has an anchor, `name` is ignored.
     * Otherwise, the `node.anchor` value will be set to `name`,
     * or if an anchor with that name is already present in the document,
     * `name` will be used as a prefix for a new unique anchor.
     * If `name` is undefined, the generated anchor will use 'a' as a prefix.
     */
    createAlias(node, name) {
        if (!node.anchor) {
            const prev = anchors.anchorNames(this);
            node.anchor =
                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
                !name || prev.has(name) ? anchors.findNewAnchor(name || 'a', prev) : name;
        }
        return new Alias.Alias(node.anchor);
    }
    createNode(value, replacer, options) {
        let _replacer = undefined;
        if (typeof replacer === 'function') {
            value = replacer.call({ '': value }, '', value);
            _replacer = replacer;
        }
        else if (Array.isArray(replacer)) {
            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;
            const asStr = replacer.filter(keyToStr).map(String);
            if (asStr.length > 0)
                replacer = replacer.concat(asStr);
            _replacer = replacer;
        }
        else if (options === undefined && replacer) {
            options = replacer;
            replacer = undefined;
        }
        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
        const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(this, 
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        anchorPrefix || 'a');
        const ctx = {
            aliasDuplicateObjects: aliasDuplicateObjects ?? true,
            keepUndefined: keepUndefined ?? false,
            onAnchor,
            onTagObj,
            replacer: _replacer,
            schema: this.schema,
            sourceObjects
        };
        const node = createNode.createNode(value, tag, ctx);
        if (flow && identity.isCollection(node))
            node.flow = true;
        setAnchors();
        return node;
    }
    /**
     * Convert a key and a value into a `Pair` using the current schema,
     * recursively wrapping all values as `Scalar` or `Collection` nodes.
     */
    createPair(key, value, options = {}) {
        const k = this.createNode(key, null, options);
        const v = this.createNode(value, null, options);
        return new Pair.Pair(k, v);
    }
    /**
     * Removes a value from the document.
     * @returns `true` if the item was found and removed.
     */
    delete(key) {
        return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    /**
     * Removes a value from the document.
     * @returns `true` if the item was found and removed.
     */
    deleteIn(path) {
        if (Collection.isEmptyPath(path)) {
            if (this.contents == null)
                return false;
            // @ts-expect-error Presumed impossible if Strict extends false
            this.contents = null;
            return true;
        }
        return assertCollection(this.contents)
            ? this.contents.deleteIn(path)
            : false;
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    get(key, keepScalar) {
        return identity.isCollection(this.contents)
            ? this.contents.get(key, keepScalar)
            : undefined;
    }
    /**
     * Returns item at `path`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    getIn(path, keepScalar) {
        if (Collection.isEmptyPath(path))
            return !keepScalar && identity.isScalar(this.contents)
                ? this.contents.value
                : this.contents;
        return identity.isCollection(this.contents)
            ? this.contents.getIn(path, keepScalar)
            : undefined;
    }
    /**
     * Checks if the document includes a value with the key `key`.
     */
    has(key) {
        return identity.isCollection(this.contents) ? this.contents.has(key) : false;
    }
    /**
     * Checks if the document includes a value at `path`.
     */
    hasIn(path) {
        if (Collection.isEmptyPath(path))
            return this.contents !== undefined;
        return identity.isCollection(this.contents) ? this.contents.hasIn(path) : false;
    }
    /**
     * Sets a value in this document. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    set(key, value) {
        if (this.contents == null) {
            // @ts-expect-error We can't really know that this matches Contents.
            this.contents = Collection.collectionFromPath(this.schema, [key], value);
        }
        else if (assertCollection(this.contents)) {
            this.contents.set(key, value);
        }
    }
    /**
     * Sets a value in this document. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    setIn(path, value) {
        if (Collection.isEmptyPath(path)) {
            // @ts-expect-error We can't really know that this matches Contents.
            this.contents = value;
        }
        else if (this.contents == null) {
            // @ts-expect-error We can't really know that this matches Contents.
            this.contents = Collection.collectionFromPath(this.schema, Array.from(path), value);
        }
        else if (assertCollection(this.contents)) {
            this.contents.setIn(path, value);
        }
    }
    /**
     * Change the YAML version and schema used by the document.
     * A `null` version disables support for directives, explicit tags, anchors, and aliases.
     * It also requires the `schema` option to be given as a `Schema` instance value.
     *
     * Overrides all previously set schema options.
     */
    setSchema(version, options = {}) {
        if (typeof version === 'number')
            version = String(version);
        let opt;
        switch (version) {
            case '1.1':
                if (this.directives)
                    this.directives.yaml.version = '1.1';
                else
                    this.directives = new directives.Directives({ version: '1.1' });
                opt = { resolveKnownTags: false, schema: 'yaml-1.1' };
                break;
            case '1.2':
            case 'next':
                if (this.directives)
                    this.directives.yaml.version = version;
                else
                    this.directives = new directives.Directives({ version });
                opt = { resolveKnownTags: true, schema: 'core' };
                break;
            case null:
                if (this.directives)
                    delete this.directives;
                opt = null;
                break;
            default: {
                const sv = JSON.stringify(version);
                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
            }
        }
        // Not using `instanceof Schema` to allow for duck typing
        if (options.schema instanceof Object)
            this.schema = options.schema;
        else if (opt)
            this.schema = new Schema.Schema(Object.assign(opt, options));
        else
            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    // json & jsonArg are only used from toJSON()
    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        const ctx = {
            anchors: new Map(),
            doc: this,
            keep: !json,
            mapAsMap: mapAsMap === true,
            mapKeyWarned: false,
            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100
        };
        const res = toJS.toJS(this.contents, jsonArg ?? '', ctx);
        if (typeof onAnchor === 'function')
            for (const { count, res } of ctx.anchors.values())
                onAnchor(res, count);
        return typeof reviver === 'function'
            ? applyReviver.applyReviver(reviver, { '': res }, '', res)
            : res;
    }
    /**
     * A JSON representation of the document `contents`.
     *
     * @param jsonArg Used by `JSON.stringify` to indicate the array index or
     *   property name.
     */
    toJSON(jsonArg, onAnchor) {
        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
    }
    /** A YAML representation of the document. */
    toString(options = {}) {
        if (this.errors.length > 0)
            throw new Error('Document with errors cannot be stringified');
        if ('indent' in options &&
            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
            const s = JSON.stringify(options.indent);
            throw new Error(`"indent" option must be a positive integer, not ${s}`);
        }
        return stringifyDocument.stringifyDocument(this, options);
    }
}
function assertCollection(contents) {
    if (identity.isCollection(contents))
        return true;
    throw new Error('Expected a YAML collection as document contents');
}

exports.Document = Document;


/***/ }),
/* 152 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var anchors = __webpack_require__(153);
var visit = __webpack_require__(150);
var identity = __webpack_require__(149);
var Node = __webpack_require__(154);
var toJS = __webpack_require__(156);

class Alias extends Node.NodeBase {
    constructor(source) {
        super(identity.ALIAS);
        this.source = source;
        Object.defineProperty(this, 'tag', {
            set() {
                throw new Error('Alias nodes cannot have tags');
            }
        });
    }
    /**
     * Resolve the value of this alias within `doc`, finding the last
     * instance of the `source` anchor before this node.
     */
    resolve(doc, ctx) {
        let nodes;
        if (ctx?.aliasResolveCache) {
            nodes = ctx.aliasResolveCache;
        }
        else {
            nodes = [];
            visit.visit(doc, {
                Node: (_key, node) => {
                    if (identity.isAlias(node) || identity.hasAnchor(node))
                        nodes.push(node);
                }
            });
            if (ctx)
                ctx.aliasResolveCache = nodes;
        }
        let found = undefined;
        for (const node of nodes) {
            if (node === this)
                break;
            if (node.anchor === this.source)
                found = node;
        }
        return found;
    }
    toJSON(_arg, ctx) {
        if (!ctx)
            return { source: this.source };
        const { anchors, doc, maxAliasCount } = ctx;
        const source = this.resolve(doc, ctx);
        if (!source) {
            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new ReferenceError(msg);
        }
        let data = anchors.get(source);
        if (!data) {
            // Resolve anchors for Node.prototype.toJS()
            toJS.toJS(source, null, ctx);
            data = anchors.get(source);
        }
        /* istanbul ignore if */
        if (!data || data.res === undefined) {
            const msg = 'This should not happen: Alias anchor was not resolved?';
            throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
            data.count += 1;
            if (data.aliasCount === 0)
                data.aliasCount = getAliasCount(doc, source, anchors);
            if (data.count * data.aliasCount > maxAliasCount) {
                const msg = 'Excessive alias count indicates a resource exhaustion attack';
                throw new ReferenceError(msg);
            }
        }
        return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
        const src = `*${this.source}`;
        if (ctx) {
            anchors.anchorIsValid(this.source);
            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                throw new Error(msg);
            }
            if (ctx.implicitKey)
                return `${src} `;
        }
        return src;
    }
}
function getAliasCount(doc, node, anchors) {
    if (identity.isAlias(node)) {
        const source = node.resolve(doc);
        const anchor = anchors && source && anchors.get(source);
        return anchor ? anchor.count * anchor.aliasCount : 0;
    }
    else if (identity.isCollection(node)) {
        let count = 0;
        for (const item of node.items) {
            const c = getAliasCount(doc, item, anchors);
            if (c > count)
                count = c;
        }
        return count;
    }
    else if (identity.isPair(node)) {
        const kc = getAliasCount(doc, node.key, anchors);
        const vc = getAliasCount(doc, node.value, anchors);
        return Math.max(kc, vc);
    }
    return 1;
}

exports.Alias = Alias;


/***/ }),
/* 153 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var visit = __webpack_require__(150);

/**
 * Verify that the input string is a valid anchor.
 *
 * Will throw on errors.
 */
function anchorIsValid(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
        const sa = JSON.stringify(anchor);
        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
        throw new Error(msg);
    }
    return true;
}
function anchorNames(root) {
    const anchors = new Set();
    visit.visit(root, {
        Value(_key, node) {
            if (node.anchor)
                anchors.add(node.anchor);
        }
    });
    return anchors;
}
/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */
function findNewAnchor(prefix, exclude) {
    for (let i = 1; true; ++i) {
        const name = `${prefix}${i}`;
        if (!exclude.has(name))
            return name;
    }
}
function createNodeAnchors(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = new Map();
    let prevAnchors = null;
    return {
        onAnchor: (source) => {
            aliasObjects.push(source);
            prevAnchors ?? (prevAnchors = anchorNames(doc));
            const anchor = findNewAnchor(prefix, prevAnchors);
            prevAnchors.add(anchor);
            return anchor;
        },
        /**
         * With circular references, the source node is only resolved after all
         * of its child nodes are. This is why anchors are set only after all of
         * the nodes have been created.
         */
        setAnchors: () => {
            for (const source of aliasObjects) {
                const ref = sourceObjects.get(source);
                if (typeof ref === 'object' &&
                    ref.anchor &&
                    (identity.isScalar(ref.node) || identity.isCollection(ref.node))) {
                    ref.node.anchor = ref.anchor;
                }
                else {
                    const error = new Error('Failed to resolve repeated object (this should not happen)');
                    error.source = source;
                    throw error;
                }
            }
        },
        sourceObjects
    };
}

exports.anchorIsValid = anchorIsValid;
exports.anchorNames = anchorNames;
exports.createNodeAnchors = createNodeAnchors;
exports.findNewAnchor = findNewAnchor;


/***/ }),
/* 154 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var applyReviver = __webpack_require__(155);
var identity = __webpack_require__(149);
var toJS = __webpack_require__(156);

class NodeBase {
    constructor(type) {
        Object.defineProperty(this, identity.NODE_TYPE, { value: type });
    }
    /** Create a copy of this node.  */
    clone() {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /** A plain JavaScript representation of this node. */
    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        if (!identity.isDocument(doc))
            throw new TypeError('A document argument is required');
        const ctx = {
            anchors: new Map(),
            doc,
            keep: true,
            mapAsMap: mapAsMap === true,
            mapKeyWarned: false,
            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100
        };
        const res = toJS.toJS(this, '', ctx);
        if (typeof onAnchor === 'function')
            for (const { count, res } of ctx.anchors.values())
                onAnchor(res, count);
        return typeof reviver === 'function'
            ? applyReviver.applyReviver(reviver, { '': res }, '', res)
            : res;
    }
}

exports.NodeBase = NodeBase;


/***/ }),
/* 155 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,
 * in section 24.5.1.1 "Runtime Semantics: InternalizeJSONProperty" of the
 * 2021 edition: https://tc39.es/ecma262/#sec-json.parse
 *
 * Includes extensions for handling Map and Set objects.
 */
function applyReviver(reviver, obj, key, val) {
    if (val && typeof val === 'object') {
        if (Array.isArray(val)) {
            for (let i = 0, len = val.length; i < len; ++i) {
                const v0 = val[i];
                const v1 = applyReviver(reviver, val, String(i), v0);
                // eslint-disable-next-line @typescript-eslint/no-array-delete
                if (v1 === undefined)
                    delete val[i];
                else if (v1 !== v0)
                    val[i] = v1;
            }
        }
        else if (val instanceof Map) {
            for (const k of Array.from(val.keys())) {
                const v0 = val.get(k);
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === undefined)
                    val.delete(k);
                else if (v1 !== v0)
                    val.set(k, v1);
            }
        }
        else if (val instanceof Set) {
            for (const v0 of Array.from(val)) {
                const v1 = applyReviver(reviver, val, v0, v0);
                if (v1 === undefined)
                    val.delete(v0);
                else if (v1 !== v0) {
                    val.delete(v0);
                    val.add(v1);
                }
            }
        }
        else {
            for (const [k, v0] of Object.entries(val)) {
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === undefined)
                    delete val[k];
                else if (v1 !== v0)
                    val[k] = v1;
            }
        }
    }
    return reviver.call(obj, key, val);
}

exports.applyReviver = applyReviver;


/***/ }),
/* 156 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);

/**
 * Recursively convert any node or its contents to native JavaScript
 *
 * @param value - The input value
 * @param arg - If `value` defines a `toJSON()` method, use this
 *   as its first argument
 * @param ctx - Conversion context, originally set in Document#toJS(). If
 *   `{ keep: true }` is not set, output should be suitable for JSON
 *   stringification.
 */
function toJS(value, arg, ctx) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    if (Array.isArray(value))
        return value.map((v, i) => toJS(v, String(i), ctx));
    if (value && typeof value.toJSON === 'function') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        if (!ctx || !identity.hasAnchor(value))
            return value.toJSON(arg, ctx);
        const data = { aliasCount: 0, count: 1, res: undefined };
        ctx.anchors.set(value, data);
        ctx.onCreate = res => {
            data.res = res;
            delete ctx.onCreate;
        };
        const res = value.toJSON(arg, ctx);
        if (ctx.onCreate)
            ctx.onCreate(res);
        return res;
    }
    if (typeof value === 'bigint' && !ctx?.keep)
        return Number(value);
    return value;
}

exports.toJS = toJS;


/***/ }),
/* 157 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var createNode = __webpack_require__(158);
var identity = __webpack_require__(149);
var Node = __webpack_require__(154);

function collectionFromPath(schema, path, value) {
    let v = value;
    for (let i = path.length - 1; i >= 0; --i) {
        const k = path[i];
        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {
            const a = [];
            a[k] = v;
            v = a;
        }
        else {
            v = new Map([[k, v]]);
        }
    }
    return createNode.createNode(v, undefined, {
        aliasDuplicateObjects: false,
        keepUndefined: false,
        onAnchor: () => {
            throw new Error('This should not happen, please report a bug.');
        },
        schema,
        sourceObjects: new Map()
    });
}
// Type guard is intentionally a little wrong so as to be more useful,
// as it does not cover untypable empty non-string iterables (e.g. []).
const isEmptyPath = (path) => path == null ||
    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);
class Collection extends Node.NodeBase {
    constructor(type, schema) {
        super(type);
        Object.defineProperty(this, 'schema', {
            value: schema,
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
    /**
     * Create a copy of this collection.
     *
     * @param schema - If defined, overwrites the original's schema
     */
    clone(schema) {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (schema)
            copy.schema = schema;
        copy.items = copy.items.map(it => identity.isNode(it) || identity.isPair(it) ? it.clone(schema) : it);
        if (this.range)
            copy.range = this.range.slice();
        return copy;
    }
    /**
     * Adds a value to the collection. For `!!map` and `!!omap` the value must
     * be a Pair instance or a `{ key, value }` object, which may not have a key
     * that already exists in the map.
     */
    addIn(path, value) {
        if (isEmptyPath(path))
            this.add(value);
        else {
            const [key, ...rest] = path;
            const node = this.get(key, true);
            if (identity.isCollection(node))
                node.addIn(rest, value);
            else if (node === undefined && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
            else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    /**
     * Removes a value from the collection.
     * @returns `true` if the item was found and removed.
     */
    deleteIn(path) {
        const [key, ...rest] = path;
        if (rest.length === 0)
            return this.delete(key);
        const node = this.get(key, true);
        if (identity.isCollection(node))
            return node.deleteIn(rest);
        else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    /**
     * Returns item at `key`, or `undefined` if not found. By default unwraps
     * scalar values from their surrounding node; to disable set `keepScalar` to
     * `true` (collections are always returned intact).
     */
    getIn(path, keepScalar) {
        const [key, ...rest] = path;
        const node = this.get(key, true);
        if (rest.length === 0)
            return !keepScalar && identity.isScalar(node) ? node.value : node;
        else
            return identity.isCollection(node) ? node.getIn(rest, keepScalar) : undefined;
    }
    hasAllNullValues(allowScalar) {
        return this.items.every(node => {
            if (!identity.isPair(node))
                return false;
            const n = node.value;
            return (n == null ||
                (allowScalar &&
                    identity.isScalar(n) &&
                    n.value == null &&
                    !n.commentBefore &&
                    !n.comment &&
                    !n.tag));
        });
    }
    /**
     * Checks if the collection includes a value with the key `key`.
     */
    hasIn(path) {
        const [key, ...rest] = path;
        if (rest.length === 0)
            return this.has(key);
        const node = this.get(key, true);
        return identity.isCollection(node) ? node.hasIn(rest) : false;
    }
    /**
     * Sets a value in this collection. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     */
    setIn(path, value) {
        const [key, ...rest] = path;
        if (rest.length === 0) {
            this.set(key, value);
        }
        else {
            const node = this.get(key, true);
            if (identity.isCollection(node))
                node.setIn(rest, value);
            else if (node === undefined && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
            else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
}

exports.Collection = Collection;
exports.collectionFromPath = collectionFromPath;
exports.isEmptyPath = isEmptyPath;


/***/ }),
/* 158 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Alias = __webpack_require__(152);
var identity = __webpack_require__(149);
var Scalar = __webpack_require__(159);

const defaultTagPrefix = 'tag:yaml.org,2002:';
function findTagObject(value, tagName, tags) {
    if (tagName) {
        const match = tags.filter(t => t.tag === tagName);
        const tagObj = match.find(t => !t.format) ?? match[0];
        if (!tagObj)
            throw new Error(`Tag ${tagName} not found`);
        return tagObj;
    }
    return tags.find(t => t.identify?.(value) && !t.format);
}
function createNode(value, tagName, ctx) {
    if (identity.isDocument(value))
        value = value.contents;
    if (identity.isNode(value))
        return value;
    if (identity.isPair(value)) {
        const map = ctx.schema[identity.MAP].createNode?.(ctx.schema, null, ctx);
        map.items.push(value);
        return map;
    }
    if (value instanceof String ||
        value instanceof Number ||
        value instanceof Boolean ||
        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere
    ) {
        // https://tc39.es/ecma262/#sec-serializejsonproperty
        value = value.valueOf();
    }
    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
    // Detect duplicate references to the same object & use Alias nodes for all
    // after first. The `ref` wrapper allows for circular references to resolve.
    let ref = undefined;
    if (aliasDuplicateObjects && value && typeof value === 'object') {
        ref = sourceObjects.get(value);
        if (ref) {
            ref.anchor ?? (ref.anchor = onAnchor(value));
            return new Alias.Alias(ref.anchor);
        }
        else {
            ref = { anchor: null, node: null };
            sourceObjects.set(value, ref);
        }
    }
    if (tagName?.startsWith('!!'))
        tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value, tagName, schema.tags);
    if (!tagObj) {
        if (value && typeof value.toJSON === 'function') {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            value = value.toJSON();
        }
        if (!value || typeof value !== 'object') {
            const node = new Scalar.Scalar(value);
            if (ref)
                ref.node = node;
            return node;
        }
        tagObj =
            value instanceof Map
                ? schema[identity.MAP]
                : Symbol.iterator in Object(value)
                    ? schema[identity.SEQ]
                    : schema[identity.MAP];
    }
    if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
    }
    const node = tagObj?.createNode
        ? tagObj.createNode(ctx.schema, value, ctx)
        : typeof tagObj?.nodeClass?.from === 'function'
            ? tagObj.nodeClass.from(ctx.schema, value, ctx)
            : new Scalar.Scalar(value);
    if (tagName)
        node.tag = tagName;
    else if (!tagObj.default)
        node.tag = tagObj.tag;
    if (ref)
        ref.node = node;
    return node;
}

exports.createNode = createNode;


/***/ }),
/* 159 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Node = __webpack_require__(154);
var toJS = __webpack_require__(156);

const isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');
class Scalar extends Node.NodeBase {
    constructor(value) {
        super(identity.SCALAR);
        this.value = value;
    }
    toJSON(arg, ctx) {
        return ctx?.keep ? this.value : toJS.toJS(this.value, arg, ctx);
    }
    toString() {
        return String(this.value);
    }
}
Scalar.BLOCK_FOLDED = 'BLOCK_FOLDED';
Scalar.BLOCK_LITERAL = 'BLOCK_LITERAL';
Scalar.PLAIN = 'PLAIN';
Scalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';
Scalar.QUOTE_SINGLE = 'QUOTE_SINGLE';

exports.Scalar = Scalar;
exports.isScalarValue = isScalarValue;


/***/ }),
/* 160 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var createNode = __webpack_require__(158);
var stringifyPair = __webpack_require__(161);
var addPairToJSMap = __webpack_require__(166);
var identity = __webpack_require__(149);

function createPair(key, value, ctx) {
    const k = createNode.createNode(key, undefined, ctx);
    const v = createNode.createNode(value, undefined, ctx);
    return new Pair(k, v);
}
class Pair {
    constructor(key, value = null) {
        Object.defineProperty(this, identity.NODE_TYPE, { value: identity.PAIR });
        this.key = key;
        this.value = value;
    }
    clone(schema) {
        let { key, value } = this;
        if (identity.isNode(key))
            key = key.clone(schema);
        if (identity.isNode(value))
            value = value.clone(schema);
        return new Pair(key, value);
    }
    toJSON(_, ctx) {
        const pair = ctx?.mapAsMap ? new Map() : {};
        return addPairToJSMap.addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
        return ctx?.doc
            ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep)
            : JSON.stringify(this);
    }
}

exports.Pair = Pair;
exports.createPair = createPair;


/***/ }),
/* 161 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Scalar = __webpack_require__(159);
var stringify = __webpack_require__(162);
var stringifyComment = __webpack_require__(163);

function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
    let keyComment = (identity.isNode(key) && key.comment) || null;
    if (simpleKeys) {
        if (keyComment) {
            throw new Error('With simple keys, key nodes cannot have comments');
        }
        if (identity.isCollection(key) || (!identity.isNode(key) && typeof key === 'object')) {
            const msg = 'With simple keys, collection cannot be used as a key value';
            throw new Error(msg);
        }
    }
    let explicitKey = !simpleKeys &&
        (!key ||
            (keyComment && value == null && !ctx.inFlow) ||
            identity.isCollection(key) ||
            (identity.isScalar(key)
                ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL
                : typeof key === 'object'));
    ctx = Object.assign({}, ctx, {
        allNullValues: false,
        implicitKey: !explicitKey && (simpleKeys || !allNullValues),
        indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify.stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
        if (simpleKeys)
            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');
        explicitKey = true;
    }
    if (ctx.inFlow) {
        if (allNullValues || value == null) {
            if (keyCommentDone && onComment)
                onComment();
            return str === '' ? '?' : explicitKey ? `? ${str}` : str;
        }
    }
    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {
        str = `? ${str}`;
        if (keyComment && !keyCommentDone) {
            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
        }
        else if (chompKeep && onChompKeep)
            onChompKeep();
        return str;
    }
    if (keyCommentDone)
        keyComment = null;
    if (explicitKey) {
        if (keyComment)
            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
        str = `? ${str}\n${indent}:`;
    }
    else {
        str = `${str}:`;
        if (keyComment)
            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vsb, vcb, valueComment;
    if (identity.isNode(value)) {
        vsb = !!value.spaceBefore;
        vcb = value.commentBefore;
        valueComment = value.comment;
    }
    else {
        vsb = false;
        vcb = null;
        valueComment = null;
        if (value && typeof value === 'object')
            value = doc.createNode(value);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && identity.isScalar(value))
        ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq &&
        indentStep.length >= 2 &&
        !ctx.inFlow &&
        !explicitKey &&
        identity.isSeq(value) &&
        !value.flow &&
        !value.tag &&
        !value.anchor) {
        // If indentSeq === false, consider '- ' as part of indentation where possible
        ctx.indent = ctx.indent.substring(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify.stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));
    let ws = ' ';
    if (keyComment || vsb || vcb) {
        ws = vsb ? '\n' : '';
        if (vcb) {
            const cs = commentString(vcb);
            ws += `\n${stringifyComment.indentComment(cs, ctx.indent)}`;
        }
        if (valueStr === '' && !ctx.inFlow) {
            if (ws === '\n')
                ws = '\n\n';
        }
        else {
            ws += `\n${ctx.indent}`;
        }
    }
    else if (!explicitKey && identity.isCollection(value)) {
        const vs0 = valueStr[0];
        const nl0 = valueStr.indexOf('\n');
        const hasNewline = nl0 !== -1;
        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
        if (hasNewline || !flow) {
            let hasPropsLine = false;
            if (hasNewline && (vs0 === '&' || vs0 === '!')) {
                let sp0 = valueStr.indexOf(' ');
                if (vs0 === '&' &&
                    sp0 !== -1 &&
                    sp0 < nl0 &&
                    valueStr[sp0 + 1] === '!') {
                    sp0 = valueStr.indexOf(' ', sp0 + 1);
                }
                if (sp0 === -1 || nl0 < sp0)
                    hasPropsLine = true;
            }
            if (!hasPropsLine)
                ws = `\n${ctx.indent}`;
        }
    }
    else if (valueStr === '' || valueStr[0] === '\n') {
        ws = '';
    }
    str += ws + valueStr;
    if (ctx.inFlow) {
        if (valueCommentDone && onComment)
            onComment();
    }
    else if (valueComment && !valueCommentDone) {
        str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));
    }
    else if (chompKeep && onChompKeep) {
        onChompKeep();
    }
    return str;
}

exports.stringifyPair = stringifyPair;


/***/ }),
/* 162 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var anchors = __webpack_require__(153);
var identity = __webpack_require__(149);
var stringifyComment = __webpack_require__(163);
var stringifyString = __webpack_require__(164);

function createStringifyContext(doc, options) {
    const opt = Object.assign({
        blockQuote: true,
        commentString: stringifyComment.stringifyComment,
        defaultKeyType: null,
        defaultStringType: 'PLAIN',
        directives: null,
        doubleQuotedAsJSON: false,
        doubleQuotedMinMultiLineLength: 40,
        falseStr: 'false',
        flowCollectionPadding: true,
        indentSeq: true,
        lineWidth: 80,
        minContentWidth: 20,
        nullStr: 'null',
        simpleKeys: false,
        singleQuote: null,
        trueStr: 'true',
        verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch (opt.collectionStyle) {
        case 'block':
            inFlow = false;
            break;
        case 'flow':
            inFlow = true;
            break;
        default:
            inFlow = null;
    }
    return {
        anchors: new Set(),
        doc,
        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',
        indent: '',
        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',
        inFlow,
        options: opt
    };
}
function getTagObject(tags, item) {
    if (item.tag) {
        const match = tags.filter(t => t.tag === item.tag);
        if (match.length > 0)
            return match.find(t => t.format === item.format) ?? match[0];
    }
    let tagObj = undefined;
    let obj;
    if (identity.isScalar(item)) {
        obj = item.value;
        let match = tags.filter(t => t.identify?.(obj));
        if (match.length > 1) {
            const testMatch = match.filter(t => t.test);
            if (testMatch.length > 0)
                match = testMatch;
        }
        tagObj =
            match.find(t => t.format === item.format) ?? match.find(t => !t.format);
    }
    else {
        obj = item;
        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);
    }
    if (!tagObj) {
        const name = obj?.constructor?.name ?? (obj === null ? 'null' : typeof obj);
        throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
}
// needs to be called before value stringifier to allow for circular anchor refs
function stringifyProps(node, tagObj, { anchors: anchors$1, doc }) {
    if (!doc.directives)
        return '';
    const props = [];
    const anchor = (identity.isScalar(node) || identity.isCollection(node)) && node.anchor;
    if (anchor && anchors.anchorIsValid(anchor)) {
        anchors$1.add(anchor);
        props.push(`&${anchor}`);
    }
    const tag = node.tag ?? (tagObj.default ? null : tagObj.tag);
    if (tag)
        props.push(doc.directives.tagString(tag));
    return props.join(' ');
}
function stringify(item, ctx, onComment, onChompKeep) {
    if (identity.isPair(item))
        return item.toString(ctx, onComment, onChompKeep);
    if (identity.isAlias(item)) {
        if (ctx.doc.directives)
            return item.toString(ctx);
        if (ctx.resolvedAliases?.has(item)) {
            throw new TypeError(`Cannot stringify circular structure without alias nodes`);
        }
        else {
            if (ctx.resolvedAliases)
                ctx.resolvedAliases.add(item);
            else
                ctx.resolvedAliases = new Set([item]);
            item = item.resolve(ctx.doc);
        }
    }
    let tagObj = undefined;
    const node = identity.isNode(item)
        ? item
        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });
    tagObj ?? (tagObj = getTagObject(ctx.doc.schema.tags, node));
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0)
        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
    const str = typeof tagObj.stringify === 'function'
        ? tagObj.stringify(node, ctx, onComment, onChompKeep)
        : identity.isScalar(node)
            ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep)
            : node.toString(ctx, onComment, onChompKeep);
    if (!props)
        return str;
    return identity.isScalar(node) || str[0] === '{' || str[0] === '['
        ? `${props} ${str}`
        : `${props}\n${ctx.indent}${str}`;
}

exports.createStringifyContext = createStringifyContext;
exports.stringify = stringify;


/***/ }),
/* 163 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Stringifies a comment.
 *
 * Empty comment lines are left empty,
 * lines consisting of a single space are replaced by `#`,
 * and all other lines are prefixed with a `#`.
 */
const stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');
function indentComment(comment, indent) {
    if (/^\n+$/.test(comment))
        return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
const lineComment = (str, indent, comment) => str.endsWith('\n')
    ? indentComment(comment, indent)
    : comment.includes('\n')
        ? '\n' + indentComment(comment, indent)
        : (str.endsWith(' ') ? '' : ' ') + comment;

exports.indentComment = indentComment;
exports.lineComment = lineComment;
exports.stringifyComment = stringifyComment;


/***/ }),
/* 164 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);
var foldFlowLines = __webpack_require__(165);

const getFoldOptions = (ctx, isBlock) => ({
    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
    lineWidth: ctx.options.lineWidth,
    minContentWidth: ctx.options.minContentWidth
});
// Also checks for lines starting with %, as parsing the output as YAML 1.1 will
// presume that's starting a new document.
const containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0)
        return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit)
        return false;
    for (let i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === '\n') {
            if (i - start > limit)
                return true;
            start = i + 1;
            if (strLen - start <= limit)
                return false;
        }
    }
    return true;
}
function doubleQuotedString(value, ctx) {
    const json = JSON.stringify(value);
    if (ctx.options.doubleQuotedAsJSON)
        return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
    let str = '';
    let start = 0;
    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === ' ' && json[i + 1] === '\\' && json[i + 2] === 'n') {
            // space before newline needs to be escaped to not be folded
            str += json.slice(start, i) + '\\ ';
            i += 1;
            start = i;
            ch = '\\';
        }
        if (ch === '\\')
            switch (json[i + 1]) {
                case 'u':
                    {
                        str += json.slice(start, i);
                        const code = json.substr(i + 2, 4);
                        switch (code) {
                            case '0000':
                                str += '\\0';
                                break;
                            case '0007':
                                str += '\\a';
                                break;
                            case '000b':
                                str += '\\v';
                                break;
                            case '001b':
                                str += '\\e';
                                break;
                            case '0085':
                                str += '\\N';
                                break;
                            case '00a0':
                                str += '\\_';
                                break;
                            case '2028':
                                str += '\\L';
                                break;
                            case '2029':
                                str += '\\P';
                                break;
                            default:
                                if (code.substr(0, 2) === '00')
                                    str += '\\x' + code.substr(2);
                                else
                                    str += json.substr(i, 6);
                        }
                        i += 5;
                        start = i + 1;
                    }
                    break;
                case 'n':
                    if (implicitKey ||
                        json[i + 2] === '"' ||
                        json.length < minMultiLineLength) {
                        i += 1;
                    }
                    else {
                        // folding will eat first newline
                        str += json.slice(start, i) + '\n\n';
                        while (json[i + 2] === '\\' &&
                            json[i + 3] === 'n' &&
                            json[i + 4] !== '"') {
                            str += '\n';
                            i += 2;
                        }
                        str += indent;
                        // space after newline needs to be escaped to not be folded
                        if (json[i + 2] === ' ')
                            str += '\\';
                        i += 1;
                        start = i + 1;
                    }
                    break;
                default:
                    i += 1;
            }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey
        ? str
        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx, false));
}
function singleQuotedString(value, ctx) {
    if (ctx.options.singleQuote === false ||
        (ctx.implicitKey && value.includes('\n')) ||
        /[ \t]\n|\n[ \t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline
    )
        return doubleQuotedString(value, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
    const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&\n${indent}`) + "'";
    return ctx.implicitKey
        ? res
        : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
}
function quotedString(value, ctx) {
    const { singleQuote } = ctx.options;
    let qs;
    if (singleQuote === false)
        qs = doubleQuotedString;
    else {
        const hasDouble = value.includes('"');
        const hasSingle = value.includes("'");
        if (hasDouble && !hasSingle)
            qs = singleQuotedString;
        else if (hasSingle && !hasDouble)
            qs = doubleQuotedString;
        else
            qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value, ctx);
}
// The negative lookbehind avoids a polynomial search,
// but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind
let blockEndNewlines;
try {
    blockEndNewlines = new RegExp('(^|(?<!\n))\n+(?!\n|$)', 'g');
}
catch {
    blockEndNewlines = /\n+(?!\n|$)/g;
}
function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
    const { blockQuote, commentString, lineWidth } = ctx.options;
    // 1. Block can't end in whitespace unless the last line is non-empty.
    // 2. Strings consisting of only whitespace are best rendered explicitly.
    if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
        return quotedString(value, ctx);
    }
    const indent = ctx.indent ||
        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');
    const literal = blockQuote === 'literal'
        ? true
        : blockQuote === 'folded' || type === Scalar.Scalar.BLOCK_FOLDED
            ? false
            : type === Scalar.Scalar.BLOCK_LITERAL
                ? true
                : !lineLengthOverLimit(value, lineWidth, indent.length);
    if (!value)
        return literal ? '|\n' : '>\n';
    // determine chomping from whitespace at value end
    let chomp;
    let endStart;
    for (endStart = value.length; endStart > 0; --endStart) {
        const ch = value[endStart - 1];
        if (ch !== '\n' && ch !== '\t' && ch !== ' ')
            break;
    }
    let end = value.substring(endStart);
    const endNlPos = end.indexOf('\n');
    if (endNlPos === -1) {
        chomp = '-'; // strip
    }
    else if (value === end || endNlPos !== end.length - 1) {
        chomp = '+'; // keep
        if (onChompKeep)
            onChompKeep();
    }
    else {
        chomp = ''; // clip
    }
    if (end) {
        value = value.slice(0, -end.length);
        if (end[end.length - 1] === '\n')
            end = end.slice(0, -1);
        end = end.replace(blockEndNewlines, `$&${indent}`);
    }
    // determine indent indicator from whitespace at value start
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for (startEnd = 0; startEnd < value.length; ++startEnd) {
        const ch = value[startEnd];
        if (ch === ' ')
            startWithSpace = true;
        else if (ch === '\n')
            startNlPos = startEnd;
        else
            break;
    }
    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
        value = value.substring(start.length);
        start = start.replace(/\n+/g, `$&${indent}`);
    }
    const indentSize = indent ? '2' : '1'; // root is at -1
    // Leading | or > is added later
    let header = (startWithSpace ? indentSize : '') + chomp;
    if (comment) {
        header += ' ' + commentString(comment.replace(/ ?[\r\n]+/g, ' '));
        if (onComment)
            onComment();
    }
    if (!literal) {
        const foldedValue = value
            .replace(/\n+/g, '\n$&')
            .replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, '$1$2') // more-indented lines aren't folded
            //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent
            .replace(/\n+/g, `$&${indent}`);
        let literalFallback = false;
        const foldOptions = getFoldOptions(ctx, true);
        if (blockQuote !== 'folded' && type !== Scalar.Scalar.BLOCK_FOLDED) {
            foldOptions.onOverflow = () => {
                literalFallback = true;
            };
        }
        const body = foldFlowLines.foldFlowLines(`${start}${foldedValue}${end}`, indent, foldFlowLines.FOLD_BLOCK, foldOptions);
        if (!literalFallback)
            return `>${header}\n${indent}${body}`;
    }
    value = value.replace(/\n+/g, `$&${indent}`);
    return `|${header}\n${indent}${start}${value}${end}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
    const { type, value } = item;
    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
    if ((implicitKey && value.includes('\n')) ||
        (inFlow && /[[\]{},]/.test(value))) {
        return quotedString(value, ctx);
    }
    if (/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
        // not allowed:
        // - '-' or '?'
        // - start with an indicator character (except [?:-]) or /[?-] /
        // - '\n ', ': ' or ' \n' anywhere
        // - '#' not preceded by a non-space char
        // - end with ' ' or ':'
        return implicitKey || inFlow || !value.includes('\n')
            ? quotedString(value, ctx)
            : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey &&
        !inFlow &&
        type !== Scalar.Scalar.PLAIN &&
        value.includes('\n')) {
        // Where allowed & type not set explicitly, prefer block style for multiline strings
        return blockString(item, ctx, onComment, onChompKeep);
    }
    if (containsDocumentMarker(value)) {
        if (indent === '') {
            ctx.forceBlockIndent = true;
            return blockString(item, ctx, onComment, onChompKeep);
        }
        else if (implicitKey && indent === indentStep) {
            return quotedString(value, ctx);
        }
    }
    const str = value.replace(/\n+/g, `$&\n${indent}`);
    // Verify that output will be parsed as a string, as e.g. plain numbers and
    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),
    // and others in v1.1.
    if (actualString) {
        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);
        const { compat, tags } = ctx.doc.schema;
        if (tags.some(test) || compat?.some(test))
            return quotedString(value, ctx);
    }
    return implicitKey
        ? str
        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
    const { implicitKey, inFlow } = ctx;
    const ss = typeof item.value === 'string'
        ? item
        : Object.assign({}, item, { value: String(item.value) });
    let { type } = item;
    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
        // force double quotes on control characters & unpaired surrogates
        if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
            type = Scalar.Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type) => {
        switch (_type) {
            case Scalar.Scalar.BLOCK_FOLDED:
            case Scalar.Scalar.BLOCK_LITERAL:
                return implicitKey || inFlow
                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers
                    : blockString(ss, ctx, onComment, onChompKeep);
            case Scalar.Scalar.QUOTE_DOUBLE:
                return doubleQuotedString(ss.value, ctx);
            case Scalar.Scalar.QUOTE_SINGLE:
                return singleQuotedString(ss.value, ctx);
            case Scalar.Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
            default:
                return null;
        }
    };
    let res = _stringify(type);
    if (res === null) {
        const { defaultKeyType, defaultStringType } = ctx.options;
        const t = (implicitKey && defaultKeyType) || defaultStringType;
        res = _stringify(t);
        if (res === null)
            throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
}

exports.stringifyString = stringifyString;


/***/ }),
/* 165 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


const FOLD_FLOW = 'flow';
const FOLD_BLOCK = 'block';
const FOLD_QUOTED = 'quoted';
/**
 * Tries to keep input at up to `lineWidth` characters, splitting only on spaces
 * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are
 * terminated with `\n` and started with `indent`.
 */
function foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
    if (!lineWidth || lineWidth < 0)
        return text;
    if (lineWidth < minContentWidth)
        minContentWidth = 0;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep)
        return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === 'number') {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
            folds.push(0);
        else
            end = lineWidth - indentAtStart;
    }
    let split = undefined;
    let prev = undefined;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i, indent.length);
        if (i !== -1)
            end = i + endStep;
    }
    for (let ch; (ch = text[(i += 1)]);) {
        if (mode === FOLD_QUOTED && ch === '\\') {
            escStart = i;
            switch (text[i + 1]) {
                case 'x':
                    i += 3;
                    break;
                case 'u':
                    i += 5;
                    break;
                case 'U':
                    i += 9;
                    break;
                default:
                    i += 1;
            }
            escEnd = i;
        }
        if (ch === '\n') {
            if (mode === FOLD_BLOCK)
                i = consumeMoreIndentedLines(text, i, indent.length);
            end = i + indent.length + endStep;
            split = undefined;
        }
        else {
            if (ch === ' ' &&
                prev &&
                prev !== ' ' &&
                prev !== '\n' &&
                prev !== '\t') {
                // space surrounded by non-space can be replaced with newline + indent
                const next = text[i + 1];
                if (next && next !== ' ' && next !== '\n' && next !== '\t')
                    split = i;
            }
            if (i >= end) {
                if (split) {
                    folds.push(split);
                    end = split + endStep;
                    split = undefined;
                }
                else if (mode === FOLD_QUOTED) {
                    // white-space collected at end may stretch past lineWidth
                    while (prev === ' ' || prev === '\t') {
                        prev = ch;
                        ch = text[(i += 1)];
                        overflow = true;
                    }
                    // Account for newline escape, but don't break preceding escape
                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                    // Bail out if lineWidth & minContentWidth are shorter than an escape string
                    if (escapedFolds[j])
                        return text;
                    folds.push(j);
                    escapedFolds[j] = true;
                    end = j + endStep;
                    split = undefined;
                }
                else {
                    overflow = true;
                }
            }
        }
        prev = ch;
    }
    if (overflow && onOverflow)
        onOverflow();
    if (folds.length === 0)
        return text;
    if (onFold)
        onFold();
    let res = text.slice(0, folds[0]);
    for (let i = 0; i < folds.length; ++i) {
        const fold = folds[i];
        const end = folds[i + 1] || text.length;
        if (fold === 0)
            res = `\n${indent}${text.slice(0, end)}`;
        else {
            if (mode === FOLD_QUOTED && escapedFolds[fold])
                res += `${text[fold]}\\`;
            res += `\n${indent}${text.slice(fold + 1, end)}`;
        }
    }
    return res;
}
/**
 * Presumes `i + 1` is at the start of a line
 * @returns index of last newline in more-indented block
 */
function consumeMoreIndentedLines(text, i, indent) {
    let end = i;
    let start = i + 1;
    let ch = text[start];
    while (ch === ' ' || ch === '\t') {
        if (i < start + indent) {
            ch = text[++i];
        }
        else {
            do {
                ch = text[++i];
            } while (ch && ch !== '\n');
            end = i;
            start = i + 1;
            ch = text[start];
        }
    }
    return end;
}

exports.FOLD_BLOCK = FOLD_BLOCK;
exports.FOLD_FLOW = FOLD_FLOW;
exports.FOLD_QUOTED = FOLD_QUOTED;
exports.foldFlowLines = foldFlowLines;


/***/ }),
/* 166 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var log = __webpack_require__(167);
var merge = __webpack_require__(168);
var stringify = __webpack_require__(162);
var identity = __webpack_require__(149);
var toJS = __webpack_require__(156);

function addPairToJSMap(ctx, map, { key, value }) {
    if (identity.isNode(key) && key.addToJSMap)
        key.addToJSMap(ctx, map, value);
    // TODO: Should drop this special case for bare << handling
    else if (merge.isMergeKey(ctx, key))
        merge.addMergeToJSMap(ctx, map, value);
    else {
        const jsKey = toJS.toJS(key, '', ctx);
        if (map instanceof Map) {
            map.set(jsKey, toJS.toJS(value, jsKey, ctx));
        }
        else if (map instanceof Set) {
            map.add(jsKey);
        }
        else {
            const stringKey = stringifyKey(key, jsKey, ctx);
            const jsValue = toJS.toJS(value, stringKey, ctx);
            if (stringKey in map)
                Object.defineProperty(map, stringKey, {
                    value: jsValue,
                    writable: true,
                    enumerable: true,
                    configurable: true
                });
            else
                map[stringKey] = jsValue;
        }
    }
    return map;
}
function stringifyKey(key, jsKey, ctx) {
    if (jsKey === null)
        return '';
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    if (typeof jsKey !== 'object')
        return String(jsKey);
    if (identity.isNode(key) && ctx?.doc) {
        const strCtx = stringify.createStringifyContext(ctx.doc, {});
        strCtx.anchors = new Set();
        for (const node of ctx.anchors.keys())
            strCtx.anchors.add(node.anchor);
        strCtx.inFlow = true;
        strCtx.inStringifyKey = true;
        const strKey = key.toString(strCtx);
        if (!ctx.mapKeyWarned) {
            let jsonStr = JSON.stringify(strKey);
            if (jsonStr.length > 40)
                jsonStr = jsonStr.substring(0, 36) + '..."';
            log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
            ctx.mapKeyWarned = true;
        }
        return strKey;
    }
    return JSON.stringify(jsKey);
}

exports.addPairToJSMap = addPairToJSMap;


/***/ }),
/* 167 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var node_process = __webpack_require__(147);

function debug(logLevel, ...messages) {
    if (logLevel === 'debug')
        console.log(...messages);
}
function warn(logLevel, warning) {
    if (logLevel === 'debug' || logLevel === 'warn') {
        if (typeof node_process.emitWarning === 'function')
            node_process.emitWarning(warning);
        else
            console.warn(warning);
    }
}

exports.debug = debug;
exports.warn = warn;


/***/ }),
/* 168 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Scalar = __webpack_require__(159);

// If the value associated with a merge key is a single mapping node, each of
// its key/value pairs is inserted into the current mapping, unless the key
// already exists in it. If the value associated with the merge key is a
// sequence, then this sequence is expected to contain mapping nodes and each
// of these nodes is merged in turn according to its order in the sequence.
// Keys in mapping nodes earlier in the sequence override keys specified in
// later mapping nodes. -- http://yaml.org/type/merge.html
const MERGE_KEY = '<<';
const merge = {
    identify: value => value === MERGE_KEY ||
        (typeof value === 'symbol' && value.description === MERGE_KEY),
    default: 'key',
    tag: 'tag:yaml.org,2002:merge',
    test: /^<<$/,
    resolve: () => Object.assign(new Scalar.Scalar(Symbol(MERGE_KEY)), {
        addToJSMap: addMergeToJSMap
    }),
    stringify: () => MERGE_KEY
};
const isMergeKey = (ctx, key) => (merge.identify(key) ||
    (identity.isScalar(key) &&
        (!key.type || key.type === Scalar.Scalar.PLAIN) &&
        merge.identify(key.value))) &&
    ctx?.doc.schema.tags.some(tag => tag.tag === merge.tag && tag.default);
function addMergeToJSMap(ctx, map, value) {
    value = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
    if (identity.isSeq(value))
        for (const it of value.items)
            mergeValue(ctx, map, it);
    else if (Array.isArray(value))
        for (const it of value)
            mergeValue(ctx, map, it);
    else
        mergeValue(ctx, map, value);
}
function mergeValue(ctx, map, value) {
    const source = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
    if (!identity.isMap(source))
        throw new Error('Merge sources must be maps or map aliases');
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value] of srcMap) {
        if (map instanceof Map) {
            if (!map.has(key))
                map.set(key, value);
        }
        else if (map instanceof Set) {
            map.add(key);
        }
        else if (!Object.prototype.hasOwnProperty.call(map, key)) {
            Object.defineProperty(map, key, {
                value,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
    }
    return map;
}

exports.addMergeToJSMap = addMergeToJSMap;
exports.isMergeKey = isMergeKey;
exports.merge = merge;


/***/ }),
/* 169 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var map = __webpack_require__(170);
var seq = __webpack_require__(173);
var string = __webpack_require__(175);
var tags = __webpack_require__(176);

const sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
class Schema {
    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
        this.compat = Array.isArray(compat)
            ? tags.getTags(compat, 'compat')
            : compat
                ? tags.getTags(null, compat)
                : null;
        this.name = (typeof schema === 'string' && schema) || 'core';
        this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
        this.tags = tags.getTags(customTags, this.name, merge);
        this.toStringOptions = toStringDefaults ?? null;
        Object.defineProperty(this, identity.MAP, { value: map.map });
        Object.defineProperty(this, identity.SCALAR, { value: string.string });
        Object.defineProperty(this, identity.SEQ, { value: seq.seq });
        // Used by createMap()
        this.sortMapEntries =
            typeof sortMapEntries === 'function'
                ? sortMapEntries
                : sortMapEntries === true
                    ? sortMapEntriesByKey
                    : null;
    }
    clone() {
        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
        copy.tags = this.tags.slice();
        return copy;
    }
}

exports.Schema = Schema;


/***/ }),
/* 170 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var YAMLMap = __webpack_require__(171);

const map = {
    collection: 'map',
    default: true,
    nodeClass: YAMLMap.YAMLMap,
    tag: 'tag:yaml.org,2002:map',
    resolve(map, onError) {
        if (!identity.isMap(map))
            onError('Expected a mapping for this tag');
        return map;
    },
    createNode: (schema, obj, ctx) => YAMLMap.YAMLMap.from(schema, obj, ctx)
};

exports.map = map;


/***/ }),
/* 171 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var stringifyCollection = __webpack_require__(172);
var addPairToJSMap = __webpack_require__(166);
var Collection = __webpack_require__(157);
var identity = __webpack_require__(149);
var Pair = __webpack_require__(160);
var Scalar = __webpack_require__(159);

function findPair(items, key) {
    const k = identity.isScalar(key) ? key.value : key;
    for (const it of items) {
        if (identity.isPair(it)) {
            if (it.key === key || it.key === k)
                return it;
            if (identity.isScalar(it.key) && it.key.value === k)
                return it;
        }
    }
    return undefined;
}
class YAMLMap extends Collection.Collection {
    static get tagName() {
        return 'tag:yaml.org,2002:map';
    }
    constructor(schema) {
        super(identity.MAP, schema);
        this.items = [];
    }
    /**
     * A generic collection parsing method that can be extended
     * to other node classes that inherit from YAMLMap
     */
    static from(schema, obj, ctx) {
        const { keepUndefined, replacer } = ctx;
        const map = new this(schema);
        const add = (key, value) => {
            if (typeof replacer === 'function')
                value = replacer.call(obj, key, value);
            else if (Array.isArray(replacer) && !replacer.includes(key))
                return;
            if (value !== undefined || keepUndefined)
                map.items.push(Pair.createPair(key, value, ctx));
        };
        if (obj instanceof Map) {
            for (const [key, value] of obj)
                add(key, value);
        }
        else if (obj && typeof obj === 'object') {
            for (const key of Object.keys(obj))
                add(key, obj[key]);
        }
        if (typeof schema.sortMapEntries === 'function') {
            map.items.sort(schema.sortMapEntries);
        }
        return map;
    }
    /**
     * Adds a value to the collection.
     *
     * @param overwrite - If not set `true`, using a key that is already in the
     *   collection will throw. Otherwise, overwrites the previous value.
     */
    add(pair, overwrite) {
        let _pair;
        if (identity.isPair(pair))
            _pair = pair;
        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {
            // In TypeScript, this never happens.
            _pair = new Pair.Pair(pair, pair?.value);
        }
        else
            _pair = new Pair.Pair(pair.key, pair.value);
        const prev = findPair(this.items, _pair.key);
        const sortEntries = this.schema?.sortMapEntries;
        if (prev) {
            if (!overwrite)
                throw new Error(`Key ${_pair.key} already set`);
            // For scalars, keep the old node & its comments and anchors
            if (identity.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))
                prev.value.value = _pair.value;
            else
                prev.value = _pair.value;
        }
        else if (sortEntries) {
            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);
            if (i === -1)
                this.items.push(_pair);
            else
                this.items.splice(i, 0, _pair);
        }
        else {
            this.items.push(_pair);
        }
    }
    delete(key) {
        const it = findPair(this.items, key);
        if (!it)
            return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const it = findPair(this.items, key);
        const node = it?.value;
        return (!keepScalar && identity.isScalar(node) ? node.value : node) ?? undefined;
    }
    has(key) {
        return !!findPair(this.items, key);
    }
    set(key, value) {
        this.add(new Pair.Pair(key, value), true);
    }
    /**
     * @param ctx - Conversion context, originally set in Document#toJS()
     * @param {Class} Type - If set, forces the returned collection type
     * @returns Instance of Type, Map, or Object
     */
    toJSON(_, ctx, Type) {
        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};
        if (ctx?.onCreate)
            ctx.onCreate(map);
        for (const item of this.items)
            addPairToJSMap.addPairToJSMap(ctx, map, item);
        return map;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        for (const item of this.items) {
            if (!identity.isPair(item))
                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        if (!ctx.allNullValues && this.hasAllNullValues(false))
            ctx = Object.assign({}, ctx, { allNullValues: true });
        return stringifyCollection.stringifyCollection(this, ctx, {
            blockItemPrefix: '',
            flowChars: { start: '{', end: '}' },
            itemIndent: ctx.indent || '',
            onChompKeep,
            onComment
        });
    }
}

exports.YAMLMap = YAMLMap;
exports.findPair = findPair;


/***/ }),
/* 172 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var stringify = __webpack_require__(162);
var stringifyComment = __webpack_require__(163);

function stringifyCollection(collection, ctx, options) {
    const flow = ctx.inFlow ?? collection.flow;
    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify(collection, ctx, options);
}
function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
    const { indent, options: { commentString } } = ctx;
    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
    let chompKeep = false; // flag for the preceding node's status
    const lines = [];
    for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment = null;
        if (identity.isNode(item)) {
            if (!chompKeep && item.spaceBefore)
                lines.push('');
            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
            if (item.comment)
                comment = item.comment;
        }
        else if (identity.isPair(item)) {
            const ik = identity.isNode(item.key) ? item.key : null;
            if (ik) {
                if (!chompKeep && ik.spaceBefore)
                    lines.push('');
                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
            }
        }
        chompKeep = false;
        let str = stringify.stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));
        if (comment)
            str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
        if (chompKeep && comment)
            chompKeep = false;
        lines.push(blockItemPrefix + str);
    }
    let str;
    if (lines.length === 0) {
        str = flowChars.start + flowChars.end;
    }
    else {
        str = lines[0];
        for (let i = 1; i < lines.length; ++i) {
            const line = lines[i];
            str += line ? `\n${indent}${line}` : '\n';
        }
    }
    if (comment) {
        str += '\n' + stringifyComment.indentComment(commentString(comment), indent);
        if (onComment)
            onComment();
    }
    else if (chompKeep && onChompKeep)
        onChompKeep();
    return str;
}
function stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {
    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        inFlow: true,
        type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment = null;
        if (identity.isNode(item)) {
            if (item.spaceBefore)
                lines.push('');
            addCommentBefore(ctx, lines, item.commentBefore, false);
            if (item.comment)
                comment = item.comment;
        }
        else if (identity.isPair(item)) {
            const ik = identity.isNode(item.key) ? item.key : null;
            if (ik) {
                if (ik.spaceBefore)
                    lines.push('');
                addCommentBefore(ctx, lines, ik.commentBefore, false);
                if (ik.comment)
                    reqNewline = true;
            }
            const iv = identity.isNode(item.value) ? item.value : null;
            if (iv) {
                if (iv.comment)
                    comment = iv.comment;
                if (iv.commentBefore)
                    reqNewline = true;
            }
            else if (item.value == null && ik?.comment) {
                comment = ik.comment;
            }
        }
        if (comment)
            reqNewline = true;
        let str = stringify.stringify(item, itemCtx, () => (comment = null));
        if (i < items.length - 1)
            str += ',';
        if (comment)
            str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
        if (!reqNewline && (lines.length > linesAtValue || str.includes('\n')))
            reqNewline = true;
        lines.push(str);
        linesAtValue = lines.length;
    }
    const { start, end } = flowChars;
    if (lines.length === 0) {
        return start + end;
    }
    else {
        if (!reqNewline) {
            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
            reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;
        }
        if (reqNewline) {
            let str = start;
            for (const line of lines)
                str += line ? `\n${indentStep}${indent}${line}` : '\n';
            return `${str}\n${indent}${end}`;
        }
        else {
            return `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;
        }
    }
}
function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
    if (comment && chompKeep)
        comment = comment.replace(/^\n+/, '');
    if (comment) {
        const ic = stringifyComment.indentComment(commentString(comment), indent);
        lines.push(ic.trimStart()); // Avoid double indent on first line
    }
}

exports.stringifyCollection = stringifyCollection;


/***/ }),
/* 173 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var YAMLSeq = __webpack_require__(174);

const seq = {
    collection: 'seq',
    default: true,
    nodeClass: YAMLSeq.YAMLSeq,
    tag: 'tag:yaml.org,2002:seq',
    resolve(seq, onError) {
        if (!identity.isSeq(seq))
            onError('Expected a sequence for this tag');
        return seq;
    },
    createNode: (schema, obj, ctx) => YAMLSeq.YAMLSeq.from(schema, obj, ctx)
};

exports.seq = seq;


/***/ }),
/* 174 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var createNode = __webpack_require__(158);
var stringifyCollection = __webpack_require__(172);
var Collection = __webpack_require__(157);
var identity = __webpack_require__(149);
var Scalar = __webpack_require__(159);
var toJS = __webpack_require__(156);

class YAMLSeq extends Collection.Collection {
    static get tagName() {
        return 'tag:yaml.org,2002:seq';
    }
    constructor(schema) {
        super(identity.SEQ, schema);
        this.items = [];
    }
    add(value) {
        this.items.push(value);
    }
    /**
     * Removes a value from the collection.
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     *
     * @returns `true` if the item was found and removed.
     */
    delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== 'number')
            return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== 'number')
            return undefined;
        const it = this.items[idx];
        return !keepScalar && identity.isScalar(it) ? it.value : it;
    }
    /**
     * Checks if the collection includes a value with the key `key`.
     *
     * `key` must contain a representation of an integer for this to succeed.
     * It may be wrapped in a `Scalar`.
     */
    has(key) {
        const idx = asItemIndex(key);
        return typeof idx === 'number' && idx < this.items.length;
    }
    /**
     * Sets a value in this collection. For `!!set`, `value` needs to be a
     * boolean to add/remove the item from the set.
     *
     * If `key` does not contain a representation of an integer, this will throw.
     * It may be wrapped in a `Scalar`.
     */
    set(key, value) {
        const idx = asItemIndex(key);
        if (typeof idx !== 'number')
            throw new Error(`Expected a valid index, not ${key}.`);
        const prev = this.items[idx];
        if (identity.isScalar(prev) && Scalar.isScalarValue(value))
            prev.value = value;
        else
            this.items[idx] = value;
    }
    toJSON(_, ctx) {
        const seq = [];
        if (ctx?.onCreate)
            ctx.onCreate(seq);
        let i = 0;
        for (const item of this.items)
            seq.push(toJS.toJS(item, String(i++), ctx));
        return seq;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        return stringifyCollection.stringifyCollection(this, ctx, {
            blockItemPrefix: '- ',
            flowChars: { start: '[', end: ']' },
            itemIndent: (ctx.indent || '') + '  ',
            onChompKeep,
            onComment
        });
    }
    static from(schema, obj, ctx) {
        const { replacer } = ctx;
        const seq = new this(schema);
        if (obj && Symbol.iterator in Object(obj)) {
            let i = 0;
            for (let it of obj) {
                if (typeof replacer === 'function') {
                    const key = obj instanceof Set ? it : String(i++);
                    it = replacer.call(obj, key, it);
                }
                seq.items.push(createNode.createNode(it, undefined, ctx));
            }
        }
        return seq;
    }
}
function asItemIndex(key) {
    let idx = identity.isScalar(key) ? key.value : key;
    if (idx && typeof idx === 'string')
        idx = Number(idx);
    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0
        ? idx
        : null;
}

exports.YAMLSeq = YAMLSeq;


/***/ }),
/* 175 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var stringifyString = __webpack_require__(164);

const string = {
    identify: value => typeof value === 'string',
    default: true,
    tag: 'tag:yaml.org,2002:str',
    resolve: str => str,
    stringify(item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({ actualString: true }, ctx);
        return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);
    }
};

exports.string = string;


/***/ }),
/* 176 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var map = __webpack_require__(170);
var _null = __webpack_require__(177);
var seq = __webpack_require__(173);
var string = __webpack_require__(175);
var bool = __webpack_require__(178);
var float = __webpack_require__(179);
var int = __webpack_require__(181);
var schema = __webpack_require__(182);
var schema$1 = __webpack_require__(183);
var binary = __webpack_require__(184);
var merge = __webpack_require__(168);
var omap = __webpack_require__(186);
var pairs = __webpack_require__(187);
var schema$2 = __webpack_require__(188);
var set = __webpack_require__(192);
var timestamp = __webpack_require__(193);

const schemas = new Map([
    ['core', schema.schema],
    ['failsafe', [map.map, seq.seq, string.string]],
    ['json', schema$1.schema],
    ['yaml11', schema$2.schema],
    ['yaml-1.1', schema$2.schema]
]);
const tagsByName = {
    binary: binary.binary,
    bool: bool.boolTag,
    float: float.float,
    floatExp: float.floatExp,
    floatNaN: float.floatNaN,
    floatTime: timestamp.floatTime,
    int: int.int,
    intHex: int.intHex,
    intOct: int.intOct,
    intTime: timestamp.intTime,
    map: map.map,
    merge: merge.merge,
    null: _null.nullTag,
    omap: omap.omap,
    pairs: pairs.pairs,
    seq: seq.seq,
    set: set.set,
    timestamp: timestamp.timestamp
};
const coreKnownTags = {
    'tag:yaml.org,2002:binary': binary.binary,
    'tag:yaml.org,2002:merge': merge.merge,
    'tag:yaml.org,2002:omap': omap.omap,
    'tag:yaml.org,2002:pairs': pairs.pairs,
    'tag:yaml.org,2002:set': set.set,
    'tag:yaml.org,2002:timestamp': timestamp.timestamp
};
function getTags(customTags, schemaName, addMergeTag) {
    const schemaTags = schemas.get(schemaName);
    if (schemaTags && !customTags) {
        return addMergeTag && !schemaTags.includes(merge.merge)
            ? schemaTags.concat(merge.merge)
            : schemaTags.slice();
    }
    let tags = schemaTags;
    if (!tags) {
        if (Array.isArray(customTags))
            tags = [];
        else {
            const keys = Array.from(schemas.keys())
                .filter(key => key !== 'yaml11')
                .map(key => JSON.stringify(key))
                .join(', ');
            throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
        }
    }
    if (Array.isArray(customTags)) {
        for (const tag of customTags)
            tags = tags.concat(tag);
    }
    else if (typeof customTags === 'function') {
        tags = customTags(tags.slice());
    }
    if (addMergeTag)
        tags = tags.concat(merge.merge);
    return tags.reduce((tags, tag) => {
        const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;
        if (!tagObj) {
            const tagName = JSON.stringify(tag);
            const keys = Object.keys(tagsByName)
                .map(key => JSON.stringify(key))
                .join(', ');
            throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);
        }
        if (!tags.includes(tagObj))
            tags.push(tagObj);
        return tags;
    }, []);
}

exports.coreKnownTags = coreKnownTags;
exports.getTags = getTags;


/***/ }),
/* 177 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);

const nullTag = {
    identify: value => value == null,
    createNode: () => new Scalar.Scalar(null),
    default: true,
    tag: 'tag:yaml.org,2002:null',
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: () => new Scalar.Scalar(null),
    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)
        ? source
        : ctx.options.nullStr
};

exports.nullTag = nullTag;


/***/ }),
/* 178 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);

const boolTag = {
    identify: value => typeof value === 'boolean',
    default: true,
    tag: 'tag:yaml.org,2002:bool',
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: str => new Scalar.Scalar(str[0] === 't' || str[0] === 'T'),
    stringify({ source, value }, ctx) {
        if (source && boolTag.test.test(source)) {
            const sv = source[0] === 't' || source[0] === 'T';
            if (value === sv)
                return source;
        }
        return value ? ctx.options.trueStr : ctx.options.falseStr;
    }
};

exports.boolTag = boolTag;


/***/ }),
/* 179 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);
var stringifyNumber = __webpack_require__(180);

const floatNaN = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
    resolve: str => str.slice(-3).toLowerCase() === 'nan'
        ? NaN
        : str[0] === '-'
            ? Number.NEGATIVE_INFINITY
            : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
};
const floatExp = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    format: 'EXP',
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: str => parseFloat(str),
    stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
};
const float = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve(str) {
        const node = new Scalar.Scalar(parseFloat(str));
        const dot = str.indexOf('.');
        if (dot !== -1 && str[str.length - 1] === '0')
            node.minFractionDigits = str.length - dot - 1;
        return node;
    },
    stringify: stringifyNumber.stringifyNumber
};

exports.float = float;
exports.floatExp = floatExp;
exports.floatNaN = floatNaN;


/***/ }),
/* 180 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function stringifyNumber({ format, minFractionDigits, tag, value }) {
    if (typeof value === 'bigint')
        return String(value);
    const num = typeof value === 'number' ? value : Number(value);
    if (!isFinite(num))
        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';
    let n = JSON.stringify(value);
    if (!format &&
        minFractionDigits &&
        (!tag || tag === 'tag:yaml.org,2002:float') &&
        /^\d/.test(n)) {
        let i = n.indexOf('.');
        if (i < 0) {
            i = n.length;
            n += '.';
        }
        let d = minFractionDigits - (n.length - i - 1);
        while (d-- > 0)
            n += '0';
    }
    return n;
}

exports.stringifyNumber = stringifyNumber;


/***/ }),
/* 181 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var stringifyNumber = __webpack_require__(180);

const intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);
const intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));
function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value) && value >= 0)
        return prefix + value.toString(radix);
    return stringifyNumber.stringifyNumber(node);
}
const intOct = {
    identify: value => intIdentify(value) && value >= 0,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'OCT',
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
    stringify: node => intStringify(node, 8, '0o')
};
const int = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
};
const intHex = {
    identify: value => intIdentify(value) && value >= 0,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'HEX',
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: node => intStringify(node, 16, '0x')
};

exports.int = int;
exports.intHex = intHex;
exports.intOct = intOct;


/***/ }),
/* 182 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var map = __webpack_require__(170);
var _null = __webpack_require__(177);
var seq = __webpack_require__(173);
var string = __webpack_require__(175);
var bool = __webpack_require__(178);
var float = __webpack_require__(179);
var int = __webpack_require__(181);

const schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.boolTag,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float
];

exports.schema = schema;


/***/ }),
/* 183 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);
var map = __webpack_require__(170);
var seq = __webpack_require__(173);

function intIdentify(value) {
    return typeof value === 'bigint' || Number.isInteger(value);
}
const stringifyJSON = ({ value }) => JSON.stringify(value);
const jsonScalars = [
    {
        identify: value => typeof value === 'string',
        default: true,
        tag: 'tag:yaml.org,2002:str',
        resolve: str => str,
        stringify: stringifyJSON
    },
    {
        identify: value => value == null,
        createNode: () => new Scalar.Scalar(null),
        default: true,
        tag: 'tag:yaml.org,2002:null',
        test: /^null$/,
        resolve: () => null,
        stringify: stringifyJSON
    },
    {
        identify: value => typeof value === 'boolean',
        default: true,
        tag: 'tag:yaml.org,2002:bool',
        test: /^true$|^false$/,
        resolve: str => str === 'true',
        stringify: stringifyJSON
    },
    {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        test: /^-?(?:0|[1-9][0-9]*)$/,
        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
    },
    {
        identify: value => typeof value === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
        resolve: str => parseFloat(str),
        stringify: stringifyJSON
    }
];
const jsonError = {
    default: true,
    tag: '',
    test: /^/,
    resolve(str, onError) {
        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
        return str;
    }
};
const schema = [map.map, seq.seq].concat(jsonScalars, jsonError);

exports.schema = schema;


/***/ }),
/* 184 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var node_buffer = __webpack_require__(185);
var Scalar = __webpack_require__(159);
var stringifyString = __webpack_require__(164);

const binary = {
    identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array
    default: false,
    tag: 'tag:yaml.org,2002:binary',
    /**
     * Returns a Buffer in node and an Uint8Array in browsers
     *
     * To use the resulting buffer as an image, you'll want to do something like:
     *
     *   const blob = new Blob([buffer], { type: 'image/jpeg' })
     *   document.querySelector('#photo').src = URL.createObjectURL(blob)
     */
    resolve(src, onError) {
        if (typeof node_buffer.Buffer === 'function') {
            return node_buffer.Buffer.from(src, 'base64');
        }
        else if (typeof atob === 'function') {
            // On IE 11, atob() can't handle newlines
            const str = atob(src.replace(/[\n\r]/g, ''));
            const buffer = new Uint8Array(str.length);
            for (let i = 0; i < str.length; ++i)
                buffer[i] = str.charCodeAt(i);
            return buffer;
        }
        else {
            onError('This environment does not support reading binary tags; either Buffer or atob is required');
            return src;
        }
    },
    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
        if (!value)
            return '';
        const buf = value; // checked earlier by binary.identify()
        let str;
        if (typeof node_buffer.Buffer === 'function') {
            str =
                buf instanceof node_buffer.Buffer
                    ? buf.toString('base64')
                    : node_buffer.Buffer.from(buf.buffer).toString('base64');
        }
        else if (typeof btoa === 'function') {
            let s = '';
            for (let i = 0; i < buf.length; ++i)
                s += String.fromCharCode(buf[i]);
            str = btoa(s);
        }
        else {
            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');
        }
        type ?? (type = Scalar.Scalar.BLOCK_LITERAL);
        if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
            const n = Math.ceil(str.length / lineWidth);
            const lines = new Array(n);
            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
                lines[i] = str.substr(o, lineWidth);
            }
            str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? '\n' : ' ');
        }
        return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
    }
};

exports.binary = binary;


/***/ }),
/* 185 */
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),
/* 186 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var toJS = __webpack_require__(156);
var YAMLMap = __webpack_require__(171);
var YAMLSeq = __webpack_require__(174);
var pairs = __webpack_require__(187);

class YAMLOMap extends YAMLSeq.YAMLSeq {
    constructor() {
        super();
        this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
        this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
        this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
        this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
        this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
        this.tag = YAMLOMap.tag;
    }
    /**
     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
     * but TypeScript won't allow widening the signature of a child method.
     */
    toJSON(_, ctx) {
        if (!ctx)
            return super.toJSON(_);
        const map = new Map();
        if (ctx?.onCreate)
            ctx.onCreate(map);
        for (const pair of this.items) {
            let key, value;
            if (identity.isPair(pair)) {
                key = toJS.toJS(pair.key, '', ctx);
                value = toJS.toJS(pair.value, key, ctx);
            }
            else {
                key = toJS.toJS(pair, '', ctx);
            }
            if (map.has(key))
                throw new Error('Ordered maps must not include duplicate keys');
            map.set(key, value);
        }
        return map;
    }
    static from(schema, iterable, ctx) {
        const pairs$1 = pairs.createPairs(schema, iterable, ctx);
        const omap = new this();
        omap.items = pairs$1.items;
        return omap;
    }
}
YAMLOMap.tag = 'tag:yaml.org,2002:omap';
const omap = {
    collection: 'seq',
    identify: value => value instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: 'tag:yaml.org,2002:omap',
    resolve(seq, onError) {
        const pairs$1 = pairs.resolvePairs(seq, onError);
        const seenKeys = [];
        for (const { key } of pairs$1.items) {
            if (identity.isScalar(key)) {
                if (seenKeys.includes(key.value)) {
                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                }
                else {
                    seenKeys.push(key.value);
                }
            }
        }
        return Object.assign(new YAMLOMap(), pairs$1);
    },
    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)
};

exports.YAMLOMap = YAMLOMap;
exports.omap = omap;


/***/ }),
/* 187 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Pair = __webpack_require__(160);
var Scalar = __webpack_require__(159);
var YAMLSeq = __webpack_require__(174);

function resolvePairs(seq, onError) {
    if (identity.isSeq(seq)) {
        for (let i = 0; i < seq.items.length; ++i) {
            let item = seq.items[i];
            if (identity.isPair(item))
                continue;
            else if (identity.isMap(item)) {
                if (item.items.length > 1)
                    onError('Each pair must have its own sequence indicator');
                const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));
                if (item.commentBefore)
                    pair.key.commentBefore = pair.key.commentBefore
                        ? `${item.commentBefore}\n${pair.key.commentBefore}`
                        : item.commentBefore;
                if (item.comment) {
                    const cn = pair.value ?? pair.key;
                    cn.comment = cn.comment
                        ? `${item.comment}\n${cn.comment}`
                        : item.comment;
                }
                item = pair;
            }
            seq.items[i] = identity.isPair(item) ? item : new Pair.Pair(item);
        }
    }
    else
        onError('Expected a sequence for this tag');
    return seq;
}
function createPairs(schema, iterable, ctx) {
    const { replacer } = ctx;
    const pairs = new YAMLSeq.YAMLSeq(schema);
    pairs.tag = 'tag:yaml.org,2002:pairs';
    let i = 0;
    if (iterable && Symbol.iterator in Object(iterable))
        for (let it of iterable) {
            if (typeof replacer === 'function')
                it = replacer.call(iterable, String(i++), it);
            let key, value;
            if (Array.isArray(it)) {
                if (it.length === 2) {
                    key = it[0];
                    value = it[1];
                }
                else
                    throw new TypeError(`Expected [key, value] tuple: ${it}`);
            }
            else if (it && it instanceof Object) {
                const keys = Object.keys(it);
                if (keys.length === 1) {
                    key = keys[0];
                    value = it[key];
                }
                else {
                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
                }
            }
            else {
                key = it;
            }
            pairs.items.push(Pair.createPair(key, value, ctx));
        }
    return pairs;
}
const pairs = {
    collection: 'seq',
    default: false,
    tag: 'tag:yaml.org,2002:pairs',
    resolve: resolvePairs,
    createNode: createPairs
};

exports.createPairs = createPairs;
exports.pairs = pairs;
exports.resolvePairs = resolvePairs;


/***/ }),
/* 188 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var map = __webpack_require__(170);
var _null = __webpack_require__(177);
var seq = __webpack_require__(173);
var string = __webpack_require__(175);
var binary = __webpack_require__(184);
var bool = __webpack_require__(189);
var float = __webpack_require__(190);
var int = __webpack_require__(191);
var merge = __webpack_require__(168);
var omap = __webpack_require__(186);
var pairs = __webpack_require__(187);
var set = __webpack_require__(192);
var timestamp = __webpack_require__(193);

const schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.trueTag,
    bool.falseTag,
    int.intBin,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float,
    binary.binary,
    merge.merge,
    omap.omap,
    pairs.pairs,
    set.set,
    timestamp.intTime,
    timestamp.floatTime,
    timestamp.timestamp
];

exports.schema = schema;


/***/ }),
/* 189 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);

function boolStringify({ value, source }, ctx) {
    const boolObj = value ? trueTag : falseTag;
    if (source && boolObj.test.test(source))
        return source;
    return value ? ctx.options.trueStr : ctx.options.falseStr;
}
const trueTag = {
    identify: value => value === true,
    default: true,
    tag: 'tag:yaml.org,2002:bool',
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: () => new Scalar.Scalar(true),
    stringify: boolStringify
};
const falseTag = {
    identify: value => value === false,
    default: true,
    tag: 'tag:yaml.org,2002:bool',
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
    resolve: () => new Scalar.Scalar(false),
    stringify: boolStringify
};

exports.falseTag = falseTag;
exports.trueTag = trueTag;


/***/ }),
/* 190 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);
var stringifyNumber = __webpack_require__(180);

const floatNaN = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'
        ? NaN
        : str[0] === '-'
            ? Number.NEGATIVE_INFINITY
            : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
};
const floatExp = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    format: 'EXP',
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str.replace(/_/g, '')),
    stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
};
const float = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve(str) {
        const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, '')));
        const dot = str.indexOf('.');
        if (dot !== -1) {
            const f = str.substring(dot + 1).replace(/_/g, '');
            if (f[f.length - 1] === '0')
                node.minFractionDigits = f.length;
        }
        return node;
    },
    stringify: stringifyNumber.stringifyNumber
};

exports.float = float;
exports.floatExp = floatExp;
exports.floatNaN = floatNaN;


/***/ }),
/* 191 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var stringifyNumber = __webpack_require__(180);

const intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);
function intResolve(str, offset, radix, { intAsBigInt }) {
    const sign = str[0];
    if (sign === '-' || sign === '+')
        offset += 1;
    str = str.substring(offset).replace(/_/g, '');
    if (intAsBigInt) {
        switch (radix) {
            case 2:
                str = `0b${str}`;
                break;
            case 8:
                str = `0o${str}`;
                break;
            case 16:
                str = `0x${str}`;
                break;
        }
        const n = BigInt(str);
        return sign === '-' ? BigInt(-1) * n : n;
    }
    const n = parseInt(str, radix);
    return sign === '-' ? -1 * n : n;
}
function intStringify(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value)) {
        const str = value.toString(radix);
        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber.stringifyNumber(node);
}
const intBin = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'BIN',
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
    stringify: node => intStringify(node, 2, '0b')
};
const intOct = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'OCT',
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
    stringify: node => intStringify(node, 8, '0')
};
const int = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
};
const intHex = {
    identify: intIdentify,
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'HEX',
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: node => intStringify(node, 16, '0x')
};

exports.int = int;
exports.intBin = intBin;
exports.intHex = intHex;
exports.intOct = intOct;


/***/ }),
/* 192 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Pair = __webpack_require__(160);
var YAMLMap = __webpack_require__(171);

class YAMLSet extends YAMLMap.YAMLMap {
    constructor(schema) {
        super(schema);
        this.tag = YAMLSet.tag;
    }
    add(key) {
        let pair;
        if (identity.isPair(key))
            pair = key;
        else if (key &&
            typeof key === 'object' &&
            'key' in key &&
            'value' in key &&
            key.value === null)
            pair = new Pair.Pair(key.key, null);
        else
            pair = new Pair.Pair(key, null);
        const prev = YAMLMap.findPair(this.items, pair.key);
        if (!prev)
            this.items.push(pair);
    }
    /**
     * If `keepPair` is `true`, returns the Pair matching `key`.
     * Otherwise, returns the value of that Pair's key.
     */
    get(key, keepPair) {
        const pair = YAMLMap.findPair(this.items, key);
        return !keepPair && identity.isPair(pair)
            ? identity.isScalar(pair.key)
                ? pair.key.value
                : pair.key
            : pair;
    }
    set(key, value) {
        if (typeof value !== 'boolean')
            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
        const prev = YAMLMap.findPair(this.items, key);
        if (prev && !value) {
            this.items.splice(this.items.indexOf(prev), 1);
        }
        else if (!prev && value) {
            this.items.push(new Pair.Pair(key));
        }
    }
    toJSON(_, ctx) {
        return super.toJSON(_, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx)
            return JSON.stringify(this);
        if (this.hasAllNullValues(true))
            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
        else
            throw new Error('Set items must all have null values');
    }
    static from(schema, iterable, ctx) {
        const { replacer } = ctx;
        const set = new this(schema);
        if (iterable && Symbol.iterator in Object(iterable))
            for (let value of iterable) {
                if (typeof replacer === 'function')
                    value = replacer.call(iterable, value, value);
                set.items.push(Pair.createPair(value, null, ctx));
            }
        return set;
    }
}
YAMLSet.tag = 'tag:yaml.org,2002:set';
const set = {
    collection: 'map',
    identify: value => value instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: 'tag:yaml.org,2002:set',
    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),
    resolve(map, onError) {
        if (identity.isMap(map)) {
            if (map.hasAllNullValues(true))
                return Object.assign(new YAMLSet(), map);
            else
                onError('Set items must all have null values');
        }
        else
            onError('Expected a mapping for this tag');
        return map;
    }
};

exports.YAMLSet = YAMLSet;
exports.set = set;


/***/ }),
/* 193 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var stringifyNumber = __webpack_require__(180);

/** Internal types handle bigint as number, because TS can't figure it out. */
function parseSexagesimal(str, asBigInt) {
    const sign = str[0];
    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;
    const num = (n) => asBigInt ? BigInt(n) : Number(n);
    const res = parts
        .replace(/_/g, '')
        .split(':')
        .reduce((res, p) => res * num(60) + num(p), num(0));
    return (sign === '-' ? num(-1) * res : res);
}
/**
 * hhhh:mm:ss.sss
 *
 * Internal types handle bigint as number, because TS can't figure it out.
 */
function stringifySexagesimal(node) {
    let { value } = node;
    let num = (n) => n;
    if (typeof value === 'bigint')
        num = n => BigInt(n);
    else if (isNaN(value) || !isFinite(value))
        return stringifyNumber.stringifyNumber(node);
    let sign = '';
    if (value < 0) {
        sign = '-';
        value *= num(-1);
    }
    const _60 = num(60);
    const parts = [value % _60]; // seconds, including ms
    if (value < 60) {
        parts.unshift(0); // at least one : is required
    }
    else {
        value = (value - parts[0]) / _60;
        parts.unshift(value % _60); // minutes
        if (value >= 60) {
            value = (value - parts[0]) / _60;
            parts.unshift(value); // hours
        }
    }
    return (sign +
        parts
            .map(n => String(n).padStart(2, '0'))
            .join(':')
            .replace(/000000\d*$/, '') // % 60 may introduce error
    );
}
const intTime = {
    identify: value => typeof value === 'bigint' || Number.isInteger(value),
    default: true,
    tag: 'tag:yaml.org,2002:int',
    format: 'TIME',
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
};
const floatTime = {
    identify: value => typeof value === 'number',
    default: true,
    tag: 'tag:yaml.org,2002:float',
    format: 'TIME',
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: str => parseSexagesimal(str, false),
    stringify: stringifySexagesimal
};
const timestamp = {
    identify: value => value instanceof Date,
    default: true,
    tag: 'tag:yaml.org,2002:timestamp',
    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
    // may be omitted altogether, resulting in a date format. In such a case, the time part is
    // assumed to be 00:00:00Z (start of day, UTC).
    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd
        '(?:' + // time is optional
        '(?:t|T|[ \\t]+)' + // t | T | whitespace
        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?
        '(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30
        ')?$'),
    resolve(str) {
        const match = str.match(timestamp.test);
        if (!match)
            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');
        const [, year, month, day, hour, minute, second] = match.map(Number);
        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;
        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
        const tz = match[8];
        if (tz && tz !== 'Z') {
            let d = parseSexagesimal(tz, false);
            if (Math.abs(d) < 30)
                d *= 60;
            date -= 60000 * d;
        }
        return new Date(date);
    },
    stringify: ({ value }) => value?.toISOString().replace(/(T00:00:00)?\.000Z$/, '') ?? ''
};

exports.floatTime = floatTime;
exports.intTime = intTime;
exports.timestamp = timestamp;


/***/ }),
/* 194 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var stringify = __webpack_require__(162);
var stringifyComment = __webpack_require__(163);

function stringifyDocument(doc, options) {
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
        const dir = doc.directives.toString(doc);
        if (dir) {
            lines.push(dir);
            hasDirectives = true;
        }
        else if (doc.directives.docStart)
            hasDirectives = true;
    }
    if (hasDirectives)
        lines.push('---');
    const ctx = stringify.createStringifyContext(doc, options);
    const { commentString } = ctx.options;
    if (doc.commentBefore) {
        if (lines.length !== 1)
            lines.unshift('');
        const cs = commentString(doc.commentBefore);
        lines.unshift(stringifyComment.indentComment(cs, ''));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
        if (identity.isNode(doc.contents)) {
            if (doc.contents.spaceBefore && hasDirectives)
                lines.push('');
            if (doc.contents.commentBefore) {
                const cs = commentString(doc.contents.commentBefore);
                lines.push(stringifyComment.indentComment(cs, ''));
            }
            // top-level block scalars need to be indented if followed by a comment
            ctx.forceBlockIndent = !!doc.comment;
            contentComment = doc.contents.comment;
        }
        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);
        let body = stringify.stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);
        if (contentComment)
            body += stringifyComment.lineComment(body, '', commentString(contentComment));
        if ((body[0] === '|' || body[0] === '>') &&
            lines[lines.length - 1] === '---') {
            // Top-level block scalars with a preceding doc marker ought to use the
            // same line for their header.
            lines[lines.length - 1] = `--- ${body}`;
        }
        else
            lines.push(body);
    }
    else {
        lines.push(stringify.stringify(doc.contents, ctx));
    }
    if (doc.directives?.docEnd) {
        if (doc.comment) {
            const cs = commentString(doc.comment);
            if (cs.includes('\n')) {
                lines.push('...');
                lines.push(stringifyComment.indentComment(cs, ''));
            }
            else {
                lines.push(`... ${cs}`);
            }
        }
        else {
            lines.push('...');
        }
    }
    else {
        let dc = doc.comment;
        if (dc && chompKeep)
            dc = dc.replace(/^\n+/, '');
        if (dc) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')
                lines.push('');
            lines.push(stringifyComment.indentComment(commentString(dc), ''));
        }
    }
    return lines.join('\n') + '\n';
}

exports.stringifyDocument = stringifyDocument;


/***/ }),
/* 195 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


class YAMLError extends Error {
    constructor(name, pos, code, message) {
        super();
        this.name = name;
        this.code = code;
        this.message = message;
        this.pos = pos;
    }
}
class YAMLParseError extends YAMLError {
    constructor(pos, code, message) {
        super('YAMLParseError', pos, code, message);
    }
}
class YAMLWarning extends YAMLError {
    constructor(pos, code, message) {
        super('YAMLWarning', pos, code, message);
    }
}
const prettifyError = (src, lc) => (error) => {
    if (error.pos[0] === -1)
        return;
    error.linePos = error.pos.map(pos => lc.linePos(pos));
    const { line, col } = error.linePos[0];
    error.message += ` at line ${line}, column ${col}`;
    let ci = col - 1;
    let lineStr = src
        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])
        .replace(/[\n\r]+$/, '');
    // Trim to max 80 chars, keeping col position near the middle
    if (ci >= 60 && lineStr.length > 80) {
        const trimStart = Math.min(ci - 39, lineStr.length - 79);
        lineStr = '…' + lineStr.substring(trimStart);
        ci -= trimStart - 1;
    }
    if (lineStr.length > 80)
        lineStr = lineStr.substring(0, 79) + '…';
    // Include previous line in context if pointing at line start
    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
        // Regexp won't match if start is trimmed
        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
        if (prev.length > 80)
            prev = prev.substring(0, 79) + '…\n';
        lineStr = prev + lineStr;
    }
    if (/[^ ]/.test(lineStr)) {
        let count = 1;
        const end = error.linePos[1];
        if (end && end.line === line && end.col > col) {
            count = Math.max(1, Math.min(end.col - col, 80 - ci));
        }
        const pointer = ' '.repeat(ci) + '^'.repeat(count);
        error.message += `:\n\n${lineStr}\n${pointer}\n`;
    }
};

exports.YAMLError = YAMLError;
exports.YAMLParseError = YAMLParseError;
exports.YAMLWarning = YAMLWarning;
exports.prettifyError = prettifyError;


/***/ }),
/* 196 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Document = __webpack_require__(151);
var composeNode = __webpack_require__(197);
var resolveEnd = __webpack_require__(206);
var resolveProps = __webpack_require__(200);

function composeDoc(options, directives, { offset, start, value, end }, onError) {
    const opts = Object.assign({ _directives: directives }, options);
    const doc = new Document.Document(undefined, opts);
    const ctx = {
        atKey: false,
        atRoot: true,
        directives: doc.directives,
        options: doc.options,
        schema: doc.schema
    };
    const props = resolveProps.resolveProps(start, {
        indicator: 'doc-start',
        next: value ?? end?.[0],
        offset,
        onError,
        parentIndent: 0,
        startOnNewline: true
    });
    if (props.found) {
        doc.directives.docStart = true;
        if (value &&
            (value.type === 'block-map' || value.type === 'block-seq') &&
            !props.hasNewline)
            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');
    }
    // @ts-expect-error If Contents is set, let's trust the user
    doc.contents = value
        ? composeNode.composeNode(ctx, value, props, onError)
        : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);
    if (re.comment)
        doc.comment = re.comment;
    doc.range = [offset, contentEnd, re.offset];
    return doc;
}

exports.composeDoc = composeDoc;


/***/ }),
/* 197 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Alias = __webpack_require__(152);
var identity = __webpack_require__(149);
var composeCollection = __webpack_require__(198);
var composeScalar = __webpack_require__(207);
var resolveEnd = __webpack_require__(206);
var utilEmptyScalarPosition = __webpack_require__(210);

const CN = { composeNode, composeEmptyNode };
function composeNode(ctx, token, props, onError) {
    const atKey = ctx.atKey;
    const { spaceBefore, comment, anchor, tag } = props;
    let node;
    let isSrcToken = true;
    switch (token.type) {
        case 'alias':
            node = composeAlias(ctx, token, onError);
            if (anchor || tag)
                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');
            break;
        case 'scalar':
        case 'single-quoted-scalar':
        case 'double-quoted-scalar':
        case 'block-scalar':
            node = composeScalar.composeScalar(ctx, token, tag, onError);
            if (anchor)
                node.anchor = anchor.source.substring(1);
            break;
        case 'block-map':
        case 'block-seq':
        case 'flow-collection':
            node = composeCollection.composeCollection(CN, ctx, token, props, onError);
            if (anchor)
                node.anchor = anchor.source.substring(1);
            break;
        default: {
            const message = token.type === 'error'
                ? token.message
                : `Unsupported token (type: ${token.type})`;
            onError(token, 'UNEXPECTED_TOKEN', message);
            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);
            isSrcToken = false;
        }
    }
    if (anchor && node.anchor === '')
        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
    if (atKey &&
        ctx.options.stringKeys &&
        (!identity.isScalar(node) ||
            typeof node.value !== 'string' ||
            (node.tag && node.tag !== 'tag:yaml.org,2002:str'))) {
        const msg = 'With stringKeys, all keys must be strings';
        onError(tag ?? token, 'NON_STRING_KEY', msg);
    }
    if (spaceBefore)
        node.spaceBefore = true;
    if (comment) {
        if (token.type === 'scalar' && token.source === '')
            node.comment = comment;
        else
            node.commentBefore = comment;
    }
    // @ts-expect-error Type checking misses meaning of isSrcToken
    if (ctx.options.keepSourceTokens && isSrcToken)
        node.srcToken = token;
    return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
    const token = {
        type: 'scalar',
        offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),
        indent: -1,
        source: ''
    };
    const node = composeScalar.composeScalar(ctx, token, tag, onError);
    if (anchor) {
        node.anchor = anchor.source.substring(1);
        if (node.anchor === '')
            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
    }
    if (spaceBefore)
        node.spaceBefore = true;
    if (comment) {
        node.comment = comment;
        node.range[2] = end;
    }
    return node;
}
function composeAlias({ options }, { offset, source, end }, onError) {
    const alias = new Alias.Alias(source.substring(1));
    if (alias.source === '')
        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');
    if (alias.source.endsWith(':'))
        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [offset, valueEnd, re.offset];
    if (re.comment)
        alias.comment = re.comment;
    return alias;
}

exports.composeEmptyNode = composeEmptyNode;
exports.composeNode = composeNode;


/***/ }),
/* 198 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Scalar = __webpack_require__(159);
var YAMLMap = __webpack_require__(171);
var YAMLSeq = __webpack_require__(174);
var resolveBlockMap = __webpack_require__(199);
var resolveBlockSeq = __webpack_require__(204);
var resolveFlowCollection = __webpack_require__(205);

function resolveCollection(CN, ctx, token, onError, tagName, tag) {
    const coll = token.type === 'block-map'
        ? resolveBlockMap.resolveBlockMap(CN, ctx, token, onError, tag)
        : token.type === 'block-seq'
            ? resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError, tag)
            : resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError, tag);
    const Coll = coll.constructor;
    // If we got a tagName matching the class, or the tag name is '!',
    // then use the tagName from the node class used to create it.
    if (tagName === '!' || tagName === Coll.tagName) {
        coll.tag = Coll.tagName;
        return coll;
    }
    if (tagName)
        coll.tag = tagName;
    return coll;
}
function composeCollection(CN, ctx, token, props, onError) {
    const tagToken = props.tag;
    const tagName = !tagToken
        ? null
        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));
    if (token.type === 'block-seq') {
        const { anchor, newlineAfterProp: nl } = props;
        const lastProp = anchor && tagToken
            ? anchor.offset > tagToken.offset
                ? anchor
                : tagToken
            : (anchor ?? tagToken);
        if (lastProp && (!nl || nl.offset < lastProp.offset)) {
            const message = 'Missing newline after block sequence props';
            onError(lastProp, 'MISSING_CHAR', message);
        }
    }
    const expType = token.type === 'block-map'
        ? 'map'
        : token.type === 'block-seq'
            ? 'seq'
            : token.start.source === '{'
                ? 'map'
                : 'seq';
    // shortcut: check if it's a generic YAMLMap or YAMLSeq
    // before jumping into the custom tag logic.
    if (!tagToken ||
        !tagName ||
        tagName === '!' ||
        (tagName === YAMLMap.YAMLMap.tagName && expType === 'map') ||
        (tagName === YAMLSeq.YAMLSeq.tagName && expType === 'seq')) {
        return resolveCollection(CN, ctx, token, onError, tagName);
    }
    let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);
    if (!tag) {
        const kt = ctx.schema.knownTags[tagName];
        if (kt && kt.collection === expType) {
            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
            tag = kt;
        }
        else {
            if (kt) {
                onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection ?? 'scalar'}`, true);
            }
            else {
                onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);
            }
            return resolveCollection(CN, ctx, token, onError, tagName);
        }
    }
    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);
    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;
    const node = identity.isNode(res)
        ? res
        : new Scalar.Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag?.format)
        node.format = tag.format;
    return node;
}

exports.composeCollection = composeCollection;


/***/ }),
/* 199 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Pair = __webpack_require__(160);
var YAMLMap = __webpack_require__(171);
var resolveProps = __webpack_require__(200);
var utilContainsNewline = __webpack_require__(201);
var utilFlowIndentCheck = __webpack_require__(202);
var utilMapIncludes = __webpack_require__(203);

const startColMsg = 'All mapping items must start at the same column';
function resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {
    const NodeClass = tag?.nodeClass ?? YAMLMap.YAMLMap;
    const map = new NodeClass(ctx.schema);
    if (ctx.atRoot)
        ctx.atRoot = false;
    let offset = bm.offset;
    let commentEnd = null;
    for (const collItem of bm.items) {
        const { start, key, sep, value } = collItem;
        // key properties
        const keyProps = resolveProps.resolveProps(start, {
            indicator: 'explicit-key-ind',
            next: key ?? sep?.[0],
            offset,
            onError,
            parentIndent: bm.indent,
            startOnNewline: true
        });
        const implicitKey = !keyProps.found;
        if (implicitKey) {
            if (key) {
                if (key.type === 'block-seq')
                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');
                else if ('indent' in key && key.indent !== bm.indent)
                    onError(offset, 'BAD_INDENT', startColMsg);
            }
            if (!keyProps.anchor && !keyProps.tag && !sep) {
                commentEnd = keyProps.end;
                if (keyProps.comment) {
                    if (map.comment)
                        map.comment += '\n' + keyProps.comment;
                    else
                        map.comment = keyProps.comment;
                }
                continue;
            }
            if (keyProps.newlineAfterProp || utilContainsNewline.containsNewline(key)) {
                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');
            }
        }
        else if (keyProps.found?.indent !== bm.indent) {
            onError(offset, 'BAD_INDENT', startColMsg);
        }
        // key value
        ctx.atKey = true;
        const keyStart = keyProps.end;
        const keyNode = key
            ? composeNode(ctx, key, keyProps, onError)
            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
        if (ctx.schema.compat)
            utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
        ctx.atKey = false;
        if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
        // value properties
        const valueProps = resolveProps.resolveProps(sep ?? [], {
            indicator: 'map-value-ind',
            next: value,
            offset: keyNode.range[2],
            onError,
            parentIndent: bm.indent,
            startOnNewline: !key || key.type === 'block-scalar'
        });
        offset = valueProps.end;
        if (valueProps.found) {
            if (implicitKey) {
                if (value?.type === 'block-map' && !valueProps.hasNewline)
                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');
                if (ctx.options.strict &&
                    keyProps.start < valueProps.found.offset - 1024)
                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');
            }
            // value value
            const valueNode = value
                ? composeNode(ctx, value, valueProps, onError)
                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
            if (ctx.schema.compat)
                utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
            offset = valueNode.range[2];
            const pair = new Pair.Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            map.items.push(pair);
        }
        else {
            // key with no value
            if (implicitKey)
                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');
            if (valueProps.comment) {
                if (keyNode.comment)
                    keyNode.comment += '\n' + valueProps.comment;
                else
                    keyNode.comment = valueProps.comment;
            }
            const pair = new Pair.Pair(keyNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            map.items.push(pair);
        }
    }
    if (commentEnd && commentEnd < offset)
        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');
    map.range = [bm.offset, offset, commentEnd ?? offset];
    return map;
}

exports.resolveBlockMap = resolveBlockMap;


/***/ }),
/* 200 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = '';
    let commentSep = '';
    let hasNewline = false;
    let reqSpace = false;
    let tab = null;
    let anchor = null;
    let tag = null;
    let newlineAfterProp = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens) {
        if (reqSpace) {
            if (token.type !== 'space' &&
                token.type !== 'newline' &&
                token.type !== 'comma')
                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
            reqSpace = false;
        }
        if (tab) {
            if (atNewline && token.type !== 'comment' && token.type !== 'newline') {
                onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
            }
            tab = null;
        }
        switch (token.type) {
            case 'space':
                // At the doc level, tabs at line start may be parsed
                // as leading white space rather than indentation.
                // In a flow collection, only the parser handles indent.
                if (!flow &&
                    (indicator !== 'doc-start' || next?.type !== 'flow-collection') &&
                    token.source.includes('\t')) {
                    tab = token;
                }
                hasSpace = true;
                break;
            case 'comment': {
                if (!hasSpace)
                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
                const cb = token.source.substring(1) || ' ';
                if (!comment)
                    comment = cb;
                else
                    comment += commentSep + cb;
                commentSep = '';
                atNewline = false;
                break;
            }
            case 'newline':
                if (atNewline) {
                    if (comment)
                        comment += token.source;
                    else if (!found || indicator !== 'seq-item-ind')
                        spaceBefore = true;
                }
                else
                    commentSep += token.source;
                atNewline = true;
                hasNewline = true;
                if (anchor || tag)
                    newlineAfterProp = token;
                hasSpace = true;
                break;
            case 'anchor':
                if (anchor)
                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');
                if (token.source.endsWith(':'))
                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);
                anchor = token;
                start ?? (start = token.offset);
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            case 'tag': {
                if (tag)
                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');
                tag = token;
                start ?? (start = token.offset);
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            }
            case indicator:
                // Could here handle preceding comments differently
                if (anchor || tag)
                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);
                if (found)
                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);
                found = token;
                atNewline =
                    indicator === 'seq-item-ind' || indicator === 'explicit-key-ind';
                hasSpace = false;
                break;
            case 'comma':
                if (flow) {
                    if (comma)
                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);
                    comma = token;
                    atNewline = false;
                    hasSpace = false;
                    break;
                }
            // else fallthrough
            default:
                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);
                atNewline = false;
                hasSpace = false;
        }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace &&
        next &&
        next.type !== 'space' &&
        next.type !== 'newline' &&
        next.type !== 'comma' &&
        (next.type !== 'scalar' || next.source !== '')) {
        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
    }
    if (tab &&
        ((atNewline && tab.indent <= parentIndent) ||
            next?.type === 'block-map' ||
            next?.type === 'block-seq'))
        onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
    return {
        comma,
        found,
        spaceBefore,
        comment,
        hasNewline,
        anchor,
        tag,
        newlineAfterProp,
        end,
        start: start ?? end
    };
}

exports.resolveProps = resolveProps;


/***/ }),
/* 201 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function containsNewline(key) {
    if (!key)
        return null;
    switch (key.type) {
        case 'alias':
        case 'scalar':
        case 'double-quoted-scalar':
        case 'single-quoted-scalar':
            if (key.source.includes('\n'))
                return true;
            if (key.end)
                for (const st of key.end)
                    if (st.type === 'newline')
                        return true;
            return false;
        case 'flow-collection':
            for (const it of key.items) {
                for (const st of it.start)
                    if (st.type === 'newline')
                        return true;
                if (it.sep)
                    for (const st of it.sep)
                        if (st.type === 'newline')
                            return true;
                if (containsNewline(it.key) || containsNewline(it.value))
                    return true;
            }
            return false;
        default:
            return true;
    }
}

exports.containsNewline = containsNewline;


/***/ }),
/* 202 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var utilContainsNewline = __webpack_require__(201);

function flowIndentCheck(indent, fc, onError) {
    if (fc?.type === 'flow-collection') {
        const end = fc.end[0];
        if (end.indent === indent &&
            (end.source === ']' || end.source === '}') &&
            utilContainsNewline.containsNewline(fc)) {
            const msg = 'Flow end indicator should be more indented than parent';
            onError(end, 'BAD_INDENT', msg, true);
        }
    }
}

exports.flowIndentCheck = flowIndentCheck;


/***/ }),
/* 203 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);

function mapIncludes(ctx, items, search) {
    const { uniqueKeys } = ctx.options;
    if (uniqueKeys === false)
        return false;
    const isEqual = typeof uniqueKeys === 'function'
        ? uniqueKeys
        : (a, b) => a === b || (identity.isScalar(a) && identity.isScalar(b) && a.value === b.value);
    return items.some(pair => isEqual(pair.key, search));
}

exports.mapIncludes = mapIncludes;


/***/ }),
/* 204 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var YAMLSeq = __webpack_require__(174);
var resolveProps = __webpack_require__(200);
var utilFlowIndentCheck = __webpack_require__(202);

function resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {
    const NodeClass = tag?.nodeClass ?? YAMLSeq.YAMLSeq;
    const seq = new NodeClass(ctx.schema);
    if (ctx.atRoot)
        ctx.atRoot = false;
    if (ctx.atKey)
        ctx.atKey = false;
    let offset = bs.offset;
    let commentEnd = null;
    for (const { start, value } of bs.items) {
        const props = resolveProps.resolveProps(start, {
            indicator: 'seq-item-ind',
            next: value,
            offset,
            onError,
            parentIndent: bs.indent,
            startOnNewline: true
        });
        if (!props.found) {
            if (props.anchor || props.tag || value) {
                if (value && value.type === 'block-seq')
                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');
                else
                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');
            }
            else {
                commentEnd = props.end;
                if (props.comment)
                    seq.comment = props.comment;
                continue;
            }
        }
        const node = value
            ? composeNode(ctx, value, props, onError)
            : composeEmptyNode(ctx, props.end, start, null, props, onError);
        if (ctx.schema.compat)
            utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
        offset = node.range[2];
        seq.items.push(node);
    }
    seq.range = [bs.offset, offset, commentEnd ?? offset];
    return seq;
}

exports.resolveBlockSeq = resolveBlockSeq;


/***/ }),
/* 205 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Pair = __webpack_require__(160);
var YAMLMap = __webpack_require__(171);
var YAMLSeq = __webpack_require__(174);
var resolveEnd = __webpack_require__(206);
var resolveProps = __webpack_require__(200);
var utilContainsNewline = __webpack_require__(201);
var utilMapIncludes = __webpack_require__(203);

const blockMsg = 'Block collections are not allowed within flow collections';
const isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');
function resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {
    const isMap = fc.start.source === '{';
    const fcName = isMap ? 'flow map' : 'flow sequence';
    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq));
    const coll = new NodeClass(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot)
        ctx.atRoot = false;
    if (ctx.atKey)
        ctx.atKey = false;
    let offset = fc.offset + fc.start.source.length;
    for (let i = 0; i < fc.items.length; ++i) {
        const collItem = fc.items[i];
        const { start, key, sep, value } = collItem;
        const props = resolveProps.resolveProps(start, {
            flow: fcName,
            indicator: 'explicit-key-ind',
            next: key ?? sep?.[0],
            offset,
            onError,
            parentIndent: fc.indent,
            startOnNewline: false
        });
        if (!props.found) {
            if (!props.anchor && !props.tag && !sep && !value) {
                if (i === 0 && props.comma)
                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
                else if (i < fc.items.length - 1)
                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);
                if (props.comment) {
                    if (coll.comment)
                        coll.comment += '\n' + props.comment;
                    else
                        coll.comment = props.comment;
                }
                offset = props.end;
                continue;
            }
            if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))
                onError(key, // checked by containsNewline()
                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
        }
        if (i === 0) {
            if (props.comma)
                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
        }
        else {
            if (!props.comma)
                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);
            if (props.comment) {
                let prevItemComment = '';
                loop: for (const st of start) {
                    switch (st.type) {
                        case 'comma':
                        case 'space':
                            break;
                        case 'comment':
                            prevItemComment = st.source.substring(1);
                            break loop;
                        default:
                            break loop;
                    }
                }
                if (prevItemComment) {
                    let prev = coll.items[coll.items.length - 1];
                    if (identity.isPair(prev))
                        prev = prev.value ?? prev.key;
                    if (prev.comment)
                        prev.comment += '\n' + prevItemComment;
                    else
                        prev.comment = prevItemComment;
                    props.comment = props.comment.substring(prevItemComment.length + 1);
                }
            }
        }
        if (!isMap && !sep && !props.found) {
            // item is a value in a seq
            // → key & sep are empty, start does not include ? or :
            const valueNode = value
                ? composeNode(ctx, value, props, onError)
                : composeEmptyNode(ctx, props.end, sep, null, props, onError);
            coll.items.push(valueNode);
            offset = valueNode.range[2];
            if (isBlock(value))
                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
        }
        else {
            // item is a key+value pair
            // key value
            ctx.atKey = true;
            const keyStart = props.end;
            const keyNode = key
                ? composeNode(ctx, key, props, onError)
                : composeEmptyNode(ctx, keyStart, start, null, props, onError);
            if (isBlock(key))
                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);
            ctx.atKey = false;
            // value properties
            const valueProps = resolveProps.resolveProps(sep ?? [], {
                flow: fcName,
                indicator: 'map-value-ind',
                next: value,
                offset: keyNode.range[2],
                onError,
                parentIndent: fc.indent,
                startOnNewline: false
            });
            if (valueProps.found) {
                if (!isMap && !props.found && ctx.options.strict) {
                    if (sep)
                        for (const st of sep) {
                            if (st === valueProps.found)
                                break;
                            if (st.type === 'newline') {
                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
                                break;
                            }
                        }
                    if (props.start < valueProps.found.offset - 1024)
                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');
                }
            }
            else if (value) {
                if ('source' in value && value.source && value.source[0] === ':')
                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);
                else
                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);
            }
            // value value
            const valueNode = value
                ? composeNode(ctx, value, valueProps, onError)
                : valueProps.found
                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)
                    : null;
            if (valueNode) {
                if (isBlock(value))
                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
            }
            else if (valueProps.comment) {
                if (keyNode.comment)
                    keyNode.comment += '\n' + valueProps.comment;
                else
                    keyNode.comment = valueProps.comment;
            }
            const pair = new Pair.Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
            if (isMap) {
                const map = coll;
                if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
                map.items.push(pair);
            }
            else {
                const map = new YAMLMap.YAMLMap(ctx.schema);
                map.flow = true;
                map.items.push(pair);
                const endRange = (valueNode ?? keyNode).range;
                map.range = [keyNode.range[0], endRange[1], endRange[2]];
                coll.items.push(map);
            }
            offset = valueNode ? valueNode.range[2] : valueProps.end;
        }
    }
    const expectedEnd = isMap ? '}' : ']';
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd)
        cePos = ce.offset + ce.source.length;
    else {
        const name = fcName[0].toUpperCase() + fcName.substring(1);
        const msg = atRoot
            ? `${name} must end with a ${expectedEnd}`
            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);
        if (ce && ce.source.length !== 1)
            ee.unshift(ce);
    }
    if (ee.length > 0) {
        const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);
        if (end.comment) {
            if (coll.comment)
                coll.comment += '\n' + end.comment;
            else
                coll.comment = end.comment;
        }
        coll.range = [fc.offset, cePos, end.offset];
    }
    else {
        coll.range = [fc.offset, cePos, cePos];
    }
    return coll;
}

exports.resolveFlowCollection = resolveFlowCollection;


/***/ }),
/* 206 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function resolveEnd(end, offset, reqSpace, onError) {
    let comment = '';
    if (end) {
        let hasSpace = false;
        let sep = '';
        for (const token of end) {
            const { source, type } = token;
            switch (type) {
                case 'space':
                    hasSpace = true;
                    break;
                case 'comment': {
                    if (reqSpace && !hasSpace)
                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
                    const cb = source.substring(1) || ' ';
                    if (!comment)
                        comment = cb;
                    else
                        comment += sep + cb;
                    sep = '';
                    break;
                }
                case 'newline':
                    if (comment)
                        sep += source;
                    hasSpace = true;
                    break;
                default:
                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);
            }
            offset += source.length;
        }
    }
    return { comment, offset };
}

exports.resolveEnd = resolveEnd;


/***/ }),
/* 207 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var identity = __webpack_require__(149);
var Scalar = __webpack_require__(159);
var resolveBlockScalar = __webpack_require__(208);
var resolveFlowScalar = __webpack_require__(209);

function composeScalar(ctx, token, tagToken, onError) {
    const { value, type, comment, range } = token.type === 'block-scalar'
        ? resolveBlockScalar.resolveBlockScalar(ctx, token, onError)
        : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken
        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))
        : null;
    let tag;
    if (ctx.options.stringKeys && ctx.atKey) {
        tag = ctx.schema[identity.SCALAR];
    }
    else if (tagName)
        tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);
    else if (token.type === 'scalar')
        tag = findScalarTagByTest(ctx, value, token, onError);
    else
        tag = ctx.schema[identity.SCALAR];
    let scalar;
    try {
        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);
        scalar = identity.isScalar(res) ? res : new Scalar.Scalar(res);
    }
    catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);
        scalar = new Scalar.Scalar(value);
    }
    scalar.range = range;
    scalar.source = value;
    if (type)
        scalar.type = type;
    if (tagName)
        scalar.tag = tagName;
    if (tag.format)
        scalar.format = tag.format;
    if (comment)
        scalar.comment = comment;
    return scalar;
}
function findScalarTagByName(schema, value, tagName, tagToken, onError) {
    if (tagName === '!')
        return schema[identity.SCALAR]; // non-specific tag
    const matchWithTest = [];
    for (const tag of schema.tags) {
        if (!tag.collection && tag.tag === tagName) {
            if (tag.default && tag.test)
                matchWithTest.push(tag);
            else
                return tag;
        }
    }
    for (const tag of matchWithTest)
        if (tag.test?.test(value))
            return tag;
    const kt = schema.knownTags[tagName];
    if (kt && !kt.collection) {
        // Ensure that the known tag is available for stringifying,
        // but does not get used by default.
        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));
        return kt;
    }
    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');
    return schema[identity.SCALAR];
}
function findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {
    const tag = schema.tags.find(tag => (tag.default === true || (atKey && tag.default === 'key')) &&
        tag.test?.test(value)) || schema[identity.SCALAR];
    if (schema.compat) {
        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??
            schema[identity.SCALAR];
        if (tag.tag !== compat.tag) {
            const ts = directives.tagString(tag.tag);
            const cs = directives.tagString(compat.tag);
            const msg = `Value may be parsed as either ${ts} or ${cs}`;
            onError(token, 'TAG_RESOLVE_FAILED', msg, true);
        }
    }
    return tag;
}

exports.composeScalar = composeScalar;


/***/ }),
/* 208 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);

function resolveBlockScalar(ctx, scalar, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);
    if (!header)
        return { value: '', type: null, comment: '', range: [start, start, start] };
    const type = header.mode === '>' ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    // determine the end of content & start of chomping
    let chompStart = lines.length;
    for (let i = lines.length - 1; i >= 0; --i) {
        const content = lines[i][1];
        if (content === '' || content === '\r')
            chompStart = i;
        else
            break;
    }
    // shortcut for empty contents
    if (chompStart === 0) {
        const value = header.chomp === '+' && lines.length > 0
            ? '\n'.repeat(Math.max(1, lines.length - 1))
            : '';
        let end = start + header.length;
        if (scalar.source)
            end += scalar.source.length;
        return { value, type, comment: header.comment, range: [start, end, end] };
    }
    // find the indentation level to trim from start
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for (let i = 0; i < chompStart; ++i) {
        const [indent, content] = lines[i];
        if (content === '' || content === '\r') {
            if (header.indent === 0 && indent.length > trimIndent)
                trimIndent = indent.length;
        }
        else {
            if (indent.length < trimIndent) {
                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';
                onError(offset + indent.length, 'MISSING_CHAR', message);
            }
            if (header.indent === 0)
                trimIndent = indent.length;
            contentStart = i;
            if (trimIndent === 0 && !ctx.atRoot) {
                const message = 'Block scalar values in collections must be indented';
                onError(offset, 'BAD_INDENT', message);
            }
            break;
        }
        offset += indent.length + content.length + 1;
    }
    // include trailing more-indented empty lines in content
    for (let i = lines.length - 1; i >= chompStart; --i) {
        if (lines[i][0].length > trimIndent)
            chompStart = i + 1;
    }
    let value = '';
    let sep = '';
    let prevMoreIndented = false;
    // leading whitespace is kept intact
    for (let i = 0; i < contentStart; ++i)
        value += lines[i][0].slice(trimIndent) + '\n';
    for (let i = contentStart; i < chompStart; ++i) {
        let [indent, content] = lines[i];
        offset += indent.length + content.length + 1;
        const crlf = content[content.length - 1] === '\r';
        if (crlf)
            content = content.slice(0, -1);
        /* istanbul ignore if already caught in lexer */
        if (content && indent.length < trimIndent) {
            const src = header.indent
                ? 'explicit indentation indicator'
                : 'first line';
            const message = `Block scalar lines must not be less indented than their ${src}`;
            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);
            indent = '';
        }
        if (type === Scalar.Scalar.BLOCK_LITERAL) {
            value += sep + indent.slice(trimIndent) + content;
            sep = '\n';
        }
        else if (indent.length > trimIndent || content[0] === '\t') {
            // more-indented content within a folded block
            if (sep === ' ')
                sep = '\n';
            else if (!prevMoreIndented && sep === '\n')
                sep = '\n\n';
            value += sep + indent.slice(trimIndent) + content;
            sep = '\n';
            prevMoreIndented = true;
        }
        else if (content === '') {
            // empty line
            if (sep === '\n')
                value += '\n';
            else
                sep = '\n';
        }
        else {
            value += sep + content;
            sep = ' ';
            prevMoreIndented = false;
        }
    }
    switch (header.chomp) {
        case '-':
            break;
        case '+':
            for (let i = chompStart; i < lines.length; ++i)
                value += '\n' + lines[i][0].slice(trimIndent);
            if (value[value.length - 1] !== '\n')
                value += '\n';
            break;
        default:
            value += '\n';
    }
    const end = start + header.length + scalar.source.length;
    return { value, type, comment: header.comment, range: [start, end, end] };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
    /* istanbul ignore if should not happen */
    if (props[0].type !== 'block-scalar-header') {
        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');
        return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = '';
    let error = -1;
    for (let i = 1; i < source.length; ++i) {
        const ch = source[i];
        if (!chomp && (ch === '-' || ch === '+'))
            chomp = ch;
        else {
            const n = Number(ch);
            if (!indent && n)
                indent = n;
            else if (error === -1)
                error = offset + i;
        }
    }
    if (error !== -1)
        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = '';
    let length = source.length;
    for (let i = 1; i < props.length; ++i) {
        const token = props[i];
        switch (token.type) {
            case 'space':
                hasSpace = true;
            // fallthrough
            case 'newline':
                length += token.source.length;
                break;
            case 'comment':
                if (strict && !hasSpace) {
                    const message = 'Comments must be separated from other tokens by white space characters';
                    onError(token, 'MISSING_CHAR', message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
            case 'error':
                onError(token, 'UNEXPECTED_TOKEN', token.message);
                length += token.source.length;
                break;
            /* istanbul ignore next should not happen */
            default: {
                const message = `Unexpected token in block scalar header: ${token.type}`;
                onError(token, 'UNEXPECTED_TOKEN', message);
                const ts = token.source;
                if (ts && typeof ts === 'string')
                    length += ts.length;
            }
        }
    }
    return { mode, indent, chomp, comment, length };
}
/** @returns Array of lines split up as `[indent, content]` */
function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m?.[1]
        ? [m[1], first.slice(m[1].length)]
        : ['', first];
    const lines = [line0];
    for (let i = 1; i < split.length; i += 2)
        lines.push([split[i], split[i + 1]]);
    return lines;
}

exports.resolveBlockScalar = resolveBlockScalar;


/***/ }),
/* 209 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Scalar = __webpack_require__(159);
var resolveEnd = __webpack_require__(206);

function resolveFlowScalar(scalar, strict, onError) {
    const { offset, type, source, end } = scalar;
    let _type;
    let value;
    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
    switch (type) {
        case 'scalar':
            _type = Scalar.Scalar.PLAIN;
            value = plainValue(source, _onError);
            break;
        case 'single-quoted-scalar':
            _type = Scalar.Scalar.QUOTE_SINGLE;
            value = singleQuotedValue(source, _onError);
            break;
        case 'double-quoted-scalar':
            _type = Scalar.Scalar.QUOTE_DOUBLE;
            value = doubleQuotedValue(source, _onError);
            break;
        /* istanbul ignore next should not happen */
        default:
            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);
            return {
                value: '',
                type: null,
                comment: '',
                range: [offset, offset + source.length, offset + source.length]
            };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);
    return {
        value,
        type: _type,
        comment: re.comment,
        range: [offset, valueEnd, re.offset]
    };
}
function plainValue(source, onError) {
    let badChar = '';
    switch (source[0]) {
        /* istanbul ignore next should not happen */
        case '\t':
            badChar = 'a tab character';
            break;
        case ',':
            badChar = 'flow indicator character ,';
            break;
        case '%':
            badChar = 'directive indicator character %';
            break;
        case '|':
        case '>': {
            badChar = `block scalar indicator ${source[0]}`;
            break;
        }
        case '@':
        case '`': {
            badChar = `reserved character ${source[0]}`;
            break;
        }
    }
    if (badChar)
        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);
    return foldLines(source);
}
function singleQuotedValue(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1)
        onError(source.length, 'MISSING_CHAR', "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
    /**
     * The negative lookbehind here and in the `re` RegExp is to
     * prevent causing a polynomial search time in certain cases.
     *
     * The try-catch is for Safari, which doesn't support this yet:
     * https://caniuse.com/js-regexp-lookbehind
     */
    let first, line;
    try {
        first = new RegExp('(.*?)(?<![ \t])[ \t]*\r?\n', 'sy');
        line = new RegExp('[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n', 'sy');
    }
    catch {
        first = /(.*?)[ \t]*\r?\n/sy;
        line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
    }
    let match = first.exec(source);
    if (!match)
        return source;
    let res = match[1];
    let sep = ' ';
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while ((match = line.exec(source))) {
        if (match[1] === '') {
            if (sep === '\n')
                res += sep;
            else
                sep = '\n';
        }
        else {
            res += sep + match[1];
            sep = ' ';
        }
        pos = line.lastIndex;
    }
    const last = /[ \t]*(.*)/sy;
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + (match?.[1] ?? '');
}
function doubleQuotedValue(source, onError) {
    let res = '';
    for (let i = 1; i < source.length - 1; ++i) {
        const ch = source[i];
        if (ch === '\r' && source[i + 1] === '\n')
            continue;
        if (ch === '\n') {
            const { fold, offset } = foldNewline(source, i);
            res += fold;
            i = offset;
        }
        else if (ch === '\\') {
            let next = source[++i];
            const cc = escapeCodes[next];
            if (cc)
                res += cc;
            else if (next === '\n') {
                // skip escaped newlines, but still trim the following line
                next = source[i + 1];
                while (next === ' ' || next === '\t')
                    next = source[++i + 1];
            }
            else if (next === '\r' && source[i + 1] === '\n') {
                // skip escaped CRLF newlines, but still trim the following line
                next = source[++i + 1];
                while (next === ' ' || next === '\t')
                    next = source[++i + 1];
            }
            else if (next === 'x' || next === 'u' || next === 'U') {
                const length = { x: 2, u: 4, U: 8 }[next];
                res += parseCharCode(source, i + 1, length, onError);
                i += length;
            }
            else {
                const raw = source.substr(i - 1, 2);
                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
                res += raw;
            }
        }
        else if (ch === ' ' || ch === '\t') {
            // trim trailing whitespace
            const wsStart = i;
            let next = source[i + 1];
            while (next === ' ' || next === '\t')
                next = source[++i + 1];
            if (next !== '\n' && !(next === '\r' && source[i + 2] === '\n'))
                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
        }
        else {
            res += ch;
        }
    }
    if (source[source.length - 1] !== '"' || source.length === 1)
        onError(source.length, 'MISSING_CHAR', 'Missing closing "quote');
    return res;
}
/**
 * Fold a single newline into a space, multiple newlines to N - 1 newlines.
 * Presumes `source[offset] === '\n'`
 */
function foldNewline(source, offset) {
    let fold = '';
    let ch = source[offset + 1];
    while (ch === ' ' || ch === '\t' || ch === '\n' || ch === '\r') {
        if (ch === '\r' && source[offset + 2] !== '\n')
            break;
        if (ch === '\n')
            fold += '\n';
        offset += 1;
        ch = source[offset + 1];
    }
    if (!fold)
        fold = ' ';
    return { fold, offset };
}
const escapeCodes = {
    '0': '\0', // null character
    a: '\x07', // bell character
    b: '\b', // backspace
    e: '\x1b', // escape character
    f: '\f', // form feed
    n: '\n', // line feed
    r: '\r', // carriage return
    t: '\t', // horizontal tab
    v: '\v', // vertical tab
    N: '\u0085', // Unicode next line
    _: '\u00a0', // Unicode non-breaking space
    L: '\u2028', // Unicode line separator
    P: '\u2029', // Unicode paragraph separator
    ' ': ' ',
    '"': '"',
    '/': '/',
    '\\': '\\',
    '\t': '\t'
};
function parseCharCode(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
        const raw = source.substr(offset - 2, length + 2);
        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
        return raw;
    }
    return String.fromCodePoint(code);
}

exports.resolveFlowScalar = resolveFlowScalar;


/***/ }),
/* 210 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


function emptyScalarPosition(offset, before, pos) {
    if (before) {
        pos ?? (pos = before.length);
        for (let i = pos - 1; i >= 0; --i) {
            let st = before[i];
            switch (st.type) {
                case 'space':
                case 'comment':
                case 'newline':
                    offset -= st.source.length;
                    continue;
            }
            // Technically, an empty scalar is immediately after the last non-empty
            // node, but it's more useful to place it after any whitespace.
            st = before[++i];
            while (st?.type === 'space') {
                offset += st.source.length;
                st = before[++i];
            }
            break;
        }
    }
    return offset;
}

exports.emptyScalarPosition = emptyScalarPosition;


/***/ }),
/* 211 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var cstScalar = __webpack_require__(212);
var cstStringify = __webpack_require__(213);
var cstVisit = __webpack_require__(214);

/** The byte order mark */
const BOM = '\u{FEFF}';
/** Start of doc-mode */
const DOCUMENT = '\x02'; // C0: Start of Text
/** Unexpected end of flow-mode */
const FLOW_END = '\x18'; // C0: Cancel
/** Next token is a scalar value */
const SCALAR = '\x1f'; // C0: Unit Separator
/** @returns `true` if `token` is a flow or block collection */
const isCollection = (token) => !!token && 'items' in token;
/** @returns `true` if `token` is a flow or block scalar; not an alias */
const isScalar = (token) => !!token &&
    (token.type === 'scalar' ||
        token.type === 'single-quoted-scalar' ||
        token.type === 'double-quoted-scalar' ||
        token.type === 'block-scalar');
/* istanbul ignore next */
/** Get a printable representation of a lexer token */
function prettyToken(token) {
    switch (token) {
        case BOM:
            return '<BOM>';
        case DOCUMENT:
            return '<DOC>';
        case FLOW_END:
            return '<FLOW_END>';
        case SCALAR:
            return '<SCALAR>';
        default:
            return JSON.stringify(token);
    }
}
/** Identify the type of a lexer token. May return `null` for unknown tokens. */
function tokenType(source) {
    switch (source) {
        case BOM:
            return 'byte-order-mark';
        case DOCUMENT:
            return 'doc-mode';
        case FLOW_END:
            return 'flow-error-end';
        case SCALAR:
            return 'scalar';
        case '---':
            return 'doc-start';
        case '...':
            return 'doc-end';
        case '':
        case '\n':
        case '\r\n':
            return 'newline';
        case '-':
            return 'seq-item-ind';
        case '?':
            return 'explicit-key-ind';
        case ':':
            return 'map-value-ind';
        case '{':
            return 'flow-map-start';
        case '}':
            return 'flow-map-end';
        case '[':
            return 'flow-seq-start';
        case ']':
            return 'flow-seq-end';
        case ',':
            return 'comma';
    }
    switch (source[0]) {
        case ' ':
        case '\t':
            return 'space';
        case '#':
            return 'comment';
        case '%':
            return 'directive-line';
        case '*':
            return 'alias';
        case '&':
            return 'anchor';
        case '!':
            return 'tag';
        case "'":
            return 'single-quoted-scalar';
        case '"':
            return 'double-quoted-scalar';
        case '|':
        case '>':
            return 'block-scalar-header';
    }
    return null;
}

exports.createScalarToken = cstScalar.createScalarToken;
exports.resolveAsScalar = cstScalar.resolveAsScalar;
exports.setScalarValue = cstScalar.setScalarValue;
exports.stringify = cstStringify.stringify;
exports.visit = cstVisit.visit;
exports.BOM = BOM;
exports.DOCUMENT = DOCUMENT;
exports.FLOW_END = FLOW_END;
exports.SCALAR = SCALAR;
exports.isCollection = isCollection;
exports.isScalar = isScalar;
exports.prettyToken = prettyToken;
exports.tokenType = tokenType;


/***/ }),
/* 212 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var resolveBlockScalar = __webpack_require__(208);
var resolveFlowScalar = __webpack_require__(209);
var errors = __webpack_require__(195);
var stringifyString = __webpack_require__(164);

function resolveAsScalar(token, strict = true, onError) {
    if (token) {
        const _onError = (pos, code, message) => {
            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
            if (onError)
                onError(offset, code, message);
            else
                throw new errors.YAMLParseError([offset, offset + 1], code, message);
        };
        switch (token.type) {
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);
            case 'block-scalar':
                return resolveBlockScalar.resolveBlockScalar({ options: { strict } }, token, _onError);
        }
    }
    return null;
}
/**
 * Create a new scalar token with `value`
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.indent The indent level of the token.
 * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.
 * @param context.offset The offset position of the token.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */
function createScalarToken(value, context) {
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;
    const source = stringifyString.stringifyString({ type, value }, {
        implicitKey,
        indent: indent > 0 ? ' '.repeat(indent) : '',
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    const end = context.end ?? [
        { type: 'newline', offset: -1, indent, source: '\n' }
    ];
    switch (source[0]) {
        case '|':
        case '>': {
            const he = source.indexOf('\n');
            const head = source.substring(0, he);
            const body = source.substring(he + 1) + '\n';
            const props = [
                { type: 'block-scalar-header', offset, indent, source: head }
            ];
            if (!addEndtoBlockProps(props, end))
                props.push({ type: 'newline', offset: -1, indent, source: '\n' });
            return { type: 'block-scalar', offset, indent, props, source: body };
        }
        case '"':
            return { type: 'double-quoted-scalar', offset, indent, source, end };
        case "'":
            return { type: 'single-quoted-scalar', offset, indent, source, end };
        default:
            return { type: 'scalar', offset, indent, source, end };
    }
}
/**
 * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.
 *
 * Best efforts are made to retain any comments previously associated with the `token`,
 * though all contents within a collection's `items` will be overwritten.
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.afterKey In most cases, values after a key should have an additional level of indentation.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */
function setScalarValue(token, value, context = {}) {
    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
    let indent = 'indent' in token ? token.indent : null;
    if (afterKey && typeof indent === 'number')
        indent += 2;
    if (!type)
        switch (token.type) {
            case 'single-quoted-scalar':
                type = 'QUOTE_SINGLE';
                break;
            case 'double-quoted-scalar':
                type = 'QUOTE_DOUBLE';
                break;
            case 'block-scalar': {
                const header = token.props[0];
                if (header.type !== 'block-scalar-header')
                    throw new Error('Invalid block scalar header');
                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';
                break;
            }
            default:
                type = 'PLAIN';
        }
    const source = stringifyString.stringifyString({ type, value }, {
        implicitKey: implicitKey || indent === null,
        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    switch (source[0]) {
        case '|':
        case '>':
            setBlockScalarValue(token, source);
            break;
        case '"':
            setFlowScalarValue(token, source, 'double-quoted-scalar');
            break;
        case "'":
            setFlowScalarValue(token, source, 'single-quoted-scalar');
            break;
        default:
            setFlowScalarValue(token, source, 'scalar');
    }
}
function setBlockScalarValue(token, source) {
    const he = source.indexOf('\n');
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + '\n';
    if (token.type === 'block-scalar') {
        const header = token.props[0];
        if (header.type !== 'block-scalar-header')
            throw new Error('Invalid block scalar header');
        header.source = head;
        token.source = body;
    }
    else {
        const { offset } = token;
        const indent = 'indent' in token ? token.indent : -1;
        const props = [
            { type: 'block-scalar-header', offset, indent, source: head }
        ];
        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))
            props.push({ type: 'newline', offset: -1, indent, source: '\n' });
        for (const key of Object.keys(token))
            if (key !== 'type' && key !== 'offset')
                delete token[key];
        Object.assign(token, { type: 'block-scalar', indent, props, source: body });
    }
}
/** @returns `true` if last token is a newline */
function addEndtoBlockProps(props, end) {
    if (end)
        for (const st of end)
            switch (st.type) {
                case 'space':
                case 'comment':
                    props.push(st);
                    break;
                case 'newline':
                    props.push(st);
                    return true;
            }
    return false;
}
function setFlowScalarValue(token, source, type) {
    switch (token.type) {
        case 'scalar':
        case 'double-quoted-scalar':
        case 'single-quoted-scalar':
            token.type = type;
            token.source = source;
            break;
        case 'block-scalar': {
            const end = token.props.slice(1);
            let oa = source.length;
            if (token.props[0].type === 'block-scalar-header')
                oa -= token.props[0].source.length;
            for (const tok of end)
                tok.offset += oa;
            delete token.props;
            Object.assign(token, { type, source, end });
            break;
        }
        case 'block-map':
        case 'block-seq': {
            const offset = token.offset + source.length;
            const nl = { type: 'newline', offset, indent: token.indent, source: '\n' };
            delete token.items;
            Object.assign(token, { type, source, end: [nl] });
            break;
        }
        default: {
            const indent = 'indent' in token ? token.indent : -1;
            const end = 'end' in token && Array.isArray(token.end)
                ? token.end.filter(st => st.type === 'space' ||
                    st.type === 'comment' ||
                    st.type === 'newline')
                : [];
            for (const key of Object.keys(token))
                if (key !== 'type' && key !== 'offset')
                    delete token[key];
            Object.assign(token, { type, indent, source, end });
        }
    }
}

exports.createScalarToken = createScalarToken;
exports.resolveAsScalar = resolveAsScalar;
exports.setScalarValue = setScalarValue;


/***/ }),
/* 213 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Stringify a CST document, token, or collection item
 *
 * Fair warning: This applies no validation whatsoever, and
 * simply concatenates the sources in their logical order.
 */
const stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);
function stringifyToken(token) {
    switch (token.type) {
        case 'block-scalar': {
            let res = '';
            for (const tok of token.props)
                res += stringifyToken(tok);
            return res + token.source;
        }
        case 'block-map':
        case 'block-seq': {
            let res = '';
            for (const item of token.items)
                res += stringifyItem(item);
            return res;
        }
        case 'flow-collection': {
            let res = token.start.source;
            for (const item of token.items)
                res += stringifyItem(item);
            for (const st of token.end)
                res += st.source;
            return res;
        }
        case 'document': {
            let res = stringifyItem(token);
            if (token.end)
                for (const st of token.end)
                    res += st.source;
            return res;
        }
        default: {
            let res = token.source;
            if ('end' in token && token.end)
                for (const st of token.end)
                    res += st.source;
            return res;
        }
    }
}
function stringifyItem({ start, key, sep, value }) {
    let res = '';
    for (const st of start)
        res += st.source;
    if (key)
        res += stringifyToken(key);
    if (sep)
        for (const st of sep)
            res += st.source;
    if (value)
        res += stringifyToken(value);
    return res;
}

exports.stringify = stringify;


/***/ }),
/* 214 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


const BREAK = Symbol('break visit');
const SKIP = Symbol('skip children');
const REMOVE = Symbol('remove item');
/**
 * Apply a visitor to a CST document or item.
 *
 * Walks through the tree (depth-first) starting from the root, calling a
 * `visitor` function with two arguments when entering each item:
 *   - `item`: The current item, which included the following members:
 *     - `start: SourceToken[]` – Source tokens before the key or value,
 *       possibly including its anchor or tag.
 *     - `key?: Token | null` – Set for pair values. May then be `null`, if
 *       the key before the `:` separator is empty.
 *     - `sep?: SourceToken[]` – Source tokens between the key and the value,
 *       which should include the `:` map value indicator if `value` is set.
 *     - `value?: Token` – The value of a sequence item, or of a map pair.
 *   - `path`: The steps from the root to the current node, as an array of
 *     `['key' | 'value', number]` tuples.
 *
 * The return value of the visitor may be used to control the traversal:
 *   - `undefined` (default): Do nothing and continue
 *   - `visit.SKIP`: Do not visit the children of this token, continue with
 *      next sibling
 *   - `visit.BREAK`: Terminate traversal completely
 *   - `visit.REMOVE`: Remove the current item, then continue with the next one
 *   - `number`: Set the index of the next step. This is useful especially if
 *     the index of the current token has changed.
 *   - `function`: Define the next visitor for this item. After the original
 *     visitor is called on item entry, next visitors are called after handling
 *     a non-empty `key` and when exiting the item.
 */
function visit(cst, visitor) {
    if ('type' in cst && cst.type === 'document')
        cst = { start: cst.start, value: cst.value };
    _visit(Object.freeze([]), cst, visitor);
}
// Without the `as symbol` casts, TS declares these in the `visit`
// namespace using `var`, but then complains about that because
// `unique symbol` must be `const`.
/** Terminate visit traversal completely */
visit.BREAK = BREAK;
/** Do not visit the children of the current item */
visit.SKIP = SKIP;
/** Remove the current item */
visit.REMOVE = REMOVE;
/** Find the item at `path` from `cst` as the root */
visit.itemAtPath = (cst, path) => {
    let item = cst;
    for (const [field, index] of path) {
        const tok = item?.[field];
        if (tok && 'items' in tok) {
            item = tok.items[index];
        }
        else
            return undefined;
    }
    return item;
};
/**
 * Get the immediate parent collection of the item at `path` from `cst` as the root.
 *
 * Throws an error if the collection is not found, which should never happen if the item itself exists.
 */
visit.parentCollection = (cst, path) => {
    const parent = visit.itemAtPath(cst, path.slice(0, -1));
    const field = path[path.length - 1][0];
    const coll = parent?.[field];
    if (coll && 'items' in coll)
        return coll;
    throw new Error('Parent collection not found');
};
function _visit(path, item, visitor) {
    let ctrl = visitor(item, path);
    if (typeof ctrl === 'symbol')
        return ctrl;
    for (const field of ['key', 'value']) {
        const token = item[field];
        if (token && 'items' in token) {
            for (let i = 0; i < token.items.length; ++i) {
                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);
                if (typeof ci === 'number')
                    i = ci - 1;
                else if (ci === BREAK)
                    return BREAK;
                else if (ci === REMOVE) {
                    token.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === 'function' && field === 'key')
                ctrl = ctrl(item, path);
        }
    }
    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;
}

exports.visit = visit;


/***/ }),
/* 215 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var cst = __webpack_require__(211);

/*
START -> stream

stream
  directive -> line-end -> stream
  indent + line-end -> stream
  [else] -> line-start

line-end
  comment -> line-end
  newline -> .
  input-end -> END

line-start
  doc-start -> doc
  doc-end -> stream
  [else] -> indent -> block-start

block-start
  seq-item-start -> block-start
  explicit-key-start -> block-start
  map-value-start -> block-start
  [else] -> doc

doc
  line-end -> line-start
  spaces -> doc
  anchor -> doc
  tag -> doc
  flow-start -> flow -> doc
  flow-end -> error -> doc
  seq-item-start -> error -> doc
  explicit-key-start -> error -> doc
  map-value-start -> doc
  alias -> doc
  quote-start -> quoted-scalar -> doc
  block-scalar-header -> line-end -> block-scalar(min) -> line-start
  [else] -> plain-scalar(false, min) -> doc

flow
  line-end -> flow
  spaces -> flow
  anchor -> flow
  tag -> flow
  flow-start -> flow -> flow
  flow-end -> .
  seq-item-start -> error -> flow
  explicit-key-start -> flow
  map-value-start -> flow
  alias -> flow
  quote-start -> quoted-scalar -> flow
  comma -> flow
  [else] -> plain-scalar(true, 0) -> flow

quoted-scalar
  quote-end -> .
  [else] -> quoted-scalar

block-scalar(min)
  newline + peek(indent < min) -> .
  [else] -> block-scalar(min)

plain-scalar(is-flow, min)
  scalar-end(is-flow) -> .
  peek(newline + (indent < min)) -> .
  [else] -> plain-scalar(min)
*/
function isEmpty(ch) {
    switch (ch) {
        case undefined:
        case ' ':
        case '\n':
        case '\r':
        case '\t':
            return true;
        default:
            return false;
    }
}
const hexDigits = new Set('0123456789ABCDEFabcdef');
const tagChars = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()");
const flowIndicatorChars = new Set(',[]{}');
const invalidAnchorChars = new Set(' ,[]{}\n\r\t');
const isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);
/**
 * Splits an input string into lexical tokens, i.e. smaller strings that are
 * easily identifiable by `tokens.tokenType()`.
 *
 * Lexing starts always in a "stream" context. Incomplete input may be buffered
 * until a complete token can be emitted.
 *
 * In addition to slices of the original input, the following control characters
 * may also be emitted:
 *
 * - `\x02` (Start of Text): A document starts with the next token
 * - `\x18` (Cancel): Unexpected end of flow-mode (indicates an error)
 * - `\x1f` (Unit Separator): Next token is a scalar value
 * - `\u{FEFF}` (Byte order mark): Emitted separately outside documents
 */
class Lexer {
    constructor() {
        /**
         * Flag indicating whether the end of the current buffer marks the end of
         * all input
         */
        this.atEnd = false;
        /**
         * Explicit indent set in block scalar header, as an offset from the current
         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not
         * explicitly set.
         */
        this.blockScalarIndent = -1;
        /**
         * Block scalars that include a + (keep) chomping indicator in their header
         * include trailing empty lines, which are otherwise excluded from the
         * scalar's contents.
         */
        this.blockScalarKeep = false;
        /** Current input */
        this.buffer = '';
        /**
         * Flag noting whether the map value indicator : can immediately follow this
         * node within a flow context.
         */
        this.flowKey = false;
        /** Count of surrounding flow collection levels. */
        this.flowLevel = 0;
        /**
         * Minimum level of indentation required for next lines to be parsed as a
         * part of the current scalar value.
         */
        this.indentNext = 0;
        /** Indentation level of the current line. */
        this.indentValue = 0;
        /** Position of the next \n character. */
        this.lineEndPos = null;
        /** Stores the state of the lexer if reaching the end of incpomplete input */
        this.next = null;
        /** A pointer to `buffer`; the current position of the lexer. */
        this.pos = 0;
    }
    /**
     * Generate YAML tokens from the `source` string. If `incomplete`,
     * a part of the last line may be left as a buffer for the next call.
     *
     * @returns A generator of lexical tokens
     */
    *lex(source, incomplete = false) {
        if (source) {
            if (typeof source !== 'string')
                throw TypeError('source is not a string');
            this.buffer = this.buffer ? this.buffer + source : source;
            this.lineEndPos = null;
        }
        this.atEnd = !incomplete;
        let next = this.next ?? 'stream';
        while (next && (incomplete || this.hasChars(1)))
            next = yield* this.parseNext(next);
    }
    atLineEnd() {
        let i = this.pos;
        let ch = this.buffer[i];
        while (ch === ' ' || ch === '\t')
            ch = this.buffer[++i];
        if (!ch || ch === '#' || ch === '\n')
            return true;
        if (ch === '\r')
            return this.buffer[i + 1] === '\n';
        return false;
    }
    charAt(n) {
        return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
        let ch = this.buffer[offset];
        if (this.indentNext > 0) {
            let indent = 0;
            while (ch === ' ')
                ch = this.buffer[++indent + offset];
            if (ch === '\r') {
                const next = this.buffer[indent + offset + 1];
                if (next === '\n' || (!next && !this.atEnd))
                    return offset + indent + 1;
            }
            return ch === '\n' || indent >= this.indentNext || (!ch && !this.atEnd)
                ? offset + indent
                : -1;
        }
        if (ch === '-' || ch === '.') {
            const dt = this.buffer.substr(offset, 3);
            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))
                return -1;
        }
        return offset;
    }
    getLine() {
        let end = this.lineEndPos;
        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {
            end = this.buffer.indexOf('\n', this.pos);
            this.lineEndPos = end;
        }
        if (end === -1)
            return this.atEnd ? this.buffer.substring(this.pos) : null;
        if (this.buffer[end - 1] === '\r')
            end -= 1;
        return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
        return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
        this.buffer = this.buffer.substring(this.pos);
        this.pos = 0;
        this.lineEndPos = null;
        this.next = state;
        return null;
    }
    peek(n) {
        return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
        switch (next) {
            case 'stream':
                return yield* this.parseStream();
            case 'line-start':
                return yield* this.parseLineStart();
            case 'block-start':
                return yield* this.parseBlockStart();
            case 'doc':
                return yield* this.parseDocument();
            case 'flow':
                return yield* this.parseFlowCollection();
            case 'quoted-scalar':
                return yield* this.parseQuotedScalar();
            case 'block-scalar':
                return yield* this.parseBlockScalar();
            case 'plain-scalar':
                return yield* this.parsePlainScalar();
        }
    }
    *parseStream() {
        let line = this.getLine();
        if (line === null)
            return this.setNext('stream');
        if (line[0] === cst.BOM) {
            yield* this.pushCount(1);
            line = line.substring(1);
        }
        if (line[0] === '%') {
            let dirEnd = line.length;
            let cs = line.indexOf('#');
            while (cs !== -1) {
                const ch = line[cs - 1];
                if (ch === ' ' || ch === '\t') {
                    dirEnd = cs - 1;
                    break;
                }
                else {
                    cs = line.indexOf('#', cs + 1);
                }
            }
            while (true) {
                const ch = line[dirEnd - 1];
                if (ch === ' ' || ch === '\t')
                    dirEnd -= 1;
                else
                    break;
            }
            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
            yield* this.pushCount(line.length - n); // possible comment
            this.pushNewline();
            return 'stream';
        }
        if (this.atLineEnd()) {
            const sp = yield* this.pushSpaces(true);
            yield* this.pushCount(line.length - sp);
            yield* this.pushNewline();
            return 'stream';
        }
        yield cst.DOCUMENT;
        return yield* this.parseLineStart();
    }
    *parseLineStart() {
        const ch = this.charAt(0);
        if (!ch && !this.atEnd)
            return this.setNext('line-start');
        if (ch === '-' || ch === '.') {
            if (!this.atEnd && !this.hasChars(4))
                return this.setNext('line-start');
            const s = this.peek(3);
            if ((s === '---' || s === '...') && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                this.indentValue = 0;
                this.indentNext = 0;
                return s === '---' ? 'doc' : 'stream';
            }
        }
        this.indentValue = yield* this.pushSpaces(false);
        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
            this.indentNext = this.indentValue;
        return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
        const [ch0, ch1] = this.peek(2);
        if (!ch1 && !this.atEnd)
            return this.setNext('block-start');
        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {
            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
            this.indentNext = this.indentValue + 1;
            this.indentValue += n;
            return yield* this.parseBlockStart();
        }
        return 'doc';
    }
    *parseDocument() {
        yield* this.pushSpaces(true);
        const line = this.getLine();
        if (line === null)
            return this.setNext('doc');
        let n = yield* this.pushIndicators();
        switch (line[n]) {
            case '#':
                yield* this.pushCount(line.length - n);
            // fallthrough
            case undefined:
                yield* this.pushNewline();
                return yield* this.parseLineStart();
            case '{':
            case '[':
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel = 1;
                return 'flow';
            case '}':
            case ']':
                // this is an error
                yield* this.pushCount(1);
                return 'doc';
            case '*':
                yield* this.pushUntil(isNotAnchorChar);
                return 'doc';
            case '"':
            case "'":
                return yield* this.parseQuotedScalar();
            case '|':
            case '>':
                n += yield* this.parseBlockScalarHeader();
                n += yield* this.pushSpaces(true);
                yield* this.pushCount(line.length - n);
                yield* this.pushNewline();
                return yield* this.parseBlockScalar();
            default:
                return yield* this.parsePlainScalar();
        }
    }
    *parseFlowCollection() {
        let nl, sp;
        let indent = -1;
        do {
            nl = yield* this.pushNewline();
            if (nl > 0) {
                sp = yield* this.pushSpaces(false);
                this.indentValue = indent = sp;
            }
            else {
                sp = 0;
            }
            sp += yield* this.pushSpaces(true);
        } while (nl + sp > 0);
        const line = this.getLine();
        if (line === null)
            return this.setNext('flow');
        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||
            (indent === 0 &&
                (line.startsWith('---') || line.startsWith('...')) &&
                isEmpty(line[3]))) {
            // Allowing for the terminal ] or } at the same (rather than greater)
            // indent level as the initial [ or { is technically invalid, but
            // failing here would be surprising to users.
            const atFlowEndMarker = indent === this.indentNext - 1 &&
                this.flowLevel === 1 &&
                (line[0] === ']' || line[0] === '}');
            if (!atFlowEndMarker) {
                // this is an error
                this.flowLevel = 0;
                yield cst.FLOW_END;
                return yield* this.parseLineStart();
            }
        }
        let n = 0;
        while (line[n] === ',') {
            n += yield* this.pushCount(1);
            n += yield* this.pushSpaces(true);
            this.flowKey = false;
        }
        n += yield* this.pushIndicators();
        switch (line[n]) {
            case undefined:
                return 'flow';
            case '#':
                yield* this.pushCount(line.length - n);
                return 'flow';
            case '{':
            case '[':
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel += 1;
                return 'flow';
            case '}':
            case ']':
                yield* this.pushCount(1);
                this.flowKey = true;
                this.flowLevel -= 1;
                return this.flowLevel ? 'flow' : 'doc';
            case '*':
                yield* this.pushUntil(isNotAnchorChar);
                return 'flow';
            case '"':
            case "'":
                this.flowKey = true;
                return yield* this.parseQuotedScalar();
            case ':': {
                const next = this.charAt(1);
                if (this.flowKey || isEmpty(next) || next === ',') {
                    this.flowKey = false;
                    yield* this.pushCount(1);
                    yield* this.pushSpaces(true);
                    return 'flow';
                }
            }
            // fallthrough
            default:
                this.flowKey = false;
                return yield* this.parsePlainScalar();
        }
    }
    *parseQuotedScalar() {
        const quote = this.charAt(0);
        let end = this.buffer.indexOf(quote, this.pos + 1);
        if (quote === "'") {
            while (end !== -1 && this.buffer[end + 1] === "'")
                end = this.buffer.indexOf("'", end + 2);
        }
        else {
            // double-quote
            while (end !== -1) {
                let n = 0;
                while (this.buffer[end - 1 - n] === '\\')
                    n += 1;
                if (n % 2 === 0)
                    break;
                end = this.buffer.indexOf('"', end + 1);
            }
        }
        // Only looking for newlines within the quotes
        const qb = this.buffer.substring(0, end);
        let nl = qb.indexOf('\n', this.pos);
        if (nl !== -1) {
            while (nl !== -1) {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1)
                    break;
                nl = qb.indexOf('\n', cs);
            }
            if (nl !== -1) {
                // this is an error caused by an unexpected unindent
                end = nl - (qb[nl - 1] === '\r' ? 2 : 1);
            }
        }
        if (end === -1) {
            if (!this.atEnd)
                return this.setNext('quoted-scalar');
            end = this.buffer.length;
        }
        yield* this.pushToIndex(end + 1, false);
        return this.flowLevel ? 'flow' : 'doc';
    }
    *parseBlockScalarHeader() {
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        let i = this.pos;
        while (true) {
            const ch = this.buffer[++i];
            if (ch === '+')
                this.blockScalarKeep = true;
            else if (ch > '0' && ch <= '9')
                this.blockScalarIndent = Number(ch) - 1;
            else if (ch !== '-')
                break;
        }
        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');
    }
    *parseBlockScalar() {
        let nl = this.pos - 1; // may be -1 if this.pos === 0
        let indent = 0;
        let ch;
        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {
            switch (ch) {
                case ' ':
                    indent += 1;
                    break;
                case '\n':
                    nl = i;
                    indent = 0;
                    break;
                case '\r': {
                    const next = this.buffer[i + 1];
                    if (!next && !this.atEnd)
                        return this.setNext('block-scalar');
                    if (next === '\n')
                        break;
                } // fallthrough
                default:
                    break loop;
            }
        }
        if (!ch && !this.atEnd)
            return this.setNext('block-scalar');
        if (indent >= this.indentNext) {
            if (this.blockScalarIndent === -1)
                this.indentNext = indent;
            else {
                this.indentNext =
                    this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
            }
            do {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1)
                    break;
                nl = this.buffer.indexOf('\n', cs);
            } while (nl !== -1);
            if (nl === -1) {
                if (!this.atEnd)
                    return this.setNext('block-scalar');
                nl = this.buffer.length;
            }
        }
        // Trailing insufficiently indented tabs are invalid.
        // To catch that during parsing, we include them in the block scalar value.
        let i = nl + 1;
        ch = this.buffer[i];
        while (ch === ' ')
            ch = this.buffer[++i];
        if (ch === '\t') {
            while (ch === '\t' || ch === ' ' || ch === '\r' || ch === '\n')
                ch = this.buffer[++i];
            nl = i - 1;
        }
        else if (!this.blockScalarKeep) {
            do {
                let i = nl - 1;
                let ch = this.buffer[i];
                if (ch === '\r')
                    ch = this.buffer[--i];
                const lastChar = i; // Drop the line if last char not more indented
                while (ch === ' ')
                    ch = this.buffer[--i];
                if (ch === '\n' && i >= this.pos && i + 1 + indent > lastChar)
                    nl = i;
                else
                    break;
            } while (true);
        }
        yield cst.SCALAR;
        yield* this.pushToIndex(nl + 1, true);
        return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
        const inFlow = this.flowLevel > 0;
        let end = this.pos - 1;
        let i = this.pos - 1;
        let ch;
        while ((ch = this.buffer[++i])) {
            if (ch === ':') {
                const next = this.buffer[i + 1];
                if (isEmpty(next) || (inFlow && flowIndicatorChars.has(next)))
                    break;
                end = i;
            }
            else if (isEmpty(ch)) {
                let next = this.buffer[i + 1];
                if (ch === '\r') {
                    if (next === '\n') {
                        i += 1;
                        ch = '\n';
                        next = this.buffer[i + 1];
                    }
                    else
                        end = i;
                }
                if (next === '#' || (inFlow && flowIndicatorChars.has(next)))
                    break;
                if (ch === '\n') {
                    const cs = this.continueScalar(i + 1);
                    if (cs === -1)
                        break;
                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'
                }
            }
            else {
                if (inFlow && flowIndicatorChars.has(ch))
                    break;
                end = i;
            }
        }
        if (!ch && !this.atEnd)
            return this.setNext('plain-scalar');
        yield cst.SCALAR;
        yield* this.pushToIndex(end + 1, true);
        return inFlow ? 'flow' : 'doc';
    }
    *pushCount(n) {
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos += n;
            return n;
        }
        return 0;
    }
    *pushToIndex(i, allowEmpty) {
        const s = this.buffer.slice(this.pos, i);
        if (s) {
            yield s;
            this.pos += s.length;
            return s.length;
        }
        else if (allowEmpty)
            yield '';
        return 0;
    }
    *pushIndicators() {
        switch (this.charAt(0)) {
            case '!':
                return ((yield* this.pushTag()) +
                    (yield* this.pushSpaces(true)) +
                    (yield* this.pushIndicators()));
            case '&':
                return ((yield* this.pushUntil(isNotAnchorChar)) +
                    (yield* this.pushSpaces(true)) +
                    (yield* this.pushIndicators()));
            case '-': // this is an error
            case '?': // this is an error outside flow collections
            case ':': {
                const inFlow = this.flowLevel > 0;
                const ch1 = this.charAt(1);
                if (isEmpty(ch1) || (inFlow && flowIndicatorChars.has(ch1))) {
                    if (!inFlow)
                        this.indentNext = this.indentValue + 1;
                    else if (this.flowKey)
                        this.flowKey = false;
                    return ((yield* this.pushCount(1)) +
                        (yield* this.pushSpaces(true)) +
                        (yield* this.pushIndicators()));
                }
            }
        }
        return 0;
    }
    *pushTag() {
        if (this.charAt(1) === '<') {
            let i = this.pos + 2;
            let ch = this.buffer[i];
            while (!isEmpty(ch) && ch !== '>')
                ch = this.buffer[++i];
            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);
        }
        else {
            let i = this.pos + 1;
            let ch = this.buffer[i];
            while (ch) {
                if (tagChars.has(ch))
                    ch = this.buffer[++i];
                else if (ch === '%' &&
                    hexDigits.has(this.buffer[i + 1]) &&
                    hexDigits.has(this.buffer[i + 2])) {
                    ch = this.buffer[(i += 3)];
                }
                else
                    break;
            }
            return yield* this.pushToIndex(i, false);
        }
    }
    *pushNewline() {
        const ch = this.buffer[this.pos];
        if (ch === '\n')
            return yield* this.pushCount(1);
        else if (ch === '\r' && this.charAt(1) === '\n')
            return yield* this.pushCount(2);
        else
            return 0;
    }
    *pushSpaces(allowTabs) {
        let i = this.pos - 1;
        let ch;
        do {
            ch = this.buffer[++i];
        } while (ch === ' ' || (allowTabs && ch === '\t'));
        const n = i - this.pos;
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos = i;
        }
        return n;
    }
    *pushUntil(test) {
        let i = this.pos;
        let ch = this.buffer[i];
        while (!test(ch))
            ch = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
    }
}

exports.Lexer = Lexer;


/***/ }),
/* 216 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Tracks newlines during parsing in order to provide an efficient API for
 * determining the one-indexed `{ line, col }` position for any offset
 * within the input.
 */
class LineCounter {
    constructor() {
        this.lineStarts = [];
        /**
         * Should be called in ascending order. Otherwise, call
         * `lineCounter.lineStarts.sort()` before calling `linePos()`.
         */
        this.addNewLine = (offset) => this.lineStarts.push(offset);
        /**
         * Performs a binary search and returns the 1-indexed { line, col }
         * position of `offset`. If `line === 0`, `addNewLine` has never been
         * called or `offset` is before the first known newline.
         */
        this.linePos = (offset) => {
            let low = 0;
            let high = this.lineStarts.length;
            while (low < high) {
                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)
                if (this.lineStarts[mid] < offset)
                    low = mid + 1;
                else
                    high = mid;
            }
            if (this.lineStarts[low] === offset)
                return { line: low + 1, col: 1 };
            if (low === 0)
                return { line: 0, col: offset };
            const start = this.lineStarts[low - 1];
            return { line: low, col: offset - start + 1 };
        };
    }
}

exports.LineCounter = LineCounter;


/***/ }),
/* 217 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var node_process = __webpack_require__(147);
var cst = __webpack_require__(211);
var lexer = __webpack_require__(215);

function includesToken(list, type) {
    for (let i = 0; i < list.length; ++i)
        if (list[i].type === type)
            return true;
    return false;
}
function findNonEmptyIndex(list) {
    for (let i = 0; i < list.length; ++i) {
        switch (list[i].type) {
            case 'space':
            case 'comment':
            case 'newline':
                break;
            default:
                return i;
        }
    }
    return -1;
}
function isFlowToken(token) {
    switch (token?.type) {
        case 'alias':
        case 'scalar':
        case 'single-quoted-scalar':
        case 'double-quoted-scalar':
        case 'flow-collection':
            return true;
        default:
            return false;
    }
}
function getPrevProps(parent) {
    switch (parent.type) {
        case 'document':
            return parent.start;
        case 'block-map': {
            const it = parent.items[parent.items.length - 1];
            return it.sep ?? it.start;
        }
        case 'block-seq':
            return parent.items[parent.items.length - 1].start;
        /* istanbul ignore next should not happen */
        default:
            return [];
    }
}
/** Note: May modify input array */
function getFirstKeyStartProps(prev) {
    if (prev.length === 0)
        return [];
    let i = prev.length;
    loop: while (--i >= 0) {
        switch (prev[i].type) {
            case 'doc-start':
            case 'explicit-key-ind':
            case 'map-value-ind':
            case 'seq-item-ind':
            case 'newline':
                break loop;
        }
    }
    while (prev[++i]?.type === 'space') {
        /* loop */
    }
    return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
    if (fc.start.type === 'flow-seq-start') {
        for (const it of fc.items) {
            if (it.sep &&
                !it.value &&
                !includesToken(it.start, 'explicit-key-ind') &&
                !includesToken(it.sep, 'map-value-ind')) {
                if (it.key)
                    it.value = it.key;
                delete it.key;
                if (isFlowToken(it.value)) {
                    if (it.value.end)
                        Array.prototype.push.apply(it.value.end, it.sep);
                    else
                        it.value.end = it.sep;
                }
                else
                    Array.prototype.push.apply(it.start, it.sep);
                delete it.sep;
            }
        }
    }
}
/**
 * A YAML concrete syntax tree (CST) parser
 *
 * ```ts
 * const src: string = ...
 * for (const token of new Parser().parse(src)) {
 *   // token: Token
 * }
 * ```
 *
 * To use the parser with a user-provided lexer:
 *
 * ```ts
 * function* parse(source: string, lexer: Lexer) {
 *   const parser = new Parser()
 *   for (const lexeme of lexer.lex(source))
 *     yield* parser.next(lexeme)
 *   yield* parser.end()
 * }
 *
 * const src: string = ...
 * const lexer = new Lexer()
 * for (const token of parse(src, lexer)) {
 *   // token: Token
 * }
 * ```
 */
class Parser {
    /**
     * @param onNewLine - If defined, called separately with the start position of
     *   each new line (in `parse()`, including the start of input).
     */
    constructor(onNewLine) {
        /** If true, space and sequence indicators count as indentation */
        this.atNewLine = true;
        /** If true, next token is a scalar value */
        this.atScalar = false;
        /** Current indentation level */
        this.indent = 0;
        /** Current offset since the start of parsing */
        this.offset = 0;
        /** On the same line with a block map key */
        this.onKeyLine = false;
        /** Top indicates the node that's currently being built */
        this.stack = [];
        /** The source of the current token, set in parse() */
        this.source = '';
        /** The type of the current token, set in parse() */
        this.type = '';
        // Must be defined after `next()`
        this.lexer = new lexer.Lexer();
        this.onNewLine = onNewLine;
    }
    /**
     * Parse `source` as a YAML stream.
     * If `incomplete`, a part of the last line may be left as a buffer for the next call.
     *
     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
     *
     * @returns A generator of tokens representing each directive, document, and other structure.
     */
    *parse(source, incomplete = false) {
        if (this.onNewLine && this.offset === 0)
            this.onNewLine(0);
        for (const lexeme of this.lexer.lex(source, incomplete))
            yield* this.next(lexeme);
        if (!incomplete)
            yield* this.end();
    }
    /**
     * Advance the parser by the `source` of one lexical token.
     */
    *next(source) {
        this.source = source;
        if (node_process.env.LOG_TOKENS)
            console.log('|', cst.prettyToken(source));
        if (this.atScalar) {
            this.atScalar = false;
            yield* this.step();
            this.offset += source.length;
            return;
        }
        const type = cst.tokenType(source);
        if (!type) {
            const message = `Not a YAML token: ${source}`;
            yield* this.pop({ type: 'error', offset: this.offset, message, source });
            this.offset += source.length;
        }
        else if (type === 'scalar') {
            this.atNewLine = false;
            this.atScalar = true;
            this.type = 'scalar';
        }
        else {
            this.type = type;
            yield* this.step();
            switch (type) {
                case 'newline':
                    this.atNewLine = true;
                    this.indent = 0;
                    if (this.onNewLine)
                        this.onNewLine(this.offset + source.length);
                    break;
                case 'space':
                    if (this.atNewLine && source[0] === ' ')
                        this.indent += source.length;
                    break;
                case 'explicit-key-ind':
                case 'map-value-ind':
                case 'seq-item-ind':
                    if (this.atNewLine)
                        this.indent += source.length;
                    break;
                case 'doc-mode':
                case 'flow-error-end':
                    return;
                default:
                    this.atNewLine = false;
            }
            this.offset += source.length;
        }
    }
    /** Call at end of input to push out any remaining constructions */
    *end() {
        while (this.stack.length > 0)
            yield* this.pop();
    }
    get sourceToken() {
        const st = {
            type: this.type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
        return st;
    }
    *step() {
        const top = this.peek(1);
        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {
            while (this.stack.length > 0)
                yield* this.pop();
            this.stack.push({
                type: 'doc-end',
                offset: this.offset,
                source: this.source
            });
            return;
        }
        if (!top)
            return yield* this.stream();
        switch (top.type) {
            case 'document':
                return yield* this.document(top);
            case 'alias':
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return yield* this.scalar(top);
            case 'block-scalar':
                return yield* this.blockScalar(top);
            case 'block-map':
                return yield* this.blockMap(top);
            case 'block-seq':
                return yield* this.blockSequence(top);
            case 'flow-collection':
                return yield* this.flowCollection(top);
            case 'doc-end':
                return yield* this.documentEnd(top);
        }
        /* istanbul ignore next should not happen */
        yield* this.pop();
    }
    peek(n) {
        return this.stack[this.stack.length - n];
    }
    *pop(error) {
        const token = error ?? this.stack.pop();
        /* istanbul ignore if should not happen */
        if (!token) {
            const message = 'Tried to pop an empty stack';
            yield { type: 'error', offset: this.offset, source: '', message };
        }
        else if (this.stack.length === 0) {
            yield token;
        }
        else {
            const top = this.peek(1);
            if (token.type === 'block-scalar') {
                // Block scalars use their parent rather than header indent
                token.indent = 'indent' in top ? top.indent : 0;
            }
            else if (token.type === 'flow-collection' && top.type === 'document') {
                // Ignore all indent for top-level flow collections
                token.indent = 0;
            }
            if (token.type === 'flow-collection')
                fixFlowSeqItems(token);
            switch (top.type) {
                case 'document':
                    top.value = token;
                    break;
                case 'block-scalar':
                    top.props.push(token); // error
                    break;
                case 'block-map': {
                    const it = top.items[top.items.length - 1];
                    if (it.value) {
                        top.items.push({ start: [], key: token, sep: [] });
                        this.onKeyLine = true;
                        return;
                    }
                    else if (it.sep) {
                        it.value = token;
                    }
                    else {
                        Object.assign(it, { key: token, sep: [] });
                        this.onKeyLine = !it.explicitKey;
                        return;
                    }
                    break;
                }
                case 'block-seq': {
                    const it = top.items[top.items.length - 1];
                    if (it.value)
                        top.items.push({ start: [], value: token });
                    else
                        it.value = token;
                    break;
                }
                case 'flow-collection': {
                    const it = top.items[top.items.length - 1];
                    if (!it || it.value)
                        top.items.push({ start: [], key: token, sep: [] });
                    else if (it.sep)
                        it.value = token;
                    else
                        Object.assign(it, { key: token, sep: [] });
                    return;
                }
                /* istanbul ignore next should not happen */
                default:
                    yield* this.pop();
                    yield* this.pop(token);
            }
            if ((top.type === 'document' ||
                top.type === 'block-map' ||
                top.type === 'block-seq') &&
                (token.type === 'block-map' || token.type === 'block-seq')) {
                const last = token.items[token.items.length - 1];
                if (last &&
                    !last.sep &&
                    !last.value &&
                    last.start.length > 0 &&
                    findNonEmptyIndex(last.start) === -1 &&
                    (token.indent === 0 ||
                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {
                    if (top.type === 'document')
                        top.end = last.start;
                    else
                        top.items.push({ start: last.start });
                    token.items.splice(-1, 1);
                }
            }
        }
    }
    *stream() {
        switch (this.type) {
            case 'directive-line':
                yield { type: 'directive', offset: this.offset, source: this.source };
                return;
            case 'byte-order-mark':
            case 'space':
            case 'comment':
            case 'newline':
                yield this.sourceToken;
                return;
            case 'doc-mode':
            case 'doc-start': {
                const doc = {
                    type: 'document',
                    offset: this.offset,
                    start: []
                };
                if (this.type === 'doc-start')
                    doc.start.push(this.sourceToken);
                this.stack.push(doc);
                return;
            }
        }
        yield {
            type: 'error',
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML stream`,
            source: this.source
        };
    }
    *document(doc) {
        if (doc.value)
            return yield* this.lineEnd(doc);
        switch (this.type) {
            case 'doc-start': {
                if (findNonEmptyIndex(doc.start) !== -1) {
                    yield* this.pop();
                    yield* this.step();
                }
                else
                    doc.start.push(this.sourceToken);
                return;
            }
            case 'anchor':
            case 'tag':
            case 'space':
            case 'comment':
            case 'newline':
                doc.start.push(this.sourceToken);
                return;
        }
        const bv = this.startBlockValue(doc);
        if (bv)
            this.stack.push(bv);
        else {
            yield {
                type: 'error',
                offset: this.offset,
                message: `Unexpected ${this.type} token in YAML document`,
                source: this.source
            };
        }
    }
    *scalar(scalar) {
        if (this.type === 'map-value-ind') {
            const prev = getPrevProps(this.peek(2));
            const start = getFirstKeyStartProps(prev);
            let sep;
            if (scalar.end) {
                sep = scalar.end;
                sep.push(this.sourceToken);
                delete scalar.end;
            }
            else
                sep = [this.sourceToken];
            const map = {
                type: 'block-map',
                offset: scalar.offset,
                indent: scalar.indent,
                items: [{ start, key: scalar, sep }]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = map;
        }
        else
            yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
        switch (this.type) {
            case 'space':
            case 'comment':
            case 'newline':
                scalar.props.push(this.sourceToken);
                return;
            case 'scalar':
                scalar.source = this.source;
                // block-scalar source includes trailing newline
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) {
                    let nl = this.source.indexOf('\n') + 1;
                    while (nl !== 0) {
                        this.onNewLine(this.offset + nl);
                        nl = this.source.indexOf('\n', nl) + 1;
                    }
                }
                yield* this.pop();
                break;
            /* istanbul ignore next should not happen */
            default:
                yield* this.pop();
                yield* this.step();
        }
    }
    *blockMap(map) {
        const it = map.items[map.items.length - 1];
        // it.sep is true-ish if pair already has key or : separator
        switch (this.type) {
            case 'newline':
                this.onKeyLine = false;
                if (it.value) {
                    const end = 'end' in it.value ? it.value.end : undefined;
                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;
                    if (last?.type === 'comment')
                        end?.push(this.sourceToken);
                    else
                        map.items.push({ start: [this.sourceToken] });
                }
                else if (it.sep) {
                    it.sep.push(this.sourceToken);
                }
                else {
                    it.start.push(this.sourceToken);
                }
                return;
            case 'space':
            case 'comment':
                if (it.value) {
                    map.items.push({ start: [this.sourceToken] });
                }
                else if (it.sep) {
                    it.sep.push(this.sourceToken);
                }
                else {
                    if (this.atIndentedComment(it.start, map.indent)) {
                        const prev = map.items[map.items.length - 2];
                        const end = prev?.value?.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            map.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
        }
        if (this.indent >= map.indent) {
            const atMapIndent = !this.onKeyLine && this.indent === map.indent;
            const atNextItem = atMapIndent &&
                (it.sep || it.explicitKey) &&
                this.type !== 'seq-item-ind';
            // For empty nodes, assign newline-separated not indented empty tokens to following node
            let start = [];
            if (atNextItem && it.sep && !it.value) {
                const nl = [];
                for (let i = 0; i < it.sep.length; ++i) {
                    const st = it.sep[i];
                    switch (st.type) {
                        case 'newline':
                            nl.push(i);
                            break;
                        case 'space':
                            break;
                        case 'comment':
                            if (st.indent > map.indent)
                                nl.length = 0;
                            break;
                        default:
                            nl.length = 0;
                    }
                }
                if (nl.length >= 2)
                    start = it.sep.splice(nl[1]);
            }
            switch (this.type) {
                case 'anchor':
                case 'tag':
                    if (atNextItem || it.value) {
                        start.push(this.sourceToken);
                        map.items.push({ start });
                        this.onKeyLine = true;
                    }
                    else if (it.sep) {
                        it.sep.push(this.sourceToken);
                    }
                    else {
                        it.start.push(this.sourceToken);
                    }
                    return;
                case 'explicit-key-ind':
                    if (!it.sep && !it.explicitKey) {
                        it.start.push(this.sourceToken);
                        it.explicitKey = true;
                    }
                    else if (atNextItem || it.value) {
                        start.push(this.sourceToken);
                        map.items.push({ start, explicitKey: true });
                    }
                    else {
                        this.stack.push({
                            type: 'block-map',
                            offset: this.offset,
                            indent: this.indent,
                            items: [{ start: [this.sourceToken], explicitKey: true }]
                        });
                    }
                    this.onKeyLine = true;
                    return;
                case 'map-value-ind':
                    if (it.explicitKey) {
                        if (!it.sep) {
                            if (includesToken(it.start, 'newline')) {
                                Object.assign(it, { key: null, sep: [this.sourceToken] });
                            }
                            else {
                                const start = getFirstKeyStartProps(it.start);
                                this.stack.push({
                                    type: 'block-map',
                                    offset: this.offset,
                                    indent: this.indent,
                                    items: [{ start, key: null, sep: [this.sourceToken] }]
                                });
                            }
                        }
                        else if (it.value) {
                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });
                        }
                        else if (includesToken(it.sep, 'map-value-ind')) {
                            this.stack.push({
                                type: 'block-map',
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start, key: null, sep: [this.sourceToken] }]
                            });
                        }
                        else if (isFlowToken(it.key) &&
                            !includesToken(it.sep, 'newline')) {
                            const start = getFirstKeyStartProps(it.start);
                            const key = it.key;
                            const sep = it.sep;
                            sep.push(this.sourceToken);
                            // @ts-expect-error type guard is wrong here
                            delete it.key;
                            // @ts-expect-error type guard is wrong here
                            delete it.sep;
                            this.stack.push({
                                type: 'block-map',
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start, key, sep }]
                            });
                        }
                        else if (start.length > 0) {
                            // Not actually at next item
                            it.sep = it.sep.concat(start, this.sourceToken);
                        }
                        else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    else {
                        if (!it.sep) {
                            Object.assign(it, { key: null, sep: [this.sourceToken] });
                        }
                        else if (it.value || atNextItem) {
                            map.items.push({ start, key: null, sep: [this.sourceToken] });
                        }
                        else if (includesToken(it.sep, 'map-value-ind')) {
                            this.stack.push({
                                type: 'block-map',
                                offset: this.offset,
                                indent: this.indent,
                                items: [{ start: [], key: null, sep: [this.sourceToken] }]
                            });
                        }
                        else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    this.onKeyLine = true;
                    return;
                case 'alias':
                case 'scalar':
                case 'single-quoted-scalar':
                case 'double-quoted-scalar': {
                    const fs = this.flowScalar(this.type);
                    if (atNextItem || it.value) {
                        map.items.push({ start, key: fs, sep: [] });
                        this.onKeyLine = true;
                    }
                    else if (it.sep) {
                        this.stack.push(fs);
                    }
                    else {
                        Object.assign(it, { key: fs, sep: [] });
                        this.onKeyLine = true;
                    }
                    return;
                }
                default: {
                    const bv = this.startBlockValue(map);
                    if (bv) {
                        if (bv.type === 'block-seq') {
                            if (!it.explicitKey &&
                                it.sep &&
                                !includesToken(it.sep, 'newline')) {
                                yield* this.pop({
                                    type: 'error',
                                    offset: this.offset,
                                    message: 'Unexpected block-seq-ind on same line with key',
                                    source: this.source
                                });
                                return;
                            }
                        }
                        else if (atMapIndent) {
                            map.items.push({ start });
                        }
                        this.stack.push(bv);
                        return;
                    }
                }
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *blockSequence(seq) {
        const it = seq.items[seq.items.length - 1];
        switch (this.type) {
            case 'newline':
                if (it.value) {
                    const end = 'end' in it.value ? it.value.end : undefined;
                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;
                    if (last?.type === 'comment')
                        end?.push(this.sourceToken);
                    else
                        seq.items.push({ start: [this.sourceToken] });
                }
                else
                    it.start.push(this.sourceToken);
                return;
            case 'space':
            case 'comment':
                if (it.value)
                    seq.items.push({ start: [this.sourceToken] });
                else {
                    if (this.atIndentedComment(it.start, seq.indent)) {
                        const prev = seq.items[seq.items.length - 2];
                        const end = prev?.value?.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            seq.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
            case 'anchor':
            case 'tag':
                if (it.value || this.indent <= seq.indent)
                    break;
                it.start.push(this.sourceToken);
                return;
            case 'seq-item-ind':
                if (this.indent !== seq.indent)
                    break;
                if (it.value || includesToken(it.start, 'seq-item-ind'))
                    seq.items.push({ start: [this.sourceToken] });
                else
                    it.start.push(this.sourceToken);
                return;
        }
        if (this.indent > seq.indent) {
            const bv = this.startBlockValue(seq);
            if (bv) {
                this.stack.push(bv);
                return;
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *flowCollection(fc) {
        const it = fc.items[fc.items.length - 1];
        if (this.type === 'flow-error-end') {
            let top;
            do {
                yield* this.pop();
                top = this.peek(1);
            } while (top && top.type === 'flow-collection');
        }
        else if (fc.end.length === 0) {
            switch (this.type) {
                case 'comma':
                case 'explicit-key-ind':
                    if (!it || it.sep)
                        fc.items.push({ start: [this.sourceToken] });
                    else
                        it.start.push(this.sourceToken);
                    return;
                case 'map-value-ind':
                    if (!it || it.value)
                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        Object.assign(it, { key: null, sep: [this.sourceToken] });
                    return;
                case 'space':
                case 'comment':
                case 'newline':
                case 'anchor':
                case 'tag':
                    if (!it || it.value)
                        fc.items.push({ start: [this.sourceToken] });
                    else if (it.sep)
                        it.sep.push(this.sourceToken);
                    else
                        it.start.push(this.sourceToken);
                    return;
                case 'alias':
                case 'scalar':
                case 'single-quoted-scalar':
                case 'double-quoted-scalar': {
                    const fs = this.flowScalar(this.type);
                    if (!it || it.value)
                        fc.items.push({ start: [], key: fs, sep: [] });
                    else if (it.sep)
                        this.stack.push(fs);
                    else
                        Object.assign(it, { key: fs, sep: [] });
                    return;
                }
                case 'flow-map-end':
                case 'flow-seq-end':
                    fc.end.push(this.sourceToken);
                    return;
            }
            const bv = this.startBlockValue(fc);
            /* istanbul ignore else should not happen */
            if (bv)
                this.stack.push(bv);
            else {
                yield* this.pop();
                yield* this.step();
            }
        }
        else {
            const parent = this.peek(2);
            if (parent.type === 'block-map' &&
                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||
                    (this.type === 'newline' &&
                        !parent.items[parent.items.length - 1].sep))) {
                yield* this.pop();
                yield* this.step();
            }
            else if (this.type === 'map-value-ind' &&
                parent.type !== 'flow-collection') {
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                fixFlowSeqItems(fc);
                const sep = fc.end.splice(1, fc.end.length);
                sep.push(this.sourceToken);
                const map = {
                    type: 'block-map',
                    offset: fc.offset,
                    indent: fc.indent,
                    items: [{ start, key: fc, sep }]
                };
                this.onKeyLine = true;
                this.stack[this.stack.length - 1] = map;
            }
            else {
                yield* this.lineEnd(fc);
            }
        }
    }
    flowScalar(type) {
        if (this.onNewLine) {
            let nl = this.source.indexOf('\n') + 1;
            while (nl !== 0) {
                this.onNewLine(this.offset + nl);
                nl = this.source.indexOf('\n', nl) + 1;
            }
        }
        return {
            type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
    }
    startBlockValue(parent) {
        switch (this.type) {
            case 'alias':
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return this.flowScalar(this.type);
            case 'block-scalar-header':
                return {
                    type: 'block-scalar',
                    offset: this.offset,
                    indent: this.indent,
                    props: [this.sourceToken],
                    source: ''
                };
            case 'flow-map-start':
            case 'flow-seq-start':
                return {
                    type: 'flow-collection',
                    offset: this.offset,
                    indent: this.indent,
                    start: this.sourceToken,
                    items: [],
                    end: []
                };
            case 'seq-item-ind':
                return {
                    type: 'block-seq',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: [this.sourceToken] }]
                };
            case 'explicit-key-ind': {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                start.push(this.sourceToken);
                return {
                    type: 'block-map',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start, explicitKey: true }]
                };
            }
            case 'map-value-ind': {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                return {
                    type: 'block-map',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start, key: null, sep: [this.sourceToken] }]
                };
            }
        }
        return null;
    }
    atIndentedComment(start, indent) {
        if (this.type !== 'comment')
            return false;
        if (this.indent <= indent)
            return false;
        return start.every(st => st.type === 'newline' || st.type === 'space');
    }
    *documentEnd(docEnd) {
        if (this.type !== 'doc-mode') {
            if (docEnd.end)
                docEnd.end.push(this.sourceToken);
            else
                docEnd.end = [this.sourceToken];
            if (this.type === 'newline')
                yield* this.pop();
        }
    }
    *lineEnd(token) {
        switch (this.type) {
            case 'comma':
            case 'doc-start':
            case 'doc-end':
            case 'flow-seq-end':
            case 'flow-map-end':
            case 'map-value-ind':
                yield* this.pop();
                yield* this.step();
                break;
            case 'newline':
                this.onKeyLine = false;
            // fallthrough
            case 'space':
            case 'comment':
            default:
                // all other values are errors
                if (token.end)
                    token.end.push(this.sourceToken);
                else
                    token.end = [this.sourceToken];
                if (this.type === 'newline')
                    yield* this.pop();
        }
    }
}

exports.Parser = Parser;


/***/ }),
/* 218 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var composer = __webpack_require__(146);
var Document = __webpack_require__(151);
var errors = __webpack_require__(195);
var log = __webpack_require__(167);
var identity = __webpack_require__(149);
var lineCounter = __webpack_require__(216);
var parser = __webpack_require__(217);

function parseOptions(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter$1 = options.lineCounter || (prettyErrors && new lineCounter.LineCounter()) || null;
    return { lineCounter: lineCounter$1, prettyErrors };
}
/**
 * Parse the input as a stream of YAML documents.
 *
 * Documents should be separated from each other by `...` or `---` marker lines.
 *
 * @returns If an empty `docs` array is returned, it will be of type
 *   EmptyStream and contain additional stream information. In
 *   TypeScript, you should use `'empty' in docs` as a type guard for it.
 */
function parseAllDocuments(source, options = {}) {
    const { lineCounter, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter?.addNewLine);
    const composer$1 = new composer.Composer(options);
    const docs = Array.from(composer$1.compose(parser$1.parse(source)));
    if (prettyErrors && lineCounter)
        for (const doc of docs) {
            doc.errors.forEach(errors.prettifyError(source, lineCounter));
            doc.warnings.forEach(errors.prettifyError(source, lineCounter));
        }
    if (docs.length > 0)
        return docs;
    return Object.assign([], { empty: true }, composer$1.streamInfo());
}
/** Parse an input string into a single YAML.Document */
function parseDocument(source, options = {}) {
    const { lineCounter, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter?.addNewLine);
    const composer$1 = new composer.Composer(options);
    // `doc` is always set by compose.end(true) at the very latest
    let doc = null;
    for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
        if (!doc)
            doc = _doc;
        else if (doc.options.logLevel !== 'silent') {
            doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));
            break;
        }
    }
    if (prettyErrors && lineCounter) {
        doc.errors.forEach(errors.prettifyError(source, lineCounter));
        doc.warnings.forEach(errors.prettifyError(source, lineCounter));
    }
    return doc;
}
function parse(src, reviver, options) {
    let _reviver = undefined;
    if (typeof reviver === 'function') {
        _reviver = reviver;
    }
    else if (options === undefined && reviver && typeof reviver === 'object') {
        options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc)
        return null;
    doc.warnings.forEach(warning => log.warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
        if (doc.options.logLevel !== 'silent')
            throw doc.errors[0];
        else
            doc.errors = [];
    }
    return doc.toJS(Object.assign({ reviver: _reviver }, options));
}
function stringify(value, replacer, options) {
    let _replacer = null;
    if (typeof replacer === 'function' || Array.isArray(replacer)) {
        _replacer = replacer;
    }
    else if (options === undefined && replacer) {
        options = replacer;
    }
    if (typeof options === 'string')
        options = options.length;
    if (typeof options === 'number') {
        const indent = Math.round(options);
        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };
    }
    if (value === undefined) {
        const { keepUndefined } = options ?? replacer ?? {};
        if (!keepUndefined)
            return undefined;
    }
    if (identity.isDocument(value) && !_replacer)
        return value.toString(options);
    return new Document.Document(value, _replacer, options).toString(options);
}

exports.parse = parse;
exports.parseAllDocuments = parseAllDocuments;
exports.parseDocument = parseDocument;
exports.stringify = stringify;


/***/ }),
/* 219 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*! Axios v1.9.0 Copyright (c) 2025 Matt Zabriskie and contributors */


const FormData$1 = __webpack_require__(220);
const crypto = __webpack_require__(128);
const url = __webpack_require__(227);
const proxyFromEnv = __webpack_require__(278);
const http = __webpack_require__(225);
const https = __webpack_require__(226);
const util = __webpack_require__(222);
const followRedirects = __webpack_require__(279);
const zlib = __webpack_require__(292);
const stream = __webpack_require__(223);
const events = __webpack_require__(293);

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const FormData__default = /*#__PURE__*/_interopDefaultLegacy(FormData$1);
const crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);
const url__default = /*#__PURE__*/_interopDefaultLegacy(url);
const proxyFromEnv__default = /*#__PURE__*/_interopDefaultLegacy(proxyFromEnv);
const http__default = /*#__PURE__*/_interopDefaultLegacy(http);
const https__default = /*#__PURE__*/_interopDefaultLegacy(https);
const util__default = /*#__PURE__*/_interopDefaultLegacy(util);
const followRedirects__default = /*#__PURE__*/_interopDefaultLegacy(followRedirects);
const zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);
const stream__default = /*#__PURE__*/_interopDefaultLegacy(stream);

function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;
const {iterator, toStringTag} = Symbol;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
};

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];

  const _iterator = generator.call(obj);

  let result;

  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
};

const noop = () => {};

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  };

  return visit(obj, 0);
};

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({source, data}) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  isFunction(_global.postMessage)
);

const asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

// *********************


const isIterable = (thing) => thing != null && isFunction(thing[iterator]);


const utils$1 = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

utils$1.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const prototype$1 = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);

  utils$1.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData__default["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$1.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);

  if (!utils$1.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils$1.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils$1.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils$1.isArray(value) && isFlatArray(value)) ||
        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils$1.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils$1.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$1(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && toFormData(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?(object|Function)} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  if (utils$1.isFunction(options)) {
    options = {
      serialize: options
    };
  } 

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ?
      params.toString() :
      new AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

const InterceptorManager$1 = InterceptorManager;

const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

const URLSearchParams = url__default["default"].URLSearchParams;

const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  const randomValues = new Uint32Array(size);
  crypto__default["default"].randomFillSync(randomValues);
  for (let i = 0; i < size; i++) {
    str += alphabet[randomValues[i] % length];
  }

  return str;
};


const platform$1 = {
  isNode: true,
  classes: {
    URLSearchParams,
    FormData: FormData__default["default"],
    Blob: typeof Blob !== 'undefined' && Blob || null
  },
  ALPHABET,
  generateString,
  protocols: [ 'http', 'https', 'file', 'data' ]
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const _navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = hasBrowserEnv &&
  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';

const utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  hasBrowserEnv: hasBrowserEnv,
  hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
  hasStandardBrowserEnv: hasStandardBrowserEnv,
  navigator: _navigator,
  origin: origin
});

const platform = {
  ...utils,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};

    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: transitionalDefaults,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$1.isObject(data);

    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils$1.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }

    if (utils$1.isArrayBuffer(data) ||
      utils$1.isBuffer(data) ||
      utils$1.isStream(data) ||
      utils$1.isFile(data) ||
      utils$1.isBlob(data) ||
      utils$1.isReadableStream(data)
    ) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
      return data;
    }

    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

const defaults$1 = defaults;

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$1.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
const parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$1.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils$1.isString(value)) return;

  if (utils$1.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils$1.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils$1.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils$1.isArray(entry)) {
          throw TypeError('Object iterator must return a key-value pair');
        }

        obj[key = entry[0]] = (dest = obj[key]) ?
          (utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];
      }

      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils$1.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  getSetCookie() {
    return this.get("set-cookie") || [];
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils$1.freezeMethods(AxiosHeaders);

const AxiosHeaders$1 = AxiosHeaders;

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults$1;
  const context = response || config;
  const headers = AxiosHeaders$1.from(context.headers);
  let data = context.data;

  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils$1.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

const VERSION = "1.9.0";

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;

/**
 * Parse data uri to a Buffer or Blob
 *
 * @param {String} uri
 * @param {?Boolean} asBlob
 * @param {?Object} options
 * @param {?Function} options.Blob
 *
 * @returns {Buffer|Blob}
 */
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || platform.classes.Blob;
  const protocol = parseProtocol(uri);

  if (asBlob === undefined && _Blob) {
    asBlob = true;
  }

  if (protocol === 'data') {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;

    const match = DATA_URL_PATTERN.exec(uri);

    if (!match) {
      throw new AxiosError('Invalid URL', AxiosError.ERR_INVALID_URL);
    }

    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');

    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError('Blob is not supported', AxiosError.ERR_NOT_SUPPORT);
      }

      return new _Blob([buffer], {type: mime});
    }

    return buffer;
  }

  throw new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_NOT_SUPPORT);
}

const kInternals = Symbol('internals');

class AxiosTransformStream extends stream__default["default"].Transform{
  constructor(options) {
    options = utils$1.toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, (prop, source) => {
      return !utils$1.isUndefined(source[prop]);
    });

    super({
      readableHighWaterMark: options.chunkSize
    });

    const internals = this[kInternals] = {
      timeWindow: options.timeWindow,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };

    this.on('newListener', event => {
      if (event === 'progress') {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
  }

  _read(size) {
    const internals = this[kInternals];

    if (internals.onReadCallback) {
      internals.onReadCallback();
    }

    return super._read(size);
  }

  _transform(chunk, encoding, callback) {
    const internals = this[kInternals];
    const maxRate = internals.maxRate;

    const readableHighWaterMark = this.readableHighWaterMark;

    const timeWindow = internals.timeWindow;

    const divider = 1000 / timeWindow;
    const bytesThreshold = (maxRate / divider);
    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;

    const pushChunk = (_chunk, _callback) => {
      const bytes = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes;
      internals.bytes += bytes;

      internals.isCaptured && this.emit('progress', internals.bytesSeen);

      if (this.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    };

    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;

      if (maxRate) {
        const now = Date.now();

        if (!internals.ts || (passed = (now - internals.ts)) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }

        bytesLeft = bytesThreshold - internals.bytes;
      }

      if (maxRate) {
        if (bytesLeft <= 0) {
          // next time window
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }

        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }

      if (maxChunkSize && chunkSize > maxChunkSize && (chunkSize - maxChunkSize) > minChunkSize) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }

      pushChunk(_chunk, chunkRemainder ? () => {
        process.nextTick(_callback, null, chunkRemainder);
      } : _callback);
    };

    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }

      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }
}

const AxiosTransformStream$1 = AxiosTransformStream;

const {asyncIterator} = Symbol;

const readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};

const readBlob$1 = readBlob;

const BOUNDARY_ALPHABET = platform.ALPHABET.ALPHA_DIGIT + '-_';

const textEncoder = typeof TextEncoder === 'function' ? new TextEncoder() : new util__default["default"].TextEncoder();

const CRLF = '\r\n';
const CRLF_BYTES = textEncoder.encode(CRLF);
const CRLF_BYTES_COUNT = 2;

class FormDataPart {
  constructor(name, value) {
    const {escapeName} = this.constructor;
    const isStringValue = utils$1.isString(value);

    let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${
      !isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ''
    }${CRLF}`;

    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
    } else {
      headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
    }

    this.headers = textEncoder.encode(headers + CRLF);

    this.contentLength = isStringValue ? value.byteLength : value.size;

    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;

    this.name = name;
    this.value = value;
  }

  async *encode(){
    yield this.headers;

    const {value} = this;

    if(utils$1.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob$1(value);
    }

    yield CRLF_BYTES;
  }

  static escapeName(name) {
      return String(name).replace(/[\r\n"]/g, (match) => ({
        '\r' : '%0D',
        '\n' : '%0A',
        '"' : '%22',
      }[match]));
  }
}

const formDataToStream = (form, headersHandler, options) => {
  const {
    tag = 'form-data-boundary',
    size = 25,
    boundary = tag + '-' + platform.generateString(size, BOUNDARY_ALPHABET)
  } = options || {};

  if(!utils$1.isFormData(form)) {
    throw TypeError('FormData instance required');
  }

  if (boundary.length < 1 || boundary.length > 70) {
    throw Error('boundary must be 10-70 characters long')
  }

  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);
  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF);
  let contentLength = footerBytes.byteLength;

  const parts = Array.from(form.entries()).map(([name, value]) => {
    const part = new FormDataPart(name, value);
    contentLength += part.size;
    return part;
  });

  contentLength += boundaryBytes.byteLength * parts.length;

  contentLength = utils$1.toFiniteNumber(contentLength);

  const computedHeaders = {
    'Content-Type': `multipart/form-data; boundary=${boundary}`
  };

  if (Number.isFinite(contentLength)) {
    computedHeaders['Content-Length'] = contentLength;
  }

  headersHandler && headersHandler(computedHeaders);

  return stream.Readable.from((async function *() {
    for(const part of parts) {
      yield boundaryBytes;
      yield* part.encode();
    }

    yield footerBytes;
  })());
};

const formDataToStream$1 = formDataToStream;

class ZlibHeaderTransformStream extends stream__default["default"].Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }

  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;

      // Add Default Compression headers if no zlib headers are present
      if (chunk[0] !== 120) { // Hex: 78
        const header = Buffer.alloc(2);
        header[0] = 120; // Hex: 78
        header[1] = 156; // Hex: 9C 
        this.push(header, encoding);
      }
    }

    this.__transform(chunk, encoding, callback);
  }
}

const ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;

const callbackify = (fn, reducer) => {
  return utils$1.isAsyncFn(fn) ? function (...args) {
    const cb = args.pop();
    fn.apply(this, args).then((value) => {
      try {
        reducer ? cb(null, ...reducer(value)) : cb(null, value);
      } catch (err) {
        cb(err);
      }
    }, cb);
  } : fn;
};

const callbackify$1 = callbackify;

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);

  return throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
};

const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};

const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));

const zlibOptions = {
  flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
  finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
};

const brotliOptions = {
  flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
  finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
};

const isBrotliSupported = utils$1.isFunction(zlib__default["default"].createBrotliDecompress);

const {http: httpFollow, https: httpsFollow} = followRedirects__default["default"];

const isHttps = /https:?/;

const supportedProtocols = platform.protocols.map(protocol => {
  return protocol + ':';
});

const flushOnFinish = (stream, [throttled, flush]) => {
  stream
    .on('end', flush)
    .on('error', flush);

  return throttled;
};

/**
 * If the proxy or config beforeRedirects functions are defined, call them with the options
 * object.
 *
 * @param {Object<string, any>} options - The options object that was passed to the request.
 *
 * @returns {Object<string, any>}
 */
function dispatchBeforeRedirect(options, responseDetails) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options, responseDetails);
  }
}

/**
 * If the proxy or config afterRedirects functions are defined, call them with the options
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} configProxy configuration from Axios options object
 * @param {string} location
 *
 * @returns {http.ClientRequestArgs}
 */
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = proxyFromEnv__default["default"].getProxyForUrl(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    // Basic proxy authorization
    if (proxy.username) {
      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');
    }

    if (proxy.auth) {
      // Support proxy auth object form
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');
      }
      const base64 = Buffer
        .from(proxy.auth, 'utf8')
        .toString('base64');
      options.headers['Proxy-Authorization'] = 'Basic ' + base64;
    }

    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    // Replace 'host' since options is not a URL object
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;
    }
  }

  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    // Configure proxy for redirected request, passing the original config proxy to apply
    // the exact same logic as if the redirected request was performed by axios directly.
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}

const isHttpAdapterSupported = typeof process !== 'undefined' && utils$1.kindOf(process) === 'process';

// temporary hotfix

const wrapAsync = (asyncExecutor) => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;

    const done = (value, isRejected) => {
      if (isDone) return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };

    const _resolve = (value) => {
      done(value);
      resolve(value);
    };

    const _reject = (reason) => {
      done(reason, true);
      reject(reason);
    };

    asyncExecutor(_resolve, _reject, (onDoneHandler) => (onDone = onDoneHandler)).catch(_reject);
  })
};

const resolveFamily = ({address, family}) => {
  if (!utils$1.isString(address)) {
    throw TypeError('address must be a string');
  }
  return ({
    address,
    family: family || (address.indexOf('.') < 0 ? 6 : 4)
  });
};

const buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : {address, family});

/*eslint consistent-return:0*/
const httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {
  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
    let {data, lookup, family} = config;
    const {responseType, responseEncoding} = config;
    const method = config.method.toUpperCase();
    let isDone;
    let rejected = false;
    let req;

    if (lookup) {
      const _lookup = callbackify$1(lookup, (value) => utils$1.isArray(value) ? value : [value]);
      // hotfix to support opt.all option which is required for node 20.x
      lookup = (hostname, opt, cb) => {
        _lookup(hostname, opt, (err, arg0, arg1) => {
          if (err) {
            return cb(err);
          }

          const addresses = utils$1.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];

          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
        });
      };
    }

    // temporary internal emitter until the AxiosRequest class will be implemented
    const emitter = new events.EventEmitter();

    const onFinished = () => {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(abort);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', abort);
      }

      emitter.removeAllListeners();
    };

    onDone((value, isRejected) => {
      isDone = true;
      if (isRejected) {
        rejected = true;
        onFinished();
      }
    });

    function abort(reason) {
      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);
    }

    emitter.once('abort', reject);

    if (config.cancelToken || config.signal) {
      config.cancelToken && config.cancelToken.subscribe(abort);
      if (config.signal) {
        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);
      }
    }

    // Parse url
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : undefined);
    const protocol = parsed.protocol || supportedProtocols[0];

    if (protocol === 'data:') {
      let convertedData;

      if (method !== 'GET') {
        return settle(resolve, reject, {
          status: 405,
          statusText: 'method not allowed',
          headers: {},
          config
        });
      }

      try {
        convertedData = fromDataURI(config.url, responseType === 'blob', {
          Blob: config.env && config.env.Blob
        });
      } catch (err) {
        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);
      }

      if (responseType === 'text') {
        convertedData = convertedData.toString(responseEncoding);

        if (!responseEncoding || responseEncoding === 'utf8') {
          convertedData = utils$1.stripBOM(convertedData);
        }
      } else if (responseType === 'stream') {
        convertedData = stream__default["default"].Readable.from(convertedData);
      }

      return settle(resolve, reject, {
        data: convertedData,
        status: 200,
        statusText: 'OK',
        headers: new AxiosHeaders$1(),
        config
      });
    }

    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError(
        'Unsupported protocol ' + protocol,
        AxiosError.ERR_BAD_REQUEST,
        config
      ));
    }

    const headers = AxiosHeaders$1.from(config.headers).normalize();

    // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69
    // User-Agent is specified; handle case where no UA header is desired
    // Only set header if it hasn't been set in config
    headers.set('User-Agent', 'axios/' + VERSION, false);

    const {onUploadProgress, onDownloadProgress} = config;
    const maxRate = config.maxRate;
    let maxUploadRate = undefined;
    let maxDownloadRate = undefined;

    // support for spec compliant FormData objects
    if (utils$1.isSpecCompliantForm(data)) {
      const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);

      data = formDataToStream$1(data, (formHeaders) => {
        headers.set(formHeaders);
      }, {
        tag: `axios-${VERSION}-boundary`,
        boundary: userBoundary && userBoundary[1] || undefined
      });
      // support for https://www.npmjs.com/package/form-data api
    } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
      headers.set(data.getHeaders());

      if (!headers.hasContentLength()) {
        try {
          const knownLength = await util__default["default"].promisify(data.getLength).call(data);
          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
          /*eslint no-empty:0*/
        } catch (e) {
        }
      }
    } else if (utils$1.isBlob(data) || utils$1.isFile(data)) {
      data.size && headers.setContentType(data.type || 'application/octet-stream');
      headers.setContentLength(data.size || 0);
      data = stream__default["default"].Readable.from(readBlob$1(data));
    } else if (data && !utils$1.isStream(data)) {
      if (Buffer.isBuffer(data)) ; else if (utils$1.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils$1.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(new AxiosError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          AxiosError.ERR_BAD_REQUEST,
          config
        ));
      }

      // Add Content-Length header if data exists
      headers.setContentLength(data.length, false);

      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError(
          'Request body larger than maxBodyLength limit',
          AxiosError.ERR_BAD_REQUEST,
          config
        ));
      }
    }

    const contentLength = utils$1.toFiniteNumber(headers.getContentLength());

    if (utils$1.isArray(maxRate)) {
      maxUploadRate = maxRate[0];
      maxDownloadRate = maxRate[1];
    } else {
      maxUploadRate = maxDownloadRate = maxRate;
    }

    if (data && (onUploadProgress || maxUploadRate)) {
      if (!utils$1.isStream(data)) {
        data = stream__default["default"].Readable.from(data, {objectMode: false});
      }

      data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
        maxRate: utils$1.toFiniteNumber(maxUploadRate)
      })], utils$1.noop);

      onUploadProgress && data.on('progress', flushOnFinish(
        data,
        progressEventDecorator(
          contentLength,
          progressEventReducer(asyncDecorator(onUploadProgress), false, 3)
        )
      ));
    }

    // HTTP basic authentication
    let auth = undefined;
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password || '';
      auth = username + ':' + password;
    }

    if (!auth && parsed.username) {
      const urlUsername = parsed.username;
      const urlPassword = parsed.password;
      auth = urlUsername + ':' + urlPassword;
    }

    auth && headers.delete('authorization');

    let path;

    try {
      path = buildURL(
        parsed.pathname + parsed.search,
        config.params,
        config.paramsSerializer
      ).replace(/^\?/, '');
    } catch (err) {
      const customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      return reject(customErr);
    }

    headers.set(
      'Accept-Encoding',
      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false
      );

    const options = {
      path,
      method: method,
      headers: headers.toJSON(),
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth,
      protocol,
      family,
      beforeRedirect: dispatchBeforeRedirect,
      beforeRedirects: {}
    };

    // cacheable-lookup integration hotfix
    !utils$1.isUndefined(lookup) && (options.lookup = lookup);

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
      options.port = parsed.port;
      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    let transport;
    const isHttpsRequest = isHttps.test(options.protocol);
    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsRequest ? https__default["default"] : http__default["default"];
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      if (config.beforeRedirect) {
        options.beforeRedirects.config = config.beforeRedirect;
      }
      transport = isHttpsRequest ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    } else {
      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited
      options.maxBodyLength = Infinity;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }

    // Create the request
    req = transport.request(options, function handleResponse(res) {
      if (req.destroyed) return;

      const streams = [res];

      const responseLength = +res.headers['content-length'];

      if (onDownloadProgress || maxDownloadRate) {
        const transformStream = new AxiosTransformStream$1({
          maxRate: utils$1.toFiniteNumber(maxDownloadRate)
        });

        onDownloadProgress && transformStream.on('progress', flushOnFinish(
          transformStream,
          progressEventDecorator(
            responseLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true, 3)
          )
        ));

        streams.push(transformStream);
      }

      // decompress the response body transparently if required
      let responseStream = res;

      // return the last request in case of redirects
      const lastRequest = res.req || req;

      // if decompress disabled we should not decompress
      if (config.decompress !== false && res.headers['content-encoding']) {
        // if no content, but headers still say that it is encoded,
        // remove the header not confuse downstream operations
        if (method === 'HEAD' || res.statusCode === 204) {
          delete res.headers['content-encoding'];
        }

        switch ((res.headers['content-encoding'] || '').toLowerCase()) {
        /*eslint default-case:0*/
        case 'gzip':
        case 'x-gzip':
        case 'compress':
        case 'x-compress':
          // add the unzipper to the body stream processing pipeline
          streams.push(zlib__default["default"].createUnzip(zlibOptions));

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        case 'deflate':
          streams.push(new ZlibHeaderTransformStream$1());

          // add the unzipper to the body stream processing pipeline
          streams.push(zlib__default["default"].createUnzip(zlibOptions));

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        case 'br':
          if (isBrotliSupported) {
            streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
            delete res.headers['content-encoding'];
          }
        }
      }

      responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$1.noop) : streams[0];

      const offListeners = stream__default["default"].finished(responseStream, () => {
        offListeners();
        onFinished();
      });

      const response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: new AxiosHeaders$1(res.headers),
        config,
        request: lastRequest
      };

      if (responseType === 'stream') {
        response.data = responseStream;
        settle(resolve, reject, response);
      } else {
        const responseBuffer = [];
        let totalResponseBytes = 0;

        responseStream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destroy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            responseStream.destroy();
            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
          }
        });

        responseStream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }

          const err = new AxiosError(
            'stream has been aborted',
            AxiosError.ERR_BAD_RESPONSE,
            config,
            lastRequest
          );
          responseStream.destroy(err);
          reject(err);
        });

        responseStream.on('error', function handleStreamError(err) {
          if (req.destroyed) return;
          reject(AxiosError.from(err, null, config, lastRequest));
        });

        responseStream.on('end', function handleStreamEnd() {
          try {
            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (responseType !== 'arraybuffer') {
              responseData = responseData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === 'utf8') {
                responseData = utils$1.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            return reject(AxiosError.from(err, null, config, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }

      emitter.once('abort', err => {
        if (!responseStream.destroyed) {
          responseStream.emit('error', err);
          responseStream.destroy();
        }
      });
    });

    emitter.once('abort', err => {
      reject(err);
      req.destroy(err);
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      // @todo remove
      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
      reject(AxiosError.from(err, null, config, req));
    });

    // set tcp keep alive to prevent drop connection by peer
    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    });

    // Handle request timeout
    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      const timeout = parseInt(config.timeout, 10);

      if (Number.isNaN(timeout)) {
        reject(new AxiosError(
          'error trying to parse `config.timeout` to int',
          AxiosError.ERR_BAD_OPTION_VALUE,
          config,
          req
        ));

        return;
      }

      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devouring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(timeout, function handleRequestTimeout() {
        if (isDone) return;
        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = config.transitional || transitionalDefaults;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
          config,
          req
        ));
        abort();
      });
    }


    // Send the request
    if (utils$1.isStream(data)) {
      let ended = false;
      let errored = false;

      data.on('end', () => {
        ended = true;
      });

      data.once('error', err => {
        errored = true;
        req.destroy(err);
      });

      data.on('close', () => {
        if (!ended && !errored) {
          abort(new CanceledError('Request stream has been aborted', config, req));
        }
      });

      data.pipe(req);
    } else {
      req.end(data);
    }
  });
};

const isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {
  url = new URL(url, platform.origin);

  return (
    origin.protocol === url.protocol &&
    origin.host === url.host &&
    (isMSIE || origin.port === url.port)
  );
})(
  new URL(platform.origin),
  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
) : () => true;

const cookies = platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils$1.isString(path) && cookie.push('path=' + path);

      utils$1.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  };

const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, prop, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({caseless}, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, prop , caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, prop , caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a, prop , caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)
  };

  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

const resolveConfig = (config) => {
  const newConfig = mergeConfig({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = AxiosHeaders$1.from(headers);

  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (utils$1.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
};

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

const xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders$1.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$1.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(_config.url);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
};

const composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
      }
    };

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
    }, timeout);

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    };

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => utils$1.asap(unsubscribe);

    return signal;
  }
};

const composeSignals$1 = composeSignals;

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};

const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};

const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};

const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
};

const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
};

const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported &&
  test(() => utils$1.isReadableStream(new Response('').body));


const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
      });
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(utils$1.isBlob(body)) {
    return body.size;
  }

  if(utils$1.isSpecCompliantForm(body)) {
    const _request = new Request(platform.origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(utils$1.isURLSearchParams(body)) {
    body = body + '';
  }

  if(utils$1.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};

const resolveBodyLength = async (headers, body) => {
  const length = utils$1.toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
};

const fetchAdapter = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader);
      }

      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );

        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!utils$1.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = utils$1.toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];

      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders$1.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw AxiosError.from(err, err && err.code, config, request);
  }
});

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: fetchAdapter
};

utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;

const adapters = {
  getAdapter: (adapters) => {
    adapters = utils$1.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = AxiosHeaders$1.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = AxiosHeaders$1.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

validators$1.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    // eslint-disable-next-line no-console
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  }
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

const validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager$1(),
      response: new InterceptorManager$1()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};

        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack;
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.allowAbsoluteUrls
    if (config.allowAbsoluteUrls !== undefined) ; else if (this.defaults.allowAbsoluteUrls !== undefined) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }

    validator.assertOptions(config, {
      baseUrl: validators.spelling('baseURL'),
      withXsrfToken: validators.spelling('withXSRFToken')
    }, true);

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils$1.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

const Axios$1 = Axios;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

const CancelToken$1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return utils$1.isObject(payload) && (payload.isAxiosError === true);
}

const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

const HttpStatusCode$1 = HttpStatusCode;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context);

  // Copy axios.prototype to instance
  utils$1.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils$1.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults$1);

// Expose Axios class to allow class inheritance
axios.Axios = Axios$1;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;

// Expose AxiosError class
axios.AxiosError = AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

// Expose mergeConfig
axios.mergeConfig = mergeConfig;

axios.AxiosHeaders = AxiosHeaders$1;

axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = HttpStatusCode$1;

axios.default = axios;

module.exports = axios;
//# sourceMappingURL=axios.cjs.map


/***/ }),
/* 220 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var CombinedStream = __webpack_require__(221);
var util = __webpack_require__(222);
var path = __webpack_require__(143);
var http = __webpack_require__(225);
var https = __webpack_require__(226);
var parseUrl = (__webpack_require__(227).parse);
var fs = __webpack_require__(142);
var Stream = (__webpack_require__(223).Stream);
var mime = __webpack_require__(228);
var asynckit = __webpack_require__(231);
var setToStringTag = __webpack_require__(241);
var populate = __webpack_require__(277);

// Public API
module.exports = FormData;

// make it a Stream
util.inherits(FormData, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];

  CombinedStream.call(this);

  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function(field, value, options) {

  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {filename: options};
  }

  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (Array.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength +=
    Buffer.byteLength(header) +
    FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response or not a stream
  if (!value || ( !value.path && !(value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) && !(value instanceof Stream))) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function(value, callback) {
  if (Object.prototype.hasOwnProperty.call(value, 'fd')) {

    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {

      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

    // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function(err, stat) {

        var fileSize;

        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

  // or http response
  } else if (Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
    callback(null, +value.headers['content-length']);

  // or request stream http://github.com/mikeal/request
  } else if (Object.prototype.hasOwnProperty.call(value, 'httpModule')) {
    // wait till response come back
    value.on('response', function(response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

  // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers  = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;
  for (var prop in headers) {
    if (Object.prototype.hasOwnProperty.call(headers, prop)) {
      header = headers[prop];

      // skip nullish headers.
      if (header == null) {
        continue;
      }

      // convert all headers to arrays.
      if (!Array.isArray(header)) {
        header = [header];
      }

      // add non-empty headers.
      if (header.length) {
        contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
      }
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function(value, options) {

  var filename
    , contentDisposition
    ;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function(value, options) {

  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData.LINE_BREAK;

    var lastPart = (this._streams.length === 0);
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (Object.prototype.hasOwnProperty.call(userHeaders, header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.setBoundary = function(boundary) {
  this._boundary = boundary;
};

FormData.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype.getBuffer = function() {
  var dataBuffer = new Buffer.alloc(0);
  var boundary = this.getBoundary();

  // Create the form content. Add Line breaks to the end of data.
  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {

      // Add content to the buffer.
      if(Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);
      }else {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);
      }

      // Add break after content.
      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );
      }
    }
  }

  // Add the footer and return the Buffer object.
  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );
};

FormData.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData.prototype.submit = function(params, cb) {
  var request
    , options
    , defaults = {method: 'post'}
    ;

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {

    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults);

  // use custom params
  } else {

    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  }

  // get content length and fire away
  this.getLength(function(err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);
      return;
    }

    // add content length
    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);
    if (cb) {
      var onResponse;

      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);

        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);

      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));

  return request;
};

FormData.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function () {
  return '[object FormData]';
};
setToStringTag(FormData, 'FormData');


/***/ }),
/* 221 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var util = __webpack_require__(222);
var Stream = (__webpack_require__(223).Stream);
var DelayedStream = __webpack_require__(224);

module.exports = CombinedStream;
function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}
util.inherits(CombinedStream, Stream);

CombinedStream.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream) {
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
};

CombinedStream.prototype.append = function(stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream.prototype.pipe = function(dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function() {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;
  try {
    do {
      this._pendingNext = false;
      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function() {
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {end: false});
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};


/***/ }),
/* 222 */
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),
/* 223 */
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),
/* 224 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stream = (__webpack_require__(223).Stream);
var util = __webpack_require__(222);

module.exports = DelayedStream;
function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);

DelayedStream.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function() {
  this.source.pause();
};

DelayedStream.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(function(args) {
    this.emit.apply(this, args);
  }.bind(this));
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function() {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message));
};


/***/ }),
/* 225 */
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),
/* 226 */
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),
/* 227 */
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),
/* 228 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var db = __webpack_require__(229)
var extname = (__webpack_require__(143).extname)

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}


/***/ }),
/* 229 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = __webpack_require__(230)


/***/ }),
/* 230 */
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}');

/***/ }),
/* 231 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports =
{
  parallel      : __webpack_require__(232),
  serial        : __webpack_require__(239),
  serialOrdered : __webpack_require__(240)
};


/***/ }),
/* 232 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var iterate    = __webpack_require__(233)
  , initState  = __webpack_require__(237)
  , terminator = __webpack_require__(238)
  ;

// Public API
module.exports = parallel;

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function parallel(list, iterator, callback)
{
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length)
  {
    iterate(list, iterator, state, function(error, result)
    {
      if (error)
      {
        callback(error, result);
        return;
      }

      // looks like it's the last one
      if (Object.keys(state.jobs).length === 0)
      {
        callback(null, state.results);
        return;
      }
    });

    state.index++;
  }

  return terminator.bind(state, callback);
}


/***/ }),
/* 233 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var async = __webpack_require__(234)
  , abort = __webpack_require__(236)
  ;

// API
module.exports = iterate;

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */
function iterate(list, iterator, state, callback)
{
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
  {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs))
    {
      return;
    }

    // clean up jobs
    delete state.jobs[key];

    if (error)
    {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    }
    else
    {
      state.results[key] = output;
    }

    // return salvaged results
    callback(error, state.results);
  });
}

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */
function runJob(iterator, key, item, callback)
{
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2)
  {
    aborter = iterator(item, async(callback));
  }
  // otherwise go with full three arguments
  else
  {
    aborter = iterator(item, key, async(callback));
  }

  return aborter;
}


/***/ }),
/* 234 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defer = __webpack_require__(235);

// API
module.exports = async;

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */
function async(callback)
{
  var isAsync = false;

  // check if async happened
  defer(function() { isAsync = true; });

  return function async_callback(err, result)
  {
    if (isAsync)
    {
      callback(err, result);
    }
    else
    {
      defer(function nextTick_callback()
      {
        callback(err, result);
      });
    }
  };
}


/***/ }),
/* 235 */
/***/ ((module) => {

module.exports = defer;

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */
function defer(fn)
{
  var nextTick = typeof setImmediate == 'function'
    ? setImmediate
    : (
      typeof process == 'object' && typeof process.nextTick == 'function'
      ? process.nextTick
      : null
    );

  if (nextTick)
  {
    nextTick(fn);
  }
  else
  {
    setTimeout(fn, 0);
  }
}


/***/ }),
/* 236 */
/***/ ((module) => {

// API
module.exports = abort;

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */
function abort(state)
{
  Object.keys(state.jobs).forEach(clean.bind(state));

  // reset leftover jobs
  state.jobs = {};
}

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */
function clean(key)
{
  if (typeof this.jobs[key] == 'function')
  {
    this.jobs[key]();
  }
}


/***/ }),
/* 237 */
/***/ ((module) => {

// API
module.exports = state;

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */
function state(list, sortMethod)
{
  var isNamedList = !Array.isArray(list)
    , initState =
    {
      index    : 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs     : {},
      results  : isNamedList ? {} : [],
      size     : isNamedList ? Object.keys(list).length : list.length
    }
    ;

  if (sortMethod)
  {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
    {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}


/***/ }),
/* 238 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var abort = __webpack_require__(236)
  , async = __webpack_require__(234)
  ;

// API
module.exports = terminator;

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */
function terminator(callback)
{
  if (!Object.keys(this.jobs).length)
  {
    return;
  }

  // fast forward iteration index
  this.index = this.size;

  // abort jobs
  abort(this);

  // send back results we have so far
  async(callback)(null, this.results);
}


/***/ }),
/* 239 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var serialOrdered = __webpack_require__(240);

// Public API
module.exports = serial;

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serial(list, iterator, callback)
{
  return serialOrdered(list, iterator, null, callback);
}


/***/ }),
/* 240 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var iterate    = __webpack_require__(233)
  , initState  = __webpack_require__(237)
  , terminator = __webpack_require__(238)
  ;

// Public API
module.exports = serialOrdered;
// sorting helpers
module.exports.ascending  = ascending;
module.exports.descending = descending;

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serialOrdered(list, iterator, sortMethod, callback)
{
  var state = initState(list, sortMethod);

  iterate(list, iterator, state, function iteratorHandler(error, result)
  {
    if (error)
    {
      callback(error, result);
      return;
    }

    state.index++;

    // are we there yet?
    if (state.index < (state['keyedList'] || list).length)
    {
      iterate(list, iterator, state, iteratorHandler);
      return;
    }

    // done here
    callback(null, state.results);
  });

  return terminator.bind(state, callback);
}

/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function ascending(a, b)
{
  return a < b ? -1 : a > b ? 1 : 0;
}

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function descending(a, b)
{
  return -1 * ascending(a, b);
}


/***/ }),
/* 241 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(242);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasToStringTag = __webpack_require__(276)();
var hasOwn = __webpack_require__(275);
var $TypeError = __webpack_require__(249);

var toStringTag = hasToStringTag ? Symbol.toStringTag : null;

/** @type {import('.')} */
module.exports = function setToStringTag(object, value) {
	var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
	var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
	if (
		(typeof overrideIfSet !== 'undefined' && typeof overrideIfSet !== 'boolean')
		|| (typeof nonConfigurable !== 'undefined' && typeof nonConfigurable !== 'boolean')
	) {
		throw new $TypeError('if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans');
	}
	if (toStringTag && (overrideIfSet || !hasOwn(object, toStringTag))) {
		if ($defineProperty) {
			$defineProperty(object, toStringTag, {
				configurable: !nonConfigurable,
				enumerable: false,
				value: value,
				writable: false
			});
		} else {
			object[toStringTag] = value; // eslint-disable-line no-param-reassign
		}
	}
};


/***/ }),
/* 242 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $Object = __webpack_require__(243);

var $Error = __webpack_require__(244);
var $EvalError = __webpack_require__(245);
var $RangeError = __webpack_require__(246);
var $ReferenceError = __webpack_require__(247);
var $SyntaxError = __webpack_require__(248);
var $TypeError = __webpack_require__(249);
var $URIError = __webpack_require__(250);

var abs = __webpack_require__(251);
var floor = __webpack_require__(252);
var max = __webpack_require__(253);
var min = __webpack_require__(254);
var pow = __webpack_require__(255);
var round = __webpack_require__(256);
var sign = __webpack_require__(257);

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = __webpack_require__(259);
var $defineProperty = __webpack_require__(261);

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(262)();

var getProto = __webpack_require__(264);
var $ObjectGPO = __webpack_require__(266);
var $ReflectGPO = __webpack_require__(265);

var $apply = __webpack_require__(273);
var $call = __webpack_require__(271);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': $Object,
	'%Object.getOwnPropertyDescriptor%': $gOPD,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,

	'%Function.prototype.call%': $call,
	'%Function.prototype.apply%': $apply,
	'%Object.defineProperty%': $defineProperty,
	'%Object.getPrototypeOf%': $ObjectGPO,
	'%Math.abs%': abs,
	'%Math.floor%': floor,
	'%Math.max%': max,
	'%Math.min%': min,
	'%Math.pow%': pow,
	'%Math.round%': round,
	'%Math.sign%': sign,
	'%Reflect.getPrototypeOf%': $ReflectGPO
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(269);
var hasOwn = __webpack_require__(275);
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),
/* 243 */
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Object;


/***/ }),
/* 244 */
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Error;


/***/ }),
/* 245 */
/***/ ((module) => {

"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;


/***/ }),
/* 246 */
/***/ ((module) => {

"use strict";


/** @type {import('./range')} */
module.exports = RangeError;


/***/ }),
/* 247 */
/***/ ((module) => {

"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;


/***/ }),
/* 248 */
/***/ ((module) => {

"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;


/***/ }),
/* 249 */
/***/ ((module) => {

"use strict";


/** @type {import('./type')} */
module.exports = TypeError;


/***/ }),
/* 250 */
/***/ ((module) => {

"use strict";


/** @type {import('./uri')} */
module.exports = URIError;


/***/ }),
/* 251 */
/***/ ((module) => {

"use strict";


/** @type {import('./abs')} */
module.exports = Math.abs;


/***/ }),
/* 252 */
/***/ ((module) => {

"use strict";


/** @type {import('./floor')} */
module.exports = Math.floor;


/***/ }),
/* 253 */
/***/ ((module) => {

"use strict";


/** @type {import('./max')} */
module.exports = Math.max;


/***/ }),
/* 254 */
/***/ ((module) => {

"use strict";


/** @type {import('./min')} */
module.exports = Math.min;


/***/ }),
/* 255 */
/***/ ((module) => {

"use strict";


/** @type {import('./pow')} */
module.exports = Math.pow;


/***/ }),
/* 256 */
/***/ ((module) => {

"use strict";


/** @type {import('./round')} */
module.exports = Math.round;


/***/ }),
/* 257 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $isNaN = __webpack_require__(258);

/** @type {import('./sign')} */
module.exports = function sign(number) {
	if ($isNaN(number) || number === 0) {
		return number;
	}
	return number < 0 ? -1 : +1;
};


/***/ }),
/* 258 */
/***/ ((module) => {

"use strict";


/** @type {import('./isNaN')} */
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};


/***/ }),
/* 259 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/** @type {import('.')} */
var $gOPD = __webpack_require__(260);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),
/* 260 */
/***/ ((module) => {

"use strict";


/** @type {import('./gOPD')} */
module.exports = Object.getOwnPropertyDescriptor;


/***/ }),
/* 261 */
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
var $defineProperty = Object.defineProperty || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;


/***/ }),
/* 262 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(263);

/** @type {import('.')} */
module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),
/* 263 */
/***/ ((module) => {

"use strict";


/** @type {import('./shams')} */
/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	/** @type {{ [k in symbol]?: unknown }} */
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		// eslint-disable-next-line no-extra-parens
		var descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),
/* 264 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var reflectGetProto = __webpack_require__(265);
var originalGetProto = __webpack_require__(266);

var getDunderProto = __webpack_require__(267);

/** @type {import('.')} */
module.exports = reflectGetProto
	? function getProto(O) {
		// @ts-expect-error TS can't narrow inside a closure, for some reason
		return reflectGetProto(O);
	}
	: originalGetProto
		? function getProto(O) {
			if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
				throw new TypeError('getProto: not an object');
			}
			// @ts-expect-error TS can't narrow inside a closure, for some reason
			return originalGetProto(O);
		}
		: getDunderProto
			? function getProto(O) {
				// @ts-expect-error TS can't narrow inside a closure, for some reason
				return getDunderProto(O);
			}
			: null;


/***/ }),
/* 265 */
/***/ ((module) => {

"use strict";


/** @type {import('./Reflect.getPrototypeOf')} */
module.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;


/***/ }),
/* 266 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $Object = __webpack_require__(243);

/** @type {import('./Object.getPrototypeOf')} */
module.exports = $Object.getPrototypeOf || null;


/***/ }),
/* 267 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(268);
var gOPD = __webpack_require__(259);

var hasProtoAccessor;
try {
	// eslint-disable-next-line no-extra-parens, no-proto
	hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;

/** @type {import('./get')} */
module.exports = desc && typeof desc.get === 'function'
	? callBind([desc.get])
	: typeof $getPrototypeOf === 'function'
		? /** @type {import('./get')} */ function getDunder(value) {
			// eslint-disable-next-line eqeqeq
			return $getPrototypeOf(value == null ? value : $Object(value));
		}
		: false;


/***/ }),
/* 268 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(269);
var $TypeError = __webpack_require__(249);

var $call = __webpack_require__(271);
var $actualApply = __webpack_require__(272);

/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
module.exports = function callBindBasic(args) {
	if (args.length < 1 || typeof args[0] !== 'function') {
		throw new $TypeError('a function is required');
	}
	return $actualApply(bind, $call, args);
};


/***/ }),
/* 269 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(270);

module.exports = Function.prototype.bind || implementation;


/***/ }),
/* 270 */
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),
/* 271 */
/***/ ((module) => {

"use strict";


/** @type {import('./functionCall')} */
module.exports = Function.prototype.call;


/***/ }),
/* 272 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(269);

var $apply = __webpack_require__(273);
var $call = __webpack_require__(271);
var $reflectApply = __webpack_require__(274);

/** @type {import('./actualApply')} */
module.exports = $reflectApply || bind.call($call, $apply);


/***/ }),
/* 273 */
/***/ ((module) => {

"use strict";


/** @type {import('./functionApply')} */
module.exports = Function.prototype.apply;


/***/ }),
/* 274 */
/***/ ((module) => {

"use strict";


/** @type {import('./reflectApply')} */
module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;


/***/ }),
/* 275 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(269);

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);


/***/ }),
/* 276 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(263);

/** @type {import('.')} */
module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),
/* 277 */
/***/ ((module) => {

// populates missing values
module.exports = function(dst, src) {

  Object.keys(src).forEach(function(prop)
  {
    dst[prop] = dst[prop] || src[prop];
  });

  return dst;
};


/***/ }),
/* 278 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var parseUrl = (__webpack_require__(227).parse);

var DEFAULT_PORTS = {
  ftp: 21,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443,
};

var stringEndsWith = String.prototype.endsWith || function(s) {
  return s.length <= this.length &&
    this.indexOf(s, this.length - s.length) !== -1;
};

/**
 * @param {string|object} url - The URL, or the result from url.parse.
 * @return {string} The URL of the proxy that should handle the request to the
 *  given URL. If no proxy is set, this will be an empty string.
 */
function getProxyForUrl(url) {
  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};
  var proto = parsedUrl.protocol;
  var hostname = parsedUrl.host;
  var port = parsedUrl.port;
  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {
    return '';  // Don't proxy URLs without a valid scheme or host.
  }

  proto = proto.split(':', 1)[0];
  // Stripping ports in this way instead of using parsedUrl.hostname to make
  // sure that the brackets around IPv6 addresses are kept.
  hostname = hostname.replace(/:\d*$/, '');
  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
  if (!shouldProxy(hostname, port)) {
    return '';  // Don't proxy URLs that match NO_PROXY.
  }

  var proxy =
    getEnv('npm_config_' + proto + '_proxy') ||
    getEnv(proto + '_proxy') ||
    getEnv('npm_config_proxy') ||
    getEnv('all_proxy');
  if (proxy && proxy.indexOf('://') === -1) {
    // Missing scheme in proxy, default to the requested URL's scheme.
    proxy = proto + '://' + proxy;
  }
  return proxy;
}

/**
 * Determines whether a given URL should be proxied.
 *
 * @param {string} hostname - The host name of the URL.
 * @param {number} port - The effective port of the URL.
 * @returns {boolean} Whether the given URL should be proxied.
 * @private
 */
function shouldProxy(hostname, port) {
  var NO_PROXY =
    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();
  if (!NO_PROXY) {
    return true;  // Always proxy if NO_PROXY is not set.
  }
  if (NO_PROXY === '*') {
    return false;  // Never proxy if wildcard is set.
  }

  return NO_PROXY.split(/[,\s]/).every(function(proxy) {
    if (!proxy) {
      return true;  // Skip zero-length hosts.
    }
    var parsedProxy = proxy.match(/^(.+):(\d+)$/);
    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
    if (parsedProxyPort && parsedProxyPort !== port) {
      return true;  // Skip if ports don't match.
    }

    if (!/^[.*]/.test(parsedProxyHostname)) {
      // No wildcards, so stop proxying if there is an exact match.
      return hostname !== parsedProxyHostname;
    }

    if (parsedProxyHostname.charAt(0) === '*') {
      // Remove leading wildcard.
      parsedProxyHostname = parsedProxyHostname.slice(1);
    }
    // Stop proxying if the hostname ends with the no_proxy host.
    return !stringEndsWith.call(hostname, parsedProxyHostname);
  });
}

/**
 * Get the value for an environment variable.
 *
 * @param {string} key - The name of the environment variable.
 * @return {string} The value of the environment variable.
 * @private
 */
function getEnv(key) {
  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';
}

exports.getProxyForUrl = getProxyForUrl;


/***/ }),
/* 279 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var url = __webpack_require__(227);
var URL = url.URL;
var http = __webpack_require__(225);
var https = __webpack_require__(226);
var Writable = (__webpack_require__(223).Writable);
var assert = __webpack_require__(280);
var debug = __webpack_require__(281);

// Preventive platform detection
// istanbul ignore next
(function detectUnsupportedEnvironment() {
  var looksLikeNode = typeof process !== "undefined";
  var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
  var looksLikeV8 = isFunction(Error.captureStackTrace);
  if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
    console.warn("The follow-redirects package should be excluded from browser builds.");
  }
}());

// Whether to use the native URL object or the legacy url module
var useNativeURL = false;
try {
  assert(new URL(""));
}
catch (error) {
  useNativeURL = error.code === "ERR_INVALID_URL";
}

// URL fields to preserve in copy operations
var preservedUrlFields = [
  "auth",
  "host",
  "hostname",
  "href",
  "path",
  "pathname",
  "port",
  "protocol",
  "query",
  "search",
  "hash",
];

// Create handlers that pass events from native requests
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});

// Error types with codes
var InvalidUrlError = createErrorType(
  "ERR_INVALID_URL",
  "Invalid URL",
  TypeError
);
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded",
  RedirectionError
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);

// istanbul ignore next
var destroy = Writable.prototype.destroy || noop;

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    try {
      self._processResponse(response);
    }
    catch (cause) {
      self.emit("error", cause instanceof RedirectionError ?
        cause : new RedirectionError({ cause: cause }));
    }
  };

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};

RedirectableRequest.prototype.destroy = function (error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  }

  // Validate input and shift parameters if necessary
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  }
  else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Write data if needed and end
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  }
  else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this;

  // Destroys the socket on timeout
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }

  // Sets up a timer to trigger a timeout event
  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }
    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }

  // Stops a timeout from triggering
  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    }

    // Clean up all attached listeners
    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);
    self.removeListener("close", clearTimer);
    if (callback) {
      self.removeListener("timeout", callback);
    }
    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  }

  // Attach callback if passed
  if (callback) {
    this.on("timeout", callback);
  }

  // Start the timer if or when the socket is opened
  if (this.socket) {
    startTimer(this.socket);
  }
  else {
    this._currentRequest.once("socket", startTimer);
  }

  // Clean up on events
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);

  return this;
};

// Proxy all other public ClientRequest methods
[
  "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  }

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};


// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    throw new TypeError("Unsupported protocol " + protocol);
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request and set up its event handlers
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }

  // RFC7230§5.3.1: When making a request directly to an origin server, […]
  // a client MUST send only the absolute path […] as the request-target.
  this._currentUrl = /^\//.test(this._options.path) ?
    url.format(this._options) :
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      // Only write if this request has not been redirected yet
      // istanbul ignore else
      if (request === self._currentRequest) {
        // Report any write errors
        // istanbul ignore if
        if (error) {
          self.emit("error", error);
        }
        // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          // istanbul ignore else
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        }
        // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.

  // If the response is not a redirect; return it as-is
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false ||
      statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
    return;
  }

  // The response is a redirect, so abort the current request
  destroyRequest(this._currentRequest);
  // Discard the remainder of the response to avoid waiting for data
  response.destroy();

  // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).
  if (++this._redirectCount > this._options.maxRedirects) {
    throw new TooManyRedirectsError();
  }

  // Store the request headers if applicable
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host"),
    }, this._options.headers);
  }

  // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    // Drop a possible entity and headers related to it
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }

  // Drop the Host header, as the redirect might lead to a different host
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

  // If the redirect is relative, carry over the host of the last request
  var currentUrlParts = parseUrl(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
    url.format(Object.assign(currentUrlParts, { host: currentHost }));

  // Create the redirected request
  var redirectUrl = resolveUrl(location, currentUrl);
  debug("redirecting to", redirectUrl.href);
  this._isRedirect = true;
  spreadUrlObject(redirectUrl, this._options);

  // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain
  if (redirectUrl.protocol !== currentUrlParts.protocol &&
     redirectUrl.protocol !== "https:" ||
     redirectUrl.host !== currentHost &&
     !isSubdomain(redirectUrl.host, currentHost)) {
    removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
  }

  // Evaluate the beforeRedirect callback
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode,
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders,
    };
    beforeRedirect(this._options, responseDetails, requestDetails);
    this._sanitizeOptions(this._options);
  }

  // Perform the redirected request
  this._performRequest();
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    function request(input, options, callback) {
      // Parse parameters, ensuring that input is an object
      if (isURL(input)) {
        input = spreadUrlObject(input);
      }
      else if (isString(input)) {
        input = spreadUrlObject(parseUrl(input));
      }
      else {
        callback = options;
        options = validateUrl(input);
        input = { protocol: protocol };
      }
      if (isFunction(options)) {
        callback = options;
        options = null;
      }

      // Set defaults
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength,
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString(options.host) && !isString(options.hostname)) {
        options.hostname = "::1";
      }

      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }

    // Executes a GET request, following redirects
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }

    // Expose the properties on the wrapped protocol
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true },
    });
  });
  return exports;
}

function noop() { /* empty */ }

function parseUrl(input) {
  var parsed;
  // istanbul ignore else
  if (useNativeURL) {
    parsed = new URL(input);
  }
  else {
    // Ensure the URL is valid and absolute
    parsed = validateUrl(url.parse(input));
    if (!isString(parsed.protocol)) {
      throw new InvalidUrlError({ input });
    }
  }
  return parsed;
}

function resolveUrl(relative, base) {
  // istanbul ignore next
  return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
}

function validateUrl(input) {
  if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  return input;
}

function spreadUrlObject(urlObject, target) {
  var spread = target || {};
  for (var key of preservedUrlFields) {
    spread[key] = urlObject[key];
  }

  // Fix IPv6 hostname
  if (spread.hostname.startsWith("[")) {
    spread.hostname = spread.hostname.slice(1, -1);
  }
  // Ensure port is a number
  if (spread.port !== "") {
    spread.port = Number(spread.port);
  }
  // Concatenate path
  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;

  return spread;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return (lastValue === null || typeof lastValue === "undefined") ?
    undefined : String(lastValue).trim();
}

function createErrorType(code, message, baseClass) {
  // Create constructor
  function CustomError(properties) {
    // istanbul ignore else
    if (isFunction(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    }
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }

  // Attach constructor and set default properties
  CustomError.prototype = new (baseClass || Error)();
  Object.defineProperties(CustomError.prototype, {
    constructor: {
      value: CustomError,
      enumerable: false,
    },
    name: {
      value: "Error [" + code + "]",
      enumerable: false,
    },
  });
  return CustomError;
}

function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop);
  request.destroy(error);
}

function isSubdomain(subdomain, domain) {
  assert(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

function isFunction(value) {
  return typeof value === "function";
}

function isBuffer(value) {
  return typeof value === "object" && ("length" in value);
}

function isURL(value) {
  return URL && value instanceof URL;
}

// Exports
module.exports = wrap({ http: http, https: https });
module.exports.wrap = wrap;


/***/ }),
/* 280 */
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),
/* 281 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __webpack_require__(282)("follow-redirects");
    }
    catch (error) { /* */ }
    if (typeof debug !== "function") {
      debug = function () { /* */ };
    }
  }
  debug.apply(null, arguments);
};


/***/ }),
/* 282 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
	module.exports = __webpack_require__(283);
} else {
	module.exports = __webpack_require__(286);
}


/***/ }),
/* 283 */
/***/ ((module, exports, __webpack_require__) => {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	let m;

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	// eslint-disable-next-line no-return-assign
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(284)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


/***/ }),
/* 284 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(285);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		const split = (typeof namespaces === 'string' ? namespaces : '')
			.trim()
			.replace(/\s+/g, ',')
			.split(',')
			.filter(Boolean);

		for (const ns of split) {
			if (ns[0] === '-') {
				createDebug.skips.push(ns.slice(1));
			} else {
				createDebug.names.push(ns);
			}
		}
	}

	/**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */
	function matchesTemplate(search, template) {
		let searchIndex = 0;
		let templateIndex = 0;
		let starIndex = -1;
		let matchIndex = 0;

		while (searchIndex < search.length) {
			if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
				// Match character or proceed with wildcard
				if (template[templateIndex] === '*') {
					starIndex = templateIndex;
					matchIndex = searchIndex;
					templateIndex++; // Skip the '*'
				} else {
					searchIndex++;
					templateIndex++;
				}
			} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition
				// Backtrack to the last '*' and try to match more characters
				templateIndex = starIndex + 1;
				matchIndex++;
				searchIndex = matchIndex;
			} else {
				return false; // No match
			}
		}

		// Handle trailing '*' in template
		while (templateIndex < template.length && template[templateIndex] === '*') {
			templateIndex++;
		}

		return templateIndex === template.length;
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names,
			...createDebug.skips.map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		for (const skip of createDebug.skips) {
			if (matchesTemplate(name, skip)) {
				return false;
			}
		}

		for (const ns of createDebug.names) {
			if (matchesTemplate(name, ns)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),
/* 285 */
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),
/* 286 */
/***/ ((module, exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

const tty = __webpack_require__(287);
const util = __webpack_require__(222);

/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = __webpack_require__(288);

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty.isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = __webpack_require__(284)(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts);
};


/***/ }),
/* 287 */
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),
/* 288 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSupportsColor: () => (/* binding */ createSupportsColor),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(289);
/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(290);
/* harmony import */ var node_tty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(291);




// From: https://github.com/sindresorhus/has-flag/blob/main/index.js
/// function hasFlag(flag, argv = globalThis.Deno?.args ?? process.argv) {
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : node_process__WEBPACK_IMPORTED_MODULE_0__.argv) {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}

const {env} = node_process__WEBPACK_IMPORTED_MODULE_0__;

let flagForceColor;
if (
	hasFlag('no-color')
	|| hasFlag('no-colors')
	|| hasFlag('color=false')
	|| hasFlag('color=never')
) {
	flagForceColor = 0;
} else if (
	hasFlag('color')
	|| hasFlag('colors')
	|| hasFlag('color=true')
	|| hasFlag('color=always')
) {
	flagForceColor = 1;
}

function envForceColor() {
	if ('FORCE_COLOR' in env) {
		if (env.FORCE_COLOR === 'true') {
			return 1;
		}

		if (env.FORCE_COLOR === 'false') {
			return 0;
		}

		return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3,
	};
}

function _supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {
	const noFlagForceColor = envForceColor();
	if (noFlagForceColor !== undefined) {
		flagForceColor = noFlagForceColor;
	}

	const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;

	if (forceColor === 0) {
		return 0;
	}

	if (sniffFlags) {
		if (hasFlag('color=16m')
			|| hasFlag('color=full')
			|| hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}
	}

	// Check for Azure DevOps pipelines.
	// Has to be above the `!streamIsTTY` check.
	if ('TF_BUILD' in env && 'AGENT_NAME' in env) {
		return 1;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (node_process__WEBPACK_IMPORTED_MODULE_0__.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = node_os__WEBPACK_IMPORTED_MODULE_1__.release().split('.');
		if (
			Number(osRelease[0]) >= 10
			&& Number(osRelease[2]) >= 10_586
		) {
			return Number(osRelease[2]) >= 14_931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if ('GITHUB_ACTIONS' in env || 'GITEA_ACTIONS' in env) {
			return 3;
		}

		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if (env.TERM === 'xterm-kitty') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app': {
				return version >= 3 ? 3 : 2;
			}

			case 'Apple_Terminal': {
				return 2;
			}
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function createSupportsColor(stream, options = {}) {
	const level = _supportsColor(stream, {
		streamIsTTY: stream && stream.isTTY,
		...options,
	});

	return translateLevel(level);
}

const supportsColor = {
	stdout: createSupportsColor({isTTY: node_tty__WEBPACK_IMPORTED_MODULE_2__.isatty(1)}),
	stderr: createSupportsColor({isTTY: node_tty__WEBPACK_IMPORTED_MODULE_2__.isatty(2)}),
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supportsColor);


/***/ }),
/* 289 */
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),
/* 290 */
/***/ ((module) => {

"use strict";
module.exports = require("node:os");

/***/ }),
/* 291 */
/***/ ((module) => {

"use strict";
module.exports = require("node:tty");

/***/ }),
/* 292 */
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),
/* 293 */
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),
/* 294 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const fs = __webpack_require__(142);
const os = __webpack_require__(4);
const crypto = __webpack_require__(128);
const YAML = __webpack_require__(145);
const axios = __webpack_require__(219);
const path = __webpack_require__(143);
const uuid = __webpack_require__(119);
const { spawn } = __webpack_require__(295);
const {
  validate,
  resolvePaths,
  transformToSchemaKey,
  readFile,
} = __webpack_require__(5);

exports.qualifyFiles = qualifyFiles;
exports.parseTests = parseTests;
exports.outputResults = outputResults;
exports.loadEnvs = loadEnvs;
exports.log = log;
exports.timestamp = timestamp;
exports.replaceEnvs = replaceEnvs;
exports.spawnCommand = spawnCommand;
exports.inContainer = inContainer;
exports.cleanTemp = cleanTemp;
exports.calculatePercentageDifference = calculatePercentageDifference;
exports.fetchFile = fetchFile;
exports.isRelativeUrl = isRelativeUrl;

function isRelativeUrl(url) {
  try {
    new URL(url);
    // If no error is thrown, it's a complete URL
    return false;
  } catch (error) {
    // If URL constructor throws an error, it's a relative URL
    return true;
  }
}

// Parse a JSON or YAML object
function parseObject({ stringifiedObject }) {
  if (typeof stringifiedObject === "string") {
    // If string, try to parse as JSON or YAML
    try {
      const json = JSON.parse(stringifiedObject);
      return json;
    } catch (jsonError) {
      try {
        const yaml = YAML.parse(stringifiedObject);
        return yaml;
      } catch (yamlError) {
        throw new Error("Invalid JSON or YAML format");
      }
    }
  }
  return stringifiedObject;
}

// Delete all contents of doc-detective temp directory
function cleanTemp() {
  const tempDir = `${os.tmpdir}/doc-detective`;
  if (fs.existsSync(tempDir)) {
    fs.readdirSync(tempDir).forEach((file) => {
      const curPath = `${tempDir}/${file}`;
      fs.unlinkSync(curPath);
    });
  }
}

// Fetch a file from a URL and save to a temp directory
// If the file is not JSON, return the contents as a string
// If the file is not found, return an error
async function fetchFile(fileURL) {
  try {
    const response = await axios.get(fileURL);
    if (typeof response.data === "object") {
      response.data = JSON.stringify(response.data, null, 2);
    } else {
      response.data = response.data.toString();
    }
    const fileName = fileURL.split("/").pop();
    const hash = crypto.createHash("md5").update(response.data).digest("hex");
    const filePath = `${os.tmpdir}/doc-detective/${hash}_${fileName}`;
    // If doc-detective temp directory doesn't exist, create it
    if (!fs.existsSync(`${os.tmpdir}/doc-detective`)) {
      fs.mkdirSync(`${os.tmpdir}/doc-detective`);
    }
    // If file doesn't exist, write it
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, response.data);
    }
    return { result: "success", path: filePath };
  } catch (error) {
    return { result: "error", message: error };
  }
}

// Inspect and qualify files as valid inputs
async function qualifyFiles({ config }) {
  let dirs = [];
  let files = [];
  let sequence = [];

  // Determine source sequence
  const setup = config.beforeAny;
  if (setup) sequence = sequence.concat(setup);
  const input = config.input;
  sequence = sequence.concat(input);
  const cleanup = config.afterAll;
  if (cleanup) sequence = sequence.concat(cleanup);

  for (let source of sequence) {
    log(config, "debug", `source: ${source}`);
    // Check if source is a URL
    let isURL = source.startsWith("http://") || source.startsWith("https://");
    // If URL, fetch file and place in temp directory
    if (isURL) {
      const fetch = await fetchFile(source);
      if (fetch.result === "error") {
        log(config, "warning", fetch.message);
        continue;
      }
      source = fetch.path;
    }
    // Check if source is a file or directory
    let isFile = fs.statSync(source).isFile();
    let isDir = fs.statSync(source).isDirectory();

    // Parse input
    if (isFile && (await isValidSourceFile({ config, files, source }))) {
      // Passes all checks
      files.push(path.resolve(source));
    } else if (isDir) {
      // Load files from directory
      dirs = [];
      dirs[0] = source;
      for (const dir of dirs) {
        const objects = fs.readdirSync(dir);
        for (const object of objects) {
          const content = path.resolve(dir + "/" + object);
          // Exclude node_modules for local installs
          if (content.includes("node_modules")) continue;
          // Check if file or directory
          const isFile = fs.statSync(content).isFile();
          const isDir = fs.statSync(content).isDirectory();
          // Add to files or dirs array
          if (
            isFile &&
            (await isValidSourceFile({ config, files, source: content }))
          ) {
            files.push(path.resolve(content));
          } else if (isDir && config.recursive) {
            // recursive set to true
            dirs.push(content);
          }
        }
      }
    }
  }
  return files;
}

// Check if a source file is valid based on fileType definitions
async function isValidSourceFile({ config, files, source }) {
  log(config, "debug", `validation: ${source}`);
  // Determine allowed extensions
  let allowedExtensions = ["json", "yaml", "yml"];
  config.fileTypes.forEach((fileType) => {
    allowedExtensions = allowedExtensions.concat(fileType.extensions);
  });
  // Is present in files array already
  if (files.indexOf(source) >= 0) return false;
  // Is JSON or YAML but isn't a valid spec-formatted JSON object
  if (
    path.extname(source) === ".json" ||
    path.extname(source) === ".yaml" ||
    path.extname(source) === ".yml"
  ) {
    const content = await readFile({ fileURLOrPath: source });
    if (typeof content !== "object") {
      log(
        config,
        "debug",
        `${source} isn't a valid test specification. Skipping.`
      );
      return false;
    }
    const validation = validate({
      schemaKey: "spec_v3",
      object: content,
      addDefaults: false,
    });
    if (!validation.valid) {
      log(config, "warning", validation);
      log(
        config,
        "warning",
        `${source} isn't a valid test specification. Skipping.`
      );
      return false;
    }
    // TODO: Move `before` and `after checking out of is and into a broader test validation function
    // If any objects in `tests` array have `before` or `after` property, make sure those files exist
    for (const test of content.tests) {
      if (test.before) {
        let beforePath = "";
        if (config.relativePathBase === "file") {
          beforePath = path.resolve(path.dirname(source), test.before);
        } else {
          beforePath = path.resolve(test.before);
        }
        if (!fs.existsSync(beforePath)) {
          log(
            config,
            "debug",
            `${beforePath} is specified to run before a test but isn't a valid file. Skipping ${source}.`
          );
          return false;
        }
      }
      if (test.after) {
        let afterPath = "";
        if (config.relativePathBase === "file") {
          afterPath = path.resolve(path.dirname(source), test.after);
        } else {
          afterPath = path.resolve(test.after);
        }
        if (!fs.existsSync(afterPath)) {
          log(
            config,
            "debug",
            `${afterPath} is specified to run after a test but isn't a valid file. Skipping ${source}.`
          );
          return false;
        }
      }
    }
  }
  // If extension isn't in list of allowed extensions
  const extension = path.extname(source).substring(1);
  if (!allowedExtensions.includes(extension)) {
    log(
      config,
      "debug",
      `${source} extension isn't specified in a \`config.fileTypes\` object. Skipping.`
    );
    return false;
  }

  return true;
}

async function parseContent({ config, content, filePath, fileType }) {
  const statements = [];
  const statementTypes = [
    "testStart",
    "testEnd",
    "ignoreStart",
    "ignoreEnd",
    "step",
  ];

  function findTest({ tests, testId }) {
    let test = tests.find((test) => test.testId === testId);
    if (!test) {
      test = { testId, steps: [] };
      tests.push(test);
    }
    return test;
  }

  function replaceNumericVariables(stringOrObject, values) {
    if (
      typeof stringOrObject !== "string" &&
      typeof stringOrObject !== "object"
    ) {
      throw new Error("Invalid stringOrObject type");
    }
    if (typeof values !== "object") {
      throw new Error("Invalid values type");
    }

    if (typeof stringOrObject === "string") {
      // Replace $n with values[n]
      stringOrObject = stringOrObject.replace(/\$[0-9]+/g, (variable) => {
        const index = variable.substring(1);
        return values[index];
      });
    }

    Object.keys(stringOrObject).forEach((key) => {
      if (typeof stringOrObject[key] === "object") {
        // Iterate through object and recursively resolve variables
        stringOrObject[key] = replaceNumericVariables(
          stringOrObject[key],
          values
        );
      } else if (typeof stringOrObject[key] === "string") {
        // Replace $n with values[n]
        stringOrObject[key] = stringOrObject[key].replace(
          /\$[0-9]+/g,
          (variable) => {
            const index = variable.substring(1);
            return values[index];
          }
        );
      }
      return key;
    });
    return stringOrObject;
  }

  // Test for each statement type
  statementTypes.forEach((statementType) => {
    // If inline statements aren't defined, skip
    if (
      typeof fileType.inlineStatements === "undefined" ||
      typeof fileType.inlineStatements[statementType] === "undefined"
    )
      return;
    // Check if fileType has inline statements
    fileType.inlineStatements[statementType].forEach((statementRegex) => {
      const regex = new RegExp(statementRegex, "g");
      const matches = [...content.matchAll(regex)];
      matches.forEach((match) => {
        // Add 'type' property to each match
        match.type = statementType;
        // Add 'sortIndex' property to each match
        match.sortIndex = match[1]
          ? match.index + match[1].length
          : match.index;
      });
      statements.push(...matches);
    });
  });

  if (config.detectSteps && fileType.markup) {
    fileType.markup.forEach((markup) => {
      markup.regex.forEach((pattern) => {
        const regex = new RegExp(pattern, "g");
        const matches = [...content.matchAll(regex)];
        if (matches.length > 0 && markup.batchMatches) {
          // Combine all matches into a single match
          const combinedMatch = {
            1: matches.map((match) => match[1] || match[0]).join(""),
            type: "detectedStep",
            markup: markup,
            sortIndex: Math.min(...matches.map((match) => match.index)),
          };
          statements.push(combinedMatch);
        } else {
          matches.forEach((match) => {
            // Add 'type' property to each match
            match.type = "detectedStep";
            match.markup = markup;
            // Add 'sortIndex' property to each match
            match.sortIndex = match[1]
              ? match.index + match[1].length
              : match.index;
          });
          statements.push(...matches);
        }
      });
    });
  }

  // Sort statements by index
  statements.sort((a, b) => a.sortIndex - b.sortIndex);

  // TODO: Split above into a separate function

  // Process statements into tests and steps
  let tests = [];
  let testId = `${uuid.v4()}`;
  let ignore = false;
  let currentIndex = 0;

  statements.forEach((statement) => {
    let test = "";
    let statementContent = "";
    let stepsCleanup = false;
    currentIndex = statement.sortIndex;
    switch (statement.type) {
      case "testStart":
        // Test start statement
        statementContent = statement[1] || statement[0];
        test = parseObject({ stringifiedObject: statementContent });

        // If v2 schema, convert to v3
        if (test.id || test.file || test.setup || test.cleanup) {
          // Add temporary step to pass validation
          if (!test.steps) {
            test.steps = [{ action: "goTo", url: "https://doc-detective.com" }];
            stepsCleanup = true;
          }
          test = transformToSchemaKey({
            object: test,
            currentSchema: "test_v2",
            targetSchema: "test_v3",
          });
          // Remove temporary step
          if (stepsCleanup) {
            test.steps = [];
            stepsCleanup = false;
          }
        }

        if (test.testId) {
          // If the testId already exists, update the variable
          testId = `${test.testId}`;
        } else {
          // If the testId doesn't exist, set it
          test.testId = `${testId}`;
        }
        if (!test.steps) {
          // If the test doesn't have steps, add an empty array
          test.steps = [];
        }
        tests.push(test);
        break;
      case "testEnd":
        // Test end statement
        testId = `${uuid.v4()}`;
        ignore = false;
        break;
      case "ignoreStart":
        // Ignore start statement
        ignore = true;
        break;
      case "ignoreEnd":
        // Ignore end statement
        ignore = false;
        break;
      case "detectedStep":
        // Transform detected content into a step
        test = findTest({ tests, testId });
        if (typeof test.detectSteps !== "undefined" && !test.detectSteps) {
          break;
        }
        if (statement?.markup?.actions) {
          statement.markup.actions.forEach((action) => {
            let step = {};
            if (typeof action === "string") {
              if (action === "runCode") return;
              // If action is string, build step using simple syntax
              step[action] = statement[1] || statement[0];
              if (
                config.origin &&
                (action === "goTo" || action === "checkLink")
              ) {
                step[action].origin = config.origin;
              }
            } else {
              // Substitute variables $n with match[n]
              // TODO: Make key substitution recursive
              step = replaceNumericVariables(action, statement);
            }
            // Make sure is valid v3 step schema
            valid = validate({
              schemaKey: "step_v3",
              object: step,
              addDefaults: false,
            });
            if (!valid) {
              log(
                config,
                "warning",
                `Step ${JSON.stringify(step)} isn't a valid step. Skipping.`
              );
              return false;
            }
            step = valid.object;
            test.steps.push(step);
          });
        }
        break;
      case "step":
        // Step statement
        test = findTest({ tests, testId });
        statementContent = statement[1] || statement[0];
        let step = parseObject({ stringifiedObject: statementContent });
        // Make sure is valid v3 step schema
        const validation = validate({
          schemaKey: "step_v3",
          object: step,
          addDefaults: false,
        });
        if (!validation.valid) {
          log(
            config,
            "warning",
            `Step ${JSON.stringify(step)} isn't a valid step. Skipping.`
          );
          return false;
        }
        step = validation.object;
        test.steps.push(step);
        break;
      default:
        break;
    }
  });

  tests.forEach((test) => {
    const validation = validate({
      schemaKey: "test_v3",
      object: test,
      addDefaults: false,
    });
    if (!validation.valid) {
      log(
        config,
        "warning",
        `Couldn't convert some steps in ${filePath} to a valid test.Skipping. Errors: ${validation.errors}`
      );
      return false;
    }
    test = validation.object;
  });

  return tests;
}

// Parse files for tests
async function parseTests({ config, files }) {
  let specs = [];

  // Loop through files
  for (const file of files) {
    log(config, "debug", `file: ${file}`);
    const extension = path.extname(file).slice(1);
    let content = "";
    content = await readFile({ fileURLOrPath: file });

    if (typeof content === "object") {
      // Resolve to catch any relative setup or cleanup paths
      content = await resolvePaths({
        config: config,
        object: content,
        filePath: file,
      });

      for (const test of content.tests) {
        // If any objects in `tests` array have `before` property, add `tests[0].steps` of before to the beginning of the object's `steps` array.
        if (test.before) {
          const setup = await readFile({ fileURLOrPath: test.before });
          test.steps = setup.tests[0].steps.concat(test.steps);
        }
        // If any objects in `tests` array have `after` property, add `tests[0].steps` of after to the end of the object's `steps` array.
        if (test.after) {
          const cleanup = await readFile({ fileURLOrPath: test.after });
          test.steps = test.steps.concat(cleanup.tests[0].steps);
        }
      }
      // Validate each step
      for (const test of content.tests) {
        // Filter out steps that don't pass validation
        test.steps.forEach((step) => {
          const validation = validate({
            schemaKey: `step_v3`,
            object: { ...step },
            addDefaults: false,
          });
          if (!validation.valid) {
            log(
              config,
              "warning",
              `Step ${step} isn't a valid step. Skipping.`
            );
            return false;
          }
          return true;
        });
      }
      const validation = validate({
        schemaKey: "spec_v3",
        object: content,
        addDefaults: false,
      });
      if (!validation.valid) {
        log(config, "warning", validation);
        log(
          config,
          "warning",
          `After applying setup and cleanup steps, ${file} isn't a valid test specification. Skipping.`
        );
        return false;
      }
      // Make sure that object is now a valid v3 spec
      content = validation.object;
      // Resolve previously unapplied defaults
      content = await resolvePaths({
        config: config,
        object: content,
        filePath: file,
      });
      specs.push(content);
    } else {
      // Process non-object
      let id = `${uuid.v4()}`;
      let spec = { specId: id, contentPath: file, tests: [] };
      const fileType = config.fileTypes.find((fileType) =>
        fileType.extensions.includes(extension)
      );

      // Process executables
      if (fileType.runShell) {
        // Substitute all instances of $1 with the file path
        let runShell = JSON.stringify(fileType.runShell);
        runShell = runShell.replace(/\$1/g, file);
        runShell = JSON.parse(runShell);

        const test = {
          steps: [
            {
              runShell,
            },
          ],
        };

        // Validate test
        const validation = validate({
          schemaKey: "test_v3",
          object: test,
          addDefaults: false,
        });
        if (!validation.valid) {
          log(
            config,
            "warning",
            `Failed to convert ${file} to a runShell step: ${validation.errors}. Skipping.`
          );
          continue;
        }

        spec.tests.push(test);
        continue;
      }

      // Process content
      const tests = await parseContent({
        config: config,
        content: content,
        fileType: fileType,
        filePath: file,
      });
      spec.tests.push(...tests);

      // Remove tests with no steps
      spec.tests = spec.tests.filter((test) => test.steps.length > 0);

      // Push spec to specs, if it is valid
      const validation = validate({
        schemaKey: "spec_v3",
        object: spec,
        addDefaults: false,
      });
      if (!validation.valid) {
        log(
          config,
          "warning",
          `Tests from ${file} don't create a valid test specification. Skipping.`
        );
      } else {
        // Resolve paths
        spec = await resolvePaths({
          config: config,
          object: spec,
          filePath: file,
        });
        specs.push(spec);
      }
    }
  }
  return specs;
}

async function outputResults(path, results, config) {
  let data = JSON.stringify(results, null, 2);
  fs.writeFile(path, data, (err) => {
    if (err) throw err;
  });
  log(config, "info", "RESULTS:");
  log(config, "info", results);
  log(config, "info", `See results at ${path}`);
  log(config, "info", "Cleaning up and finishing post-processing.");
}

/**
 * Loads environment variables from a specified .env file.
 *
 * @async
 * @param {string} envsFile - Path to the environment variables file.
 * @returns {Promise<Object>} An object containing the operation result.
 * @returns {string} returns.status - "PASS" if environment variables were loaded successfully, "FAIL" otherwise.
 * @returns {string} returns.description - A description of the operation result.
 */
async function loadEnvs(envsFile) {
  const fileExists = fs.existsSync(envsFile);
  if (fileExists) {
    (__webpack_require__(296).config)({ path: envsFile, override: true });
    return { status: "PASS", description: "Envs set." };
  } else {
    return { status: "FAIL", description: "Invalid file." };
  }
}

async function log(config, level, message) {
  let logLevelMatch = false;
  if (config.logLevel === "error" && level === "error") {
    logLevelMatch = true;
  } else if (
    config.logLevel === "warning" &&
    (level === "error" || level === "warning")
  ) {
    logLevelMatch = true;
  } else if (
    config.logLevel === "info" &&
    (level === "error" || level === "warning" || level === "info")
  ) {
    logLevelMatch = true;
  } else if (
    config.logLevel === "debug" &&
    (level === "error" ||
      level === "warning" ||
      level === "info" ||
      level === "debug")
  ) {
    logLevelMatch = true;
  }

  if (logLevelMatch) {
    if (typeof message === "string") {
      let logMessage = `(${level.toUpperCase()}) ${message}`;
      console.log(logMessage);
    } else if (typeof message === "object") {
      let logMessage = `(${level.toUpperCase()})`;
      console.log(logMessage);
      console.log(JSON.stringify(message, null, 2));
    }
  }
}

function replaceEnvs(stringOrObject) {
  if (!stringOrObject) return stringOrObject;
  if (typeof stringOrObject === "object") {
    // Iterate through object and recursively resolve variables
    Object.keys(stringOrObject).forEach((key) => {
      // Resolve all variables in key value
      stringOrObject[key] = replaceEnvs(stringOrObject[key]);
    });
  } else if (typeof stringOrObject === "string") {
    // Load variable from string
    variableRegex = new RegExp(/\$[a-zA-Z0-9_]+/, "g");
    matches = stringOrObject.match(variableRegex);
    // If no matches, return string
    if (!matches) return stringOrObject;
    // Iterate matches
    matches.forEach((match) => {
      // Check if is declared variable
      value = process.env[match.substring(1)];
      if (value) {
        // If match is the entire string instead of just being a substring, try to convert value to object
        try {
          if (
            match.length === stringOrObject.length &&
            typeof JSON.parse(stringOrObject) === "object"
          ) {
            value = JSON.parse(value);
          }
        } catch {}
        // Attempt to load additional variables in value
        value = replaceEnvs(value);
        // Replace match with variable value
        if (typeof value === "string") {
          // Replace match with value. Supports whole- and sub-string matches.
          stringOrObject = stringOrObject.replace(match, value);
        } else if (typeof value === "object") {
          // If value is an object, replace match with object
          stringOrObject = value;
        }
      }
    });
  }
  return stringOrObject;
}

function timestamp() {
  let timestamp = new Date();
  return `${timestamp.getFullYear()}${("0" + (timestamp.getMonth() + 1)).slice(
    -2
  )}${("0" + timestamp.getDate()).slice(-2)}-${(
    "0" + timestamp.getHours()
  ).slice(-2)}${("0" + timestamp.getMinutes()).slice(-2)}${(
    "0" + timestamp.getSeconds()
  ).slice(-2)}`;
}

// Perform a native command in the current working directory.
/**
 * Executes a command in a child process using the `spawn` function from the `child_process` module.
 * @param {string} cmd - The command to execute.
 * @param {string[]} args - The arguments to pass to the command.
 * @param {object} options - The options for the command execution.
 * @param {boolean} options.workingDirectory - Directory in which to execute the command.
 * @param {boolean} options.debug - Whether to enable debug mode.
 * @returns {Promise<object>} A promise that resolves to an object containing the stdout, stderr, and exit code of the command.
 */
async function spawnCommand(cmd, args = [], options) {
  // Set default options
  if (!options) options = {};

  // Set shell (bash/cmd) based on OS
  let shell = "bash";
  let command = ["-c"];
  if (process.platform === "win32") {
    shell = "cmd";
    command = ["/c"];
  }

  // Combine command and arguments
  let fullCommand = [cmd, ...args].join(" ");
  command.push(fullCommand);

  // Set spawnOptions based on OS
  let spawnOptions = {};
  let cleanupNodeModules = false;
  if (process.platform === "win32") {
    spawnOptions.shell = true;
    spawnOptions.windowsHide = true;
  }
  if (options.cwd) {
    spawnOptions.cwd = options.cwd;
  }

  const runCommand = spawn(shell, command, spawnOptions);
  runCommand.on("error", (error) => {});

  // Capture stdout
  let stdout = "";
  for await (const chunk of runCommand.stdout) {
    stdout += chunk;
    if (options.debug) console.log(chunk.toString());
  }
  // Remove trailing newline
  stdout = stdout.replace(/\n$/, "");

  // Capture stderr
  let stderr = "";
  for await (const chunk of runCommand.stderr) {
    stderr += chunk;
    if (options.debug) console.log(chunk.toString());
  }
  // Remove trailing newline
  stderr = stderr.replace(/\n$/, "");

  // Capture exit code
  const exitCode = await new Promise((resolve, reject) => {
    runCommand.on("close", resolve);
  });

  return { stdout, stderr, exitCode };
}

async function inContainer() {
  if (process.env.IN_CONTAINER === "true") return true;
  if (process.platform === "linux") {
    result = await spawnCommand(
      `grep -sq "docker\|lxc\|kubepods" /proc/1/cgroup`
    );
    if (result.exitCode === 0) return true;
  }
  return false;
}

function calculatePercentageDifference(text1, text2) {
  const distance = llevenshteinDistance(text1, text2);
  const maxLength = Math.max(text1.length, text2.length);
  const percentageDiff = (distance / maxLength) * 100;
  return percentageDiff.toFixed(2); // Returns the percentage difference as a string with two decimal places
}

function llevenshteinDistance(s, t) {
  if (!s.length) return t.length;
  if (!t.length) return s.length;

  const arr = [];

  for (let i = 0; i <= t.length; i++) {
    arr[i] = [i];
  }

  for (let j = 0; j <= s.length; j++) {
    arr[0][j] = j;
  }

  for (let i = 1; i <= t.length; i++) {
    for (let j = 1; j <= s.length; j++) {
      arr[i][j] = Math.min(
        arr[i - 1][j] + 1, // deletion
        arr[i][j - 1] + 1, // insertion
        arr[i - 1][j - 1] + (s[j - 1] === t[i - 1] ? 0 : 1) // substitution
      );
    }
  }

  return arr[t.length][s.length];
}


/***/ }),
/* 295 */
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),
/* 296 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fs = __webpack_require__(142)
const path = __webpack_require__(143)
const os = __webpack_require__(4)
const crypto = __webpack_require__(128)
const packageJson = __webpack_require__(297)

const version = packageJson.version

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg

// Parse src into an Object
function parse (src) {
  const obj = {}

  // Convert buffer to string
  let lines = src.toString()

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n')

  let match
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1]

    // Default undefined or null to empty string
    let value = (match[2] || '')

    // Remove whitespace
    value = value.trim()

    // Check if double quoted
    const maybeQuote = value[0]

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2')

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n')
      value = value.replace(/\\r/g, '\r')
    }

    // Add to object
    obj[key] = value
  }

  return obj
}

function _parseVault (options) {
  const vaultPath = _vaultPath(options)

  // Parse .env.vault
  const result = DotenvModule.configDotenv({ path: vaultPath })
  if (!result.parsed) {
    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)
    err.code = 'MISSING_DATA'
    throw err
  }

  // handle scenario for comma separated keys - for use with key rotation
  // example: DOTENV_KEY="dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod"
  const keys = _dotenvKey(options).split(',')
  const length = keys.length

  let decrypted
  for (let i = 0; i < length; i++) {
    try {
      // Get full key
      const key = keys[i].trim()

      // Get instructions for decrypt
      const attrs = _instructions(result, key)

      // Decrypt
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)

      break
    } catch (error) {
      // last key
      if (i + 1 >= length) {
        throw error
      }
      // try next key
    }
  }

  // Parse decrypted .env string
  return DotenvModule.parse(decrypted)
}

function _warn (message) {
  console.log(`[dotenv@${version}][WARN] ${message}`)
}

function _debug (message) {
  console.log(`[dotenv@${version}][DEBUG] ${message}`)
}

function _dotenvKey (options) {
  // prioritize developer directly setting options.DOTENV_KEY
  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
    return options.DOTENV_KEY
  }

  // secondary infra already contains a DOTENV_KEY environment variable
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY
  }

  // fallback to empty string
  return ''
}

function _instructions (result, dotenvKey) {
  // Parse DOTENV_KEY. Format is a URI
  let uri
  try {
    uri = new URL(dotenvKey)
  } catch (error) {
    if (error.code === 'ERR_INVALID_URL') {
      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')
      err.code = 'INVALID_DOTENV_KEY'
      throw err
    }

    throw error
  }

  // Get decrypt key
  const key = uri.password
  if (!key) {
    const err = new Error('INVALID_DOTENV_KEY: Missing key part')
    err.code = 'INVALID_DOTENV_KEY'
    throw err
  }

  // Get environment
  const environment = uri.searchParams.get('environment')
  if (!environment) {
    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')
    err.code = 'INVALID_DOTENV_KEY'
    throw err
  }

  // Get ciphertext payload
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`
  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION
  if (!ciphertext) {
    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)
    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'
    throw err
  }

  return { ciphertext, key }
}

function _vaultPath (options) {
  let possibleVaultPath = null

  if (options && options.path && options.path.length > 0) {
    if (Array.isArray(options.path)) {
      for (const filepath of options.path) {
        if (fs.existsSync(filepath)) {
          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`
        }
      }
    } else {
      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`
    }
  } else {
    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')
  }

  if (fs.existsSync(possibleVaultPath)) {
    return possibleVaultPath
  }

  return null
}

function _resolveHome (envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath
}

function _configVault (options) {
  const debug = Boolean(options && options.debug)
  if (debug) {
    _debug('Loading env from encrypted .env.vault')
  }

  const parsed = DotenvModule._parseVault(options)

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsed, options)

  return { parsed }
}

function configDotenv (options) {
  const dotenvPath = path.resolve(process.cwd(), '.env')
  let encoding = 'utf8'
  const debug = Boolean(options && options.debug)

  if (options && options.encoding) {
    encoding = options.encoding
  } else {
    if (debug) {
      _debug('No encoding is specified. UTF-8 is used by default')
    }
  }

  let optionPaths = [dotenvPath] // default, look for .env
  if (options && options.path) {
    if (!Array.isArray(options.path)) {
      optionPaths = [_resolveHome(options.path)]
    } else {
      optionPaths = [] // reset default
      for (const filepath of options.path) {
        optionPaths.push(_resolveHome(filepath))
      }
    }
  }

  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final
  // parsed data, we will combine it with process.env (or options.processEnv if provided).
  let lastError
  const parsedAll = {}
  for (const path of optionPaths) {
    try {
      // Specifying an encoding returns a string instead of a buffer
      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))

      DotenvModule.populate(parsedAll, parsed, options)
    } catch (e) {
      if (debug) {
        _debug(`Failed to load ${path} ${e.message}`)
      }
      lastError = e
    }
  }

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsedAll, options)

  if (lastError) {
    return { parsed: parsedAll, error: lastError }
  } else {
    return { parsed: parsedAll }
  }
}

// Populates process.env from .env file
function config (options) {
  // fallback to original dotenv if DOTENV_KEY is not set
  if (_dotenvKey(options).length === 0) {
    return DotenvModule.configDotenv(options)
  }

  const vaultPath = _vaultPath(options)

  // dotenvKey exists but .env.vault file does not exist
  if (!vaultPath) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)

    return DotenvModule.configDotenv(options)
  }

  return DotenvModule._configVault(options)
}

function decrypt (encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), 'hex')
  let ciphertext = Buffer.from(encrypted, 'base64')

  const nonce = ciphertext.subarray(0, 12)
  const authTag = ciphertext.subarray(-16)
  ciphertext = ciphertext.subarray(12, -16)

  try {
    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)
    aesgcm.setAuthTag(authTag)
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`
  } catch (error) {
    const isRange = error instanceof RangeError
    const invalidKeyLength = error.message === 'Invalid key length'
    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'

    if (isRange || invalidKeyLength) {
      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')
      err.code = 'INVALID_DOTENV_KEY'
      throw err
    } else if (decryptionFailed) {
      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')
      err.code = 'DECRYPTION_FAILED'
      throw err
    } else {
      throw error
    }
  }
}

// Populate process.env with parsed values
function populate (processEnv, parsed, options = {}) {
  const debug = Boolean(options && options.debug)
  const override = Boolean(options && options.override)

  if (typeof parsed !== 'object') {
    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')
    err.code = 'OBJECT_REQUIRED'
    throw err
  }

  // Set process.env
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key]
      }

      if (debug) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`)
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`)
        }
      }
    } else {
      processEnv[key] = parsed[key]
    }
  }
}

const DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse,
  populate
}

module.exports.configDotenv = DotenvModule.configDotenv
module.exports._configVault = DotenvModule._configVault
module.exports._parseVault = DotenvModule._parseVault
module.exports.config = DotenvModule.config
module.exports.decrypt = DotenvModule.decrypt
module.exports.parse = DotenvModule.parse
module.exports.populate = DotenvModule.populate

module.exports = DotenvModule


/***/ }),
/* 297 */
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"dotenv","version":"16.5.0","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

/***/ }),
/* 298 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { replaceEnvs } = __webpack_require__(294);
const { JSONSchemaFaker } = __webpack_require__(299);
const { readFile } = __webpack_require__(5);
const parser = __webpack_require__(356);

JSONSchemaFaker.option({ requiredOnly: true });

/**
 * Dereferences an OpenAPI or Arazzo description
 *
 * @param {String} descriptionPath - The OpenAPI or Arazzo description to be dereferenced.
 * @returns {Promise<Object>} - The dereferenced OpenAPI or Arazzo description.
 */
async function loadDescription(descriptionPath = "") {
  // Error handling
  if (!descriptionPath) {
    throw new Error("Description is required.");
  }

  // Load the definition from the URL or local file path
  const definition = await readFile({ fileURLOrPath: descriptionPath });

  // Dereference the definition
  const dereferencedDefinition = await parser.dereference(definition);

  return dereferencedDefinition;
}

/**
 * Retrieves the operation details from an OpenAPI definition based on the provided operationId.
 *
 * @param {Object} [definition={}] - The OpenAPI definition object.
 * @param {string} [operationId=""] - The unique identifier for the operation.
 * @param {string} [responseCode=""] - The HTTP response code to filter the operation.
 * @param {string} [exampleKey=""] - The key for the example to be compiled.
 * @param {string} [server=""] - The server URL to use for examples.
 * @throws {Error} Will throw an error if the definition or operationId is not provided.
 * @returns {Object|null} Returns an object containing the operation details, schemas, and example if found; otherwise, returns null.
 */
function getOperation(
  definition = {},
  operationId = "",
  responseCode = "",
  exampleKey = "",
  server = ""
) {
  // Error handling
  if (!definition) {
    throw new Error("OpenAPI definition is required.");
  }
  if (!operationId) {
    throw new Error("OperationId is required.");
  }
  // Search for the operationId in the OpenAPI definition
  for (const path in definition.paths) {
    for (const method in definition.paths[path]) {
      if (definition.paths[path][method].operationId === operationId) {
        const operation = definition.paths[path][method];
        if (!server) {
          if (definition.servers && definition.servers.length > 0) {
            server = definition.servers[0].url;
          } else {
            throw new Error(
              "No server URL provided and no servers defined in the OpenAPI definition."
            );
          }
        }
        const example = compileExample(
          operation,
          server + path,
          responseCode,
          exampleKey
        );
        const schemas = getSchemas(operation, responseCode);
        return { path, method, definition: operation, schemas, example };
      }
    }
  }
  return null;
}

function getSchemas(definition = {}, responseCode = "") {
  const schemas = {};

  // Get request schema for operation
  if (definition.requestBody) {
    schemas.request =
      definition.requestBody.content[
        Object.keys(definition.requestBody.content)[0]
      ].schema;
  }
  if (!responseCode) {
    if (definition.responses && Object.keys(definition.responses).length > 0) {
      responseCode = Object.keys(definition.responses)[0];
    } else {
      throw new Error("No responses defined for the operation.");
    }
  }
  schemas.response =
    definition.responses[responseCode].content[
      Object.keys(definition.responses[responseCode].content)[0]
    ].schema;

  return schemas;
}

/**
 * Compiles an example object based on the provided operation, path, and example key.
 *
 * @param {Object} operation - The operation object.
 * @param {string} path - The path string.
 * @param {string} exampleKey - The example key string.
 * @returns {Object} - The compiled example object.
 * @throws {Error} - If operation or path is not provided.
 */
function compileExample(
  operation = {},
  path = "",
  responseCode = "",
  exampleKey = ""
) {
  // Error handling
  if (!operation) {
    throw new Error("Operation is required.");
  }
  if (!path) {
    throw new Error("Path is required.");
  }

  // Setup
  let example = {
    url: path,
    request: { parameters: {}, headers: {}, body: {} },
    response: { headers: {}, body: {} },
  };

  // Path parameters
  const pathParameters = getExampleParameters(operation, "path", exampleKey);
  pathParameters.forEach((param) => {
    example.url = example.url.replace(`{${param.key}}`, param.value);
  });

  // Query parameters
  const queryParameters = getExampleParameters(operation, "query", exampleKey);
  queryParameters.forEach((param) => {
    example.request.parameters[param.key] = param.value;
  });

  // Headers
  const headerParameters = getExampleParameters(
    operation,
    "header",
    exampleKey
  );
  headerParameters.forEach((param) => {
    example.request.headers[param.key] = param.value;
  });

  // Request body
  if (operation.requestBody) {
    const requestBody = getExample(operation.requestBody, exampleKey);
    if (typeof requestBody != "undefined") {
      example.request.body = requestBody;
    }
  }

  // Response
  if (!responseCode) {
    responseCode = Object.keys(operation.responses)[0];
  }
  const response = operation.responses[responseCode];

  // Response headers
  if (response.headers) {
    for (const header in response.headers) {
      const headerExample = getExample(response.headers[header], exampleKey);
      if (typeof headerExample != "undefined")
        example.response.headers[header] = headerExample;
    }
  }

  // Response body
  if (response.content) {
    for (const key in response.content) {
      const responseBody = getExample(response.content[key], exampleKey);
      if (typeof responseBody != "undefined") {
        example.response.body = responseBody;
      }
    }
  }

  // Load environment variables
  example = replaceEnvs(example);
  // console.log(JSON.stringify(example, null, 2));
  return example;
}

// Return array of query parameters for the example
/**
 * Retrieves example parameters based on the given operation, type, and example key.
 *
 * @param {object} operation - The operation object.
 * @param {string} [type=""] - The type of parameter to retrieve.
 * @param {string} [exampleKey=""] - The example key to use.
 * @returns {Array} - An array of example parameters.
 * @throws {Error} - If the operation is not provided.
 */
function getExampleParameters(operation = {}, type = "", exampleKey = "") {
  const params = [];

  // Error handling
  if (!operation) {
    throw new Error("Operation is required.");
  }
  if (!operation.parameters) return params;

  // Find all query parameters
  for (const parameter of operation.parameters) {
    if (parameter.in === type) {
      const value = getExample(parameter, exampleKey);
      if (value) {
        params.push({ key: parameter.name, value });
      }
    }
  }

  return params;
}

/**
 * Retrieves an example value based on the given definition and example key.
 *
 * @param {object} definition - The definition object.
 * @param {string} exampleKey - The key of the example to retrieve.
 * @returns {object|null} - The example value.
 * @throws {Error} - If the definition is not provided.
 */
function getExample(
  definition = {},
  exampleKey = "",
  generateFromSchema = null
) {
  // Debug
  // console.log({definition, exampleKey});

  // Setup
  let example;

  // Error handling
  if (!definition) {
    throw new Error("Definition is required.");
  }

  // If there are no examples in the definition, generate example based on definition schema
  if (generateFromSchema == null) {
    const hasExamples = checkForExamples(definition, exampleKey);
    generateFromSchema =
      !hasExamples &&
      (definition.required || definition?.schema?.required || !exampleKey);
  }

  if (generateFromSchema && definition.type) {
    try {
      example = JSONSchemaFaker.generate(definition);
      if (example) return example;
    } catch (error) {
      console.warn(`Error generating example: ${error}`);
    }
  }

  if (
    definition.examples &&
    typeof exampleKey !== "undefined" &&
    exampleKey !== "" &&
    typeof definition.examples[exampleKey] !== "undefined" &&
    typeof definition.examples[exampleKey].value !== "undefined"
  ) {
    // If the definition has an `examples` property, exampleKey is specified, and the exampleKey exists in the examples object, use that example.
    example = definition.examples[exampleKey].value;
  } else if (typeof definition.example !== "undefined") {
    // If the definition has an `example` property, use that example.
    example = definition.example;
  } else {
    // If the definition has no examples, generate an example based on the definition/properties.
    // Find the next `schema` child property in the definition, regardless of depth
    let schema;
    if (definition.schema) {
      // Parameter pattern
      schema = definition.schema;
    } else if (definition.properties) {
      // Object pattern
      schema = definition;
    } else if (definition.items) {
      // Array pattern
      schema = definition;
    } else if (definition.content) {
      // Request/response body pattern
      for (const key in definition.content) {
        if (definition.content[key]) {
          schema = definition.content[key];
          break;
        }
      }
    } else {
      return null;
    }

    if (schema.type === "object") {
      example = generateObjectExample(schema, exampleKey, generateFromSchema);
    } else if (schema.type === "array") {
      example = generateArrayExample(
        schema.items,
        exampleKey,
        generateFromSchema
      );
    } else {
      example = getExample(schema, exampleKey, generateFromSchema);
    }
  }

  // console.log(example);
  return example;
}

/**
 * Generates an object example based on the provided schema and example key.
 *
 * @param {object} schema - The schema object.
 * @param {string} exampleKey - The example key.
 * @returns {object} - The generated object example.
 */
function generateObjectExample(
  schema = {},
  exampleKey = "",
  generateFromSchema = null
) {
  const example = {};
  for (const property in schema.properties) {
    const objectExample = getExample(
      schema.properties[property],
      exampleKey,
      generateFromSchema
    );
    if (objectExample) example[property] = objectExample;
  }
  return example;
}

/**
 * Generates an array example based on the provided items and example key.
 *
 * @param {Object} items - The items object.
 * @param {string} exampleKey - The example key.
 * @returns {Array} - The generated array example.
 */
function generateArrayExample(
  items = {},
  exampleKey = "",
  generateFromSchema = null
) {
  // Debug
  // console.log({ items, exampleKey });

  const example = [];
  const itemExample = getExample(items, exampleKey, generateFromSchema);
  if (itemExample) example.push(itemExample);

  // Debug
  // console.log(example);
  return example;
}

/**
 * Checks if the provided definition object contains any examples.
 *
 * @param {Object} [definition={}] - The object to traverse for examples.
 * @param {string} [exampleKey=""] - The specific key to look for in the examples.
 * @returns {boolean} - Returns true if examples are found, otherwise false.
 */
function checkForExamples(definition = {}, exampleKey = "") {
  const examples = [];

  function traverse(obj) {
    if (typeof obj !== "object" || obj === null) return;

    if (obj.hasOwnProperty("example")) {
      examples.push(obj.example);
    }
    if (
      exampleKey &&
      Object.hasOwn(obj, "examples") &&
      Object.hasOwn(obj.examples, exampleKey) &&
      Object.hasOwn(obj.examples[exampleKey], "value")
    ) {
      examples.push(obj.examples[exampleKey].value);
    }

    for (const key in obj) {
      traverse(obj[key]);
    }
  }

  traverse(definition);
  if (examples.length) return true;
  return false;
}

module.exports = { getOperation, loadDescription };


/***/ }),
/* 299 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lib/vendor.mjs
var DEPENDENCIES, getDependencies, setDependencies;
var init_vendor = __esm({
  "src/lib/vendor.mjs"() {
    DEPENDENCIES = {};
    getDependencies = () => {
      return DEPENDENCIES;
    };
    setDependencies = (value) => {
      Object.assign(DEPENDENCIES, value);
    };
  }
});

// src/lib/class/Registry.mjs
var Registry, Registry_default;
var init_Registry = __esm({
  "src/lib/class/Registry.mjs"() {
    Registry = class {
      constructor() {
        this.data = {};
      }
      /**
       * Unregisters custom format(s)
       * @param name
       */
      unregister(name) {
        if (!name) {
          this.data = {};
        } else {
          delete this.data[name];
        }
      }
      /**
       * Registers custom format
       */
      register(name, callback) {
        this.data[name] = callback;
      }
      /**
       * Register many formats at one shot
       */
      registerMany(formats) {
        Object.keys(formats).forEach((name) => {
          this.data[name] = formats[name];
        });
      }
      /**
       * Returns element by registry key
       */
      get(name) {
        const format = this.data[name];
        return format;
      }
      /**
       * Returns the whole registry content
       */
      list() {
        return this.data;
      }
    };
    Registry_default = Registry;
  }
});

// src/lib/api/defaults.mjs
var defaults, defaults_default;
var init_defaults = __esm({
  "src/lib/api/defaults.mjs"() {
    defaults = {};
    defaults_default = defaults;
    defaults.defaultInvalidTypeProduct = void 0;
    defaults.defaultRandExpMax = 10;
    defaults.maxRegexRetry = 100;
    defaults.pruneProperties = [];
    defaults.ignoreProperties = [];
    defaults.ignoreMissingRefs = false;
    defaults.failOnInvalidTypes = true;
    defaults.failOnInvalidFormat = true;
    defaults.alwaysFakeOptionals = false;
    defaults.optionalsProbability = null;
    defaults.fixedProbabilities = false;
    defaults.useExamplesValue = false;
    defaults.useDefaultValue = false;
    defaults.requiredOnly = false;
    defaults.omitNulls = false;
    defaults.minItems = 0;
    defaults.maxItems = null;
    defaults.minLength = 0;
    defaults.maxLength = null;
    defaults.resolveJsonPath = false;
    defaults.reuseProperties = false;
    defaults.fillProperties = true;
    defaults.sortProperties = false;
    defaults.replaceEmptyByRandomValue = false;
    defaults.random = Math.random;
    defaults.minDateTime = /* @__PURE__ */ new Date("1889-12-31T00:00:00.000Z");
    defaults.maxDateTime = /* @__PURE__ */ new Date("1970-01-01T00:00:01.000Z");
    defaults.renderTitle = true;
    defaults.renderDescription = true;
    defaults.renderComment = false;
  }
});

// src/lib/class/OptionRegistry.mjs
var OptionRegistry, OptionRegistry_default;
var init_OptionRegistry = __esm({
  "src/lib/class/OptionRegistry.mjs"() {
    init_Registry();
    init_defaults();
    OptionRegistry = class extends Registry_default {
      constructor() {
        super();
        this.data = { ...defaults_default };
        this._defaults = defaults_default;
      }
      get defaults() {
        return { ...this._defaults };
      }
    };
    OptionRegistry_default = OptionRegistry;
  }
});

// src/lib/api/option.mjs
function optionAPI(nameOrOptionMap, optionalValue) {
  if (typeof nameOrOptionMap === "string") {
    if (typeof optionalValue !== "undefined") {
      return registry.register(nameOrOptionMap, optionalValue);
    }
    return registry.get(nameOrOptionMap);
  }
  return registry.registerMany(nameOrOptionMap);
}
var registry, option_default;
var init_option = __esm({
  "src/lib/api/option.mjs"() {
    init_OptionRegistry();
    registry = new OptionRegistry_default();
    optionAPI.getDefaults = () => registry.defaults;
    option_default = optionAPI;
  }
});

// src/lib/core/constants.mjs
var ALLOWED_TYPES, SCALAR_TYPES, ALL_TYPES, MOST_NEAR_DATETIME, MIN_INTEGER, MAX_INTEGER, MIN_NUMBER, MAX_NUMBER, constants_default;
var init_constants = __esm({
  "src/lib/core/constants.mjs"() {
    ALLOWED_TYPES = ["integer", "number", "string", "boolean"];
    SCALAR_TYPES = ALLOWED_TYPES.concat(["null"]);
    ALL_TYPES = ["array", "object"].concat(SCALAR_TYPES);
    MOST_NEAR_DATETIME = 2524608e6;
    MIN_INTEGER = -1e8;
    MAX_INTEGER = 1e8;
    MIN_NUMBER = -100;
    MAX_NUMBER = 100;
    constants_default = {
      ALLOWED_TYPES,
      SCALAR_TYPES,
      ALL_TYPES,
      MIN_NUMBER,
      MAX_NUMBER,
      MIN_INTEGER,
      MAX_INTEGER,
      MOST_NEAR_DATETIME
    };
  }
});

// node_modules/ret/lib/types.js
var require_types = __commonJS({
  "node_modules/ret/lib/types.js"(exports2, module2) {
    module2.exports = {
      ROOT: 0,
      GROUP: 1,
      POSITION: 2,
      SET: 3,
      RANGE: 4,
      REPETITION: 5,
      REFERENCE: 6,
      CHAR: 7
    };
  }
});

// node_modules/ret/lib/sets.js
var require_sets = __commonJS({
  "node_modules/ret/lib/sets.js"(exports2) {
    var types2 = require_types();
    var INTS = () => [{ type: types2.RANGE, from: 48, to: 57 }];
    var WORDS = () => {
      return [
        { type: types2.CHAR, value: 95 },
        { type: types2.RANGE, from: 97, to: 122 },
        { type: types2.RANGE, from: 65, to: 90 }
      ].concat(INTS());
    };
    var WHITESPACE = () => {
      return [
        { type: types2.CHAR, value: 9 },
        { type: types2.CHAR, value: 10 },
        { type: types2.CHAR, value: 11 },
        { type: types2.CHAR, value: 12 },
        { type: types2.CHAR, value: 13 },
        { type: types2.CHAR, value: 32 },
        { type: types2.CHAR, value: 160 },
        { type: types2.CHAR, value: 5760 },
        { type: types2.RANGE, from: 8192, to: 8202 },
        { type: types2.CHAR, value: 8232 },
        { type: types2.CHAR, value: 8233 },
        { type: types2.CHAR, value: 8239 },
        { type: types2.CHAR, value: 8287 },
        { type: types2.CHAR, value: 12288 },
        { type: types2.CHAR, value: 65279 }
      ];
    };
    var NOTANYCHAR = () => {
      return [
        { type: types2.CHAR, value: 10 },
        { type: types2.CHAR, value: 13 },
        { type: types2.CHAR, value: 8232 },
        { type: types2.CHAR, value: 8233 }
      ];
    };
    exports2.words = () => ({ type: types2.SET, set: WORDS(), not: false });
    exports2.notWords = () => ({ type: types2.SET, set: WORDS(), not: true });
    exports2.ints = () => ({ type: types2.SET, set: INTS(), not: false });
    exports2.notInts = () => ({ type: types2.SET, set: INTS(), not: true });
    exports2.whitespace = () => ({ type: types2.SET, set: WHITESPACE(), not: false });
    exports2.notWhitespace = () => ({ type: types2.SET, set: WHITESPACE(), not: true });
    exports2.anyChar = () => ({ type: types2.SET, set: NOTANYCHAR(), not: true });
  }
});

// node_modules/ret/lib/util.js
var require_util = __commonJS({
  "node_modules/ret/lib/util.js"(exports2) {
    var types2 = require_types();
    var sets = require_sets();
    var CTRL = "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?";
    var SLSH = { "0": 0, "t": 9, "n": 10, "v": 11, "f": 12, "r": 13 };
    exports2.strToChars = function(str) {
      var chars_regex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;
      str = str.replace(chars_regex, function(s, b, lbs, a16, b16, c8, dctrl, eslsh) {
        if (lbs) {
          return s;
        }
        var code = b ? 8 : a16 ? parseInt(a16, 16) : b16 ? parseInt(b16, 16) : c8 ? parseInt(c8, 8) : dctrl ? CTRL.indexOf(dctrl) : SLSH[eslsh];
        var c = String.fromCharCode(code);
        if (/[[\]{}^$.|?*+()]/.test(c)) {
          c = "\\" + c;
        }
        return c;
      });
      return str;
    };
    exports2.tokenizeClass = (str, regexpStr) => {
      var tokens = [];
      var regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?([^])/g;
      var rs, c;
      while ((rs = regexp.exec(str)) != null) {
        if (rs[1]) {
          tokens.push(sets.words());
        } else if (rs[2]) {
          tokens.push(sets.ints());
        } else if (rs[3]) {
          tokens.push(sets.whitespace());
        } else if (rs[4]) {
          tokens.push(sets.notWords());
        } else if (rs[5]) {
          tokens.push(sets.notInts());
        } else if (rs[6]) {
          tokens.push(sets.notWhitespace());
        } else if (rs[7]) {
          tokens.push({
            type: types2.RANGE,
            from: (rs[8] || rs[9]).charCodeAt(0),
            to: rs[10].charCodeAt(0)
          });
        } else if (c = rs[12]) {
          tokens.push({
            type: types2.CHAR,
            value: c.charCodeAt(0)
          });
        } else {
          return [tokens, regexp.lastIndex];
        }
      }
      exports2.error(regexpStr, "Unterminated character class");
    };
    exports2.error = (regexp, msg) => {
      throw new SyntaxError("Invalid regular expression: /" + regexp + "/: " + msg);
    };
  }
});

// node_modules/ret/lib/positions.js
var require_positions = __commonJS({
  "node_modules/ret/lib/positions.js"(exports2) {
    var types2 = require_types();
    exports2.wordBoundary = () => ({ type: types2.POSITION, value: "b" });
    exports2.nonWordBoundary = () => ({ type: types2.POSITION, value: "B" });
    exports2.begin = () => ({ type: types2.POSITION, value: "^" });
    exports2.end = () => ({ type: types2.POSITION, value: "$" });
  }
});

// node_modules/ret/lib/index.js
var require_lib = __commonJS({
  "node_modules/ret/lib/index.js"(exports2, module2) {
    var util = require_util();
    var types2 = require_types();
    var sets = require_sets();
    var positions = require_positions();
    module2.exports = (regexpStr) => {
      var i = 0, l, c, start = { type: types2.ROOT, stack: [] }, lastGroup = start, last = start.stack, groupStack = [];
      var repeatErr = (i2) => {
        util.error(regexpStr, `Nothing to repeat at column ${i2 - 1}`);
      };
      var str = util.strToChars(regexpStr);
      l = str.length;
      while (i < l) {
        c = str[i++];
        switch (c) {
          case "\\":
            c = str[i++];
            switch (c) {
              case "b":
                last.push(positions.wordBoundary());
                break;
              case "B":
                last.push(positions.nonWordBoundary());
                break;
              case "w":
                last.push(sets.words());
                break;
              case "W":
                last.push(sets.notWords());
                break;
              case "d":
                last.push(sets.ints());
                break;
              case "D":
                last.push(sets.notInts());
                break;
              case "s":
                last.push(sets.whitespace());
                break;
              case "S":
                last.push(sets.notWhitespace());
                break;
              default:
                if (/\d/.test(c)) {
                  last.push({ type: types2.REFERENCE, value: parseInt(c, 10) });
                } else {
                  last.push({ type: types2.CHAR, value: c.charCodeAt(0) });
                }
            }
            break;
          case "^":
            last.push(positions.begin());
            break;
          case "$":
            last.push(positions.end());
            break;
          case "[":
            var not;
            if (str[i] === "^") {
              not = true;
              i++;
            } else {
              not = false;
            }
            var classTokens = util.tokenizeClass(str.slice(i), regexpStr);
            i += classTokens[1];
            last.push({
              type: types2.SET,
              set: classTokens[0],
              not
            });
            break;
          case ".":
            last.push(sets.anyChar());
            break;
          case "(":
            var group = {
              type: types2.GROUP,
              stack: [],
              remember: true
            };
            c = str[i];
            if (c === "?") {
              c = str[i + 1];
              i += 2;
              if (c === "=") {
                group.followedBy = true;
              } else if (c === "!") {
                group.notFollowedBy = true;
              } else if (c !== ":") {
                util.error(
                  regexpStr,
                  `Invalid group, character '${c}' after '?' at column ${i - 1}`
                );
              }
              group.remember = false;
            }
            last.push(group);
            groupStack.push(lastGroup);
            lastGroup = group;
            last = group.stack;
            break;
          case ")":
            if (groupStack.length === 0) {
              util.error(regexpStr, `Unmatched ) at column ${i - 1}`);
            }
            lastGroup = groupStack.pop();
            last = lastGroup.options ? lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
            break;
          case "|":
            if (!lastGroup.options) {
              lastGroup.options = [lastGroup.stack];
              delete lastGroup.stack;
            }
            var stack = [];
            lastGroup.options.push(stack);
            last = stack;
            break;
          case "{":
            var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)), min, max;
            if (rs !== null) {
              if (last.length === 0) {
                repeatErr(i);
              }
              min = parseInt(rs[1], 10);
              max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
              i += rs[0].length;
              last.push({
                type: types2.REPETITION,
                min,
                max,
                value: last.pop()
              });
            } else {
              last.push({
                type: types2.CHAR,
                value: 123
              });
            }
            break;
          case "?":
            if (last.length === 0) {
              repeatErr(i);
            }
            last.push({
              type: types2.REPETITION,
              min: 0,
              max: 1,
              value: last.pop()
            });
            break;
          case "+":
            if (last.length === 0) {
              repeatErr(i);
            }
            last.push({
              type: types2.REPETITION,
              min: 1,
              max: Infinity,
              value: last.pop()
            });
            break;
          case "*":
            if (last.length === 0) {
              repeatErr(i);
            }
            last.push({
              type: types2.REPETITION,
              min: 0,
              max: Infinity,
              value: last.pop()
            });
            break;
          default:
            last.push({
              type: types2.CHAR,
              value: c.charCodeAt(0)
            });
        }
      }
      if (groupStack.length !== 0) {
        util.error(regexpStr, "Unterminated group");
      }
      return start;
    };
    module2.exports.types = types2;
  }
});

// node_modules/drange/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/drange/lib/index.js"(exports2, module2) {
    "use strict";
    var SubRange = class _SubRange {
      constructor(low, high) {
        this.low = low;
        this.high = high;
        this.length = 1 + high - low;
      }
      overlaps(range) {
        return !(this.high < range.low || this.low > range.high);
      }
      touches(range) {
        return !(this.high + 1 < range.low || this.low - 1 > range.high);
      }
      // Returns inclusive combination of SubRanges as a SubRange.
      add(range) {
        return new _SubRange(
          Math.min(this.low, range.low),
          Math.max(this.high, range.high)
        );
      }
      // Returns subtraction of SubRanges as an array of SubRanges.
      // (There's a case where subtraction divides it in 2)
      subtract(range) {
        if (range.low <= this.low && range.high >= this.high) {
          return [];
        } else if (range.low > this.low && range.high < this.high) {
          return [
            new _SubRange(this.low, range.low - 1),
            new _SubRange(range.high + 1, this.high)
          ];
        } else if (range.low <= this.low) {
          return [new _SubRange(range.high + 1, this.high)];
        } else {
          return [new _SubRange(this.low, range.low - 1)];
        }
      }
      toString() {
        return this.low == this.high ? this.low.toString() : this.low + "-" + this.high;
      }
    };
    var DRange = class _DRange {
      constructor(a, b) {
        this.ranges = [];
        this.length = 0;
        if (a != null)
          this.add(a, b);
      }
      _update_length() {
        this.length = this.ranges.reduce((previous, range) => {
          return previous + range.length;
        }, 0);
      }
      add(a, b) {
        var _add = (subrange) => {
          var i = 0;
          while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {
            i++;
          }
          var newRanges = this.ranges.slice(0, i);
          while (i < this.ranges.length && subrange.touches(this.ranges[i])) {
            subrange = subrange.add(this.ranges[i]);
            i++;
          }
          newRanges.push(subrange);
          this.ranges = newRanges.concat(this.ranges.slice(i));
          this._update_length();
        };
        if (a instanceof _DRange) {
          a.ranges.forEach(_add);
        } else {
          if (b == null)
            b = a;
          _add(new SubRange(a, b));
        }
        return this;
      }
      subtract(a, b) {
        var _subtract = (subrange) => {
          var i = 0;
          while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {
            i++;
          }
          var newRanges = this.ranges.slice(0, i);
          while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {
            newRanges = newRanges.concat(this.ranges[i].subtract(subrange));
            i++;
          }
          this.ranges = newRanges.concat(this.ranges.slice(i));
          this._update_length();
        };
        if (a instanceof _DRange) {
          a.ranges.forEach(_subtract);
        } else {
          if (b == null)
            b = a;
          _subtract(new SubRange(a, b));
        }
        return this;
      }
      intersect(a, b) {
        var newRanges = [];
        var _intersect = (subrange) => {
          var i = 0;
          while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {
            i++;
          }
          while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {
            var low = Math.max(this.ranges[i].low, subrange.low);
            var high = Math.min(this.ranges[i].high, subrange.high);
            newRanges.push(new SubRange(low, high));
            i++;
          }
        };
        if (a instanceof _DRange) {
          a.ranges.forEach(_intersect);
        } else {
          if (b == null)
            b = a;
          _intersect(new SubRange(a, b));
        }
        this.ranges = newRanges;
        this._update_length();
        return this;
      }
      index(index) {
        var i = 0;
        while (i < this.ranges.length && this.ranges[i].length <= index) {
          index -= this.ranges[i].length;
          i++;
        }
        return this.ranges[i].low + index;
      }
      toString() {
        return "[ " + this.ranges.join(", ") + " ]";
      }
      clone() {
        return new _DRange(this);
      }
      numbers() {
        return this.ranges.reduce((result, subrange) => {
          var i = subrange.low;
          while (i <= subrange.high) {
            result.push(i);
            i++;
          }
          return result;
        }, []);
      }
      subranges() {
        return this.ranges.map((subrange) => ({
          low: subrange.low,
          high: subrange.high,
          length: 1 + subrange.high - subrange.low
        }));
      }
    };
    module2.exports = DRange;
  }
});

// node_modules/randexp/lib/randexp.js
var require_randexp = __commonJS({
  "node_modules/randexp/lib/randexp.js"(exports2, module2) {
    var ret = require_lib();
    var DRange = require_lib2();
    var types2 = ret.types;
    module2.exports = class RandExp2 {
      /**
       * @constructor
       * @param {RegExp|String} regexp
       * @param {String} m
       */
      constructor(regexp, m) {
        this._setDefaults(regexp);
        if (regexp instanceof RegExp) {
          this.ignoreCase = regexp.ignoreCase;
          this.multiline = regexp.multiline;
          regexp = regexp.source;
        } else if (typeof regexp === "string") {
          this.ignoreCase = m && m.indexOf("i") !== -1;
          this.multiline = m && m.indexOf("m") !== -1;
        } else {
          throw new Error("Expected a regexp or string");
        }
        this.tokens = ret(regexp);
      }
      /**
       * Checks if some custom properties have been set for this regexp.
       *
       * @param {RandExp} randexp
       * @param {RegExp} regexp
       */
      _setDefaults(regexp) {
        this.max = regexp.max != null ? regexp.max : RandExp2.prototype.max != null ? RandExp2.prototype.max : 100;
        this.defaultRange = regexp.defaultRange ? regexp.defaultRange : this.defaultRange.clone();
        if (regexp.randInt) {
          this.randInt = regexp.randInt;
        }
      }
      /**
       * Generates the random string.
       *
       * @return {String}
       */
      gen() {
        return this._gen(this.tokens, []);
      }
      /**
       * Generate random string modeled after given tokens.
       *
       * @param {Object} token
       * @param {Array.<String>} groups
       * @return {String}
       */
      _gen(token, groups) {
        var stack, str, n, i, l;
        switch (token.type) {
          case types2.ROOT:
          case types2.GROUP:
            if (token.followedBy || token.notFollowedBy) {
              return "";
            }
            if (token.remember && token.groupNumber === void 0) {
              token.groupNumber = groups.push(null) - 1;
            }
            stack = token.options ? this._randSelect(token.options) : token.stack;
            str = "";
            for (i = 0, l = stack.length; i < l; i++) {
              str += this._gen(stack[i], groups);
            }
            if (token.remember) {
              groups[token.groupNumber] = str;
            }
            return str;
          case types2.POSITION:
            return "";
          case types2.SET:
            var expandedSet = this._expand(token);
            if (!expandedSet.length) {
              return "";
            }
            return String.fromCharCode(this._randSelect(expandedSet));
          case types2.REPETITION:
            n = this.randInt(
              token.min,
              token.max === Infinity ? token.min + this.max : token.max
            );
            str = "";
            for (i = 0; i < n; i++) {
              str += this._gen(token.value, groups);
            }
            return str;
          case types2.REFERENCE:
            return groups[token.value - 1] || "";
          case types2.CHAR:
            var code = this.ignoreCase && this._randBool() ? this._toOtherCase(token.value) : token.value;
            return String.fromCharCode(code);
        }
      }
      /**
       * If code is alphabetic, converts to other case.
       * If not alphabetic, returns back code.
       *
       * @param {Number} code
       * @return {Number}
       */
      _toOtherCase(code) {
        return code + (97 <= code && code <= 122 ? -32 : 65 <= code && code <= 90 ? 32 : 0);
      }
      /**
       * Randomly returns a true or false value.
       *
       * @return {Boolean}
       */
      _randBool() {
        return !this.randInt(0, 1);
      }
      /**
       * Randomly selects and returns a value from the array.
       *
       * @param {Array.<Object>} arr
       * @return {Object}
       */
      _randSelect(arr) {
        if (arr instanceof DRange) {
          return arr.index(this.randInt(0, arr.length - 1));
        }
        return arr[this.randInt(0, arr.length - 1)];
      }
      /**
       * expands a token to a DiscontinuousRange of characters which has a
       * length and an index function (for random selecting)
       *
       * @param {Object} token
       * @return {DiscontinuousRange}
       */
      _expand(token) {
        if (token.type === ret.types.CHAR) {
          return new DRange(token.value);
        } else if (token.type === ret.types.RANGE) {
          return new DRange(token.from, token.to);
        } else {
          let drange = new DRange();
          for (let i = 0; i < token.set.length; i++) {
            let subrange = this._expand(token.set[i]);
            drange.add(subrange);
            if (this.ignoreCase) {
              for (let j = 0; j < subrange.length; j++) {
                let code = subrange.index(j);
                let otherCaseCode = this._toOtherCase(code);
                if (code !== otherCaseCode) {
                  drange.add(otherCaseCode);
                }
              }
            }
          }
          if (token.not) {
            return this.defaultRange.clone().subtract(drange);
          } else {
            return this.defaultRange.clone().intersect(drange);
          }
        }
      }
      /**
       * Randomly generates and returns a number between a and b (inclusive).
       *
       * @param {Number} a
       * @param {Number} b
       * @return {Number}
       */
      randInt(a, b) {
        return a + Math.floor(Math.random() * (1 + b - a));
      }
      /**
       * Default range of characters to generate from.
       */
      get defaultRange() {
        return this._range = this._range || new DRange(32, 126);
      }
      set defaultRange(range) {
        this._range = range;
      }
      /**
       *
       * Enables use of randexp with a shorter call.
       *
       * @param {RegExp|String| regexp}
       * @param {String} m
       * @return {String}
       */
      static randexp(regexp, m) {
        var randexp;
        if (typeof regexp === "string") {
          regexp = new RegExp(regexp, m);
        }
        if (regexp._randexp === void 0) {
          randexp = new RandExp2(regexp, m);
          regexp._randexp = randexp;
        } else {
          randexp = regexp._randexp;
          randexp._setDefaults(regexp);
        }
        return randexp.gen();
      }
      /**
       * Enables sugary /regexp/.gen syntax.
       */
      static sugar() {
        RegExp.prototype.gen = function() {
          return RandExp2.randexp(this);
        };
      }
    };
  }
});

// src/lib/core/random.mjs
function getRandomInteger(min, max) {
  min = typeof min === "undefined" ? constants_default.MIN_INTEGER : min;
  max = typeof max === "undefined" ? constants_default.MAX_INTEGER : max;
  return Math.floor(option_default("random")() * (max - min + 1)) + min;
}
function _randexp(value) {
  import_randexp.default.prototype.max = option_default("defaultRandExpMax");
  import_randexp.default.prototype.randInt = (a, b) => a + Math.floor(option_default("random")() * (1 + (b - a)));
  const re = new import_randexp.default(value);
  return re.gen();
}
function pick(collection) {
  return collection[Math.floor(option_default("random")() * collection.length)];
}
function shuffle(collection) {
  let tmp;
  let key;
  let length = collection.length;
  const copy = collection.slice();
  for (; length > 0; ) {
    key = Math.floor(option_default("random")() * length);
    length -= 1;
    tmp = copy[length];
    copy[length] = copy[key];
    copy[key] = tmp;
  }
  return copy;
}
function getRandom(min, max) {
  return option_default("random")() * (max - min) + min;
}
function number(min, max, defMin, defMax, hasPrecision = false) {
  defMin = typeof defMin === "undefined" ? constants_default.MIN_NUMBER : defMin;
  defMax = typeof defMax === "undefined" ? constants_default.MAX_NUMBER : defMax;
  min = typeof min === "undefined" ? defMin : min;
  max = typeof max === "undefined" ? defMax : max;
  if (max < min) {
    max += min;
  }
  if (hasPrecision) {
    return getRandom(min, max);
  }
  return getRandomInteger(min, max);
}
function by(type) {
  switch (type) {
    case "seconds":
      return number(0, 60) * 60;
    case "minutes":
      return number(15, 50) * 612;
    case "hours":
      return number(12, 72) * 36123;
    case "days":
      return number(7, 30) * 86412345;
    case "weeks":
      return number(4, 52) * 604812345;
    case "months":
      return number(2, 13) * 2592012345;
    case "years":
      return number(1, 20) * 31104012345;
    default:
      break;
  }
}
function date(step) {
  if (step) {
    return by(step);
  }
  let earliest = option_default("minDateTime");
  let latest = option_default("maxDateTime");
  if (typeof earliest === "string") {
    earliest = new Date(earliest);
  }
  if (typeof latest === "string") {
    latest = new Date(latest);
  }
  const now = (/* @__PURE__ */ new Date()).getTime();
  if (typeof earliest === "number") {
    earliest = new Date(now + earliest);
  }
  if (typeof latest === "number") {
    latest = new Date(now + latest);
  }
  return new Date(getRandom(earliest.getTime(), latest.getTime()));
}
var import_randexp, random_default;
var init_random = __esm({
  "src/lib/core/random.mjs"() {
    import_randexp = __toESM(require_randexp(), 1);
    init_option();
    init_constants();
    random_default = {
      pick,
      date,
      shuffle,
      number,
      randexp: _randexp
    };
  }
});

// src/lib/core/utils.mjs
function getLocalRef(obj, path, refs) {
  path = decodeURIComponent(path);
  if (refs && refs[path])
    return clone(refs[path]);
  const keyElements = path.replace("#/", "/").split("/");
  let schema = obj.$ref && refs && refs[obj.$ref] || obj;
  if (!schema && !keyElements[0]) {
    keyElements[0] = obj.$ref.split("#/")[0];
  }
  if (refs && path.includes("#/") && refs[keyElements[0]]) {
    schema = refs[keyElements.shift()];
  }
  if (!keyElements[0])
    keyElements.shift();
  while (schema && keyElements.length > 0) {
    const prop = keyElements.shift();
    if (!schema[prop]) {
      throw new Error(`Prop not found: ${prop} (${path})`);
    }
    schema = schema[prop];
  }
  return schema;
}
function isNumeric(value) {
  return typeof value === "string" && RE_NUMERIC.test(value);
}
function isScalar(value) {
  return ["number", "boolean"].includes(typeof value);
}
function hasProperties(obj, ...properties) {
  return properties.filter((key) => {
    return typeof obj[key] !== "undefined";
  }).length > 0;
}
function clampDate(value) {
  if (value.includes(" ")) {
    return new Date(value).toISOString().substr(0, 10);
  }
  let [year, month, day] = value.split("T")[0].split("-");
  month = `0${Math.max(1, Math.min(12, month))}`.slice(-2);
  day = `0${Math.max(1, Math.min(31, day))}`.slice(-2);
  return `${year}-${month}-${day}`;
}
function clampDateTime(value) {
  if (value.includes(" ")) {
    return new Date(value).toISOString().substr(0, 10);
  }
  const [datePart, timePart] = value.split("T");
  let [year, month, day] = datePart.split("-");
  let [hour, minute, second] = timePart.substr(0, 8).split(":");
  month = `0${Math.max(1, Math.min(12, month))}`.slice(-2);
  day = `0${Math.max(1, Math.min(31, day))}`.slice(-2);
  hour = `0${Math.max(1, Math.min(23, hour))}`.slice(-2);
  minute = `0${Math.max(1, Math.min(59, minute))}`.slice(-2);
  second = `0${Math.max(1, Math.min(59, second))}`.slice(-2);
  return `${year}-${month}-${day}T${hour}:${minute}:${second}.000Z`;
}
function typecast(type, schema, callback) {
  const params = {};
  switch (type || schema.type) {
    case "integer":
    case "number":
      if (typeof schema.minimum !== "undefined") {
        params.minimum = schema.minimum;
      }
      if (typeof schema.maximum !== "undefined") {
        params.maximum = schema.maximum;
      }
      if (schema.enum) {
        let min = Math.max(params.minimum || 0, 0);
        let max = Math.min(params.maximum || Infinity, Infinity);
        if (schema.exclusiveMinimum && min === schema.minimum) {
          min += schema.multipleOf || 1;
        }
        if (schema.exclusiveMaximum && max === schema.maximum) {
          max -= schema.multipleOf || 1;
        }
        if (min || max !== Infinity) {
          schema.enum = schema.enum.filter((x) => {
            if (x >= min && x <= max) {
              return true;
            }
            return false;
          });
        }
      }
      break;
    case "string": {
      params.minLength = option_default("minLength") || 0;
      params.maxLength = option_default("maxLength") || Number.MAX_SAFE_INTEGER;
      if (typeof schema.minLength !== "undefined") {
        params.minLength = Math.max(params.minLength, schema.minLength);
      }
      if (typeof schema.maxLength !== "undefined") {
        params.maxLength = Math.min(params.maxLength, schema.maxLength);
      }
      break;
    }
    default:
      break;
  }
  let value = callback(params);
  if (value === null || value === void 0) {
    return null;
  }
  switch (type || schema.type) {
    case "number":
      value = isNumeric(value) ? parseFloat(value) : value;
      break;
    case "integer":
      value = isNumeric(value) ? parseInt(value, 10) : value;
      break;
    case "boolean":
      value = !!value;
      break;
    case "string": {
      if (isScalar(value)) {
        return value;
      }
      value = String(value);
      const min = Math.max(params.minLength || 0, 0);
      const max = Math.min(params.maxLength || Infinity, Infinity);
      let prev;
      let noChangeCount = 0;
      while (value.length < min) {
        prev = value;
        if (!schema.pattern) {
          value += `${random_default.pick([" ", "/", "_", "-", "+", "=", "@", "^"])}${value}`;
        } else {
          value += random_default.randexp(schema.pattern);
        }
        if (value === prev) {
          noChangeCount += 1;
          if (noChangeCount === 3) {
            break;
          }
        } else {
          noChangeCount = 0;
        }
      }
      if (value.length > max) {
        value = value.substr(0, max);
        const pattern = schema.pattern ? new RegExp(schema.pattern) : null;
        if (pattern && !pattern.test(value)) {
          let temp = value;
          const maxRetries = option_default("maxRegexRetry");
          const minLength = Math.max(value.length - maxRetries, min);
          while (temp.length > minLength && !pattern.test(temp)) {
            temp = temp.slice(0, -1);
            if (pattern.test(temp)) {
              value = temp;
            }
          }
        }
      }
      switch (schema.format) {
        case "date-time":
        case "datetime":
          value = new Date(clampDateTime(value)).toISOString().replace(/([0-9])0+Z$/, "$1Z");
          break;
        case "full-date":
        case "date":
          value = new Date(clampDate(value)).toISOString().substr(0, 10);
          break;
        case "time":
          value = (/* @__PURE__ */ new Date(`1969-01-01 ${value}`)).toISOString().substr(11);
          break;
        default:
          break;
      }
      break;
    }
    default:
      break;
  }
  return value;
}
function merge(a, b) {
  Object.keys(b).forEach((key) => {
    if (typeof b[key] !== "object" || b[key] === null) {
      a[key] = b[key];
    } else if (Array.isArray(b[key])) {
      a[key] = a[key] || [];
      b[key].forEach((value, i) => {
        if (a.type === "array" && b.type === "array") {
          a[key][i] = merge(a[key][i] || {}, value, true);
        } else if (Array.isArray(a[key]) && a[key].indexOf(value) === -1) {
          a[key].push(value);
        }
      });
    } else if (typeof a[key] !== "object" || a[key] === null || Array.isArray(a[key])) {
      a[key] = merge({}, b[key]);
    } else {
      a[key] = merge(a[key], b[key]);
    }
  });
  return a;
}
function clone(obj, cache = /* @__PURE__ */ new Map()) {
  if (!obj || typeof obj !== "object") {
    return obj;
  }
  if (cache.has(obj)) {
    return cache.get(obj);
  }
  if (Array.isArray(obj)) {
    const arr = [];
    cache.set(obj, arr);
    arr.push(...obj.map((x) => clone(x, cache)));
    return arr;
  }
  const clonedObj = {};
  cache.set(obj, clonedObj);
  return Object.keys(obj).reduce((prev, cur) => {
    prev[cur] = clone(obj[cur], cache);
    return prev;
  }, clonedObj);
}
function short(schema) {
  const s = JSON.stringify(schema);
  const l = JSON.stringify(schema, null, 2);
  return s.length > 400 ? `${l.substr(0, 400)}...` : l;
}
function anyValue() {
  return random_default.pick([
    false,
    true,
    null,
    -1,
    NaN,
    Math.PI,
    Infinity,
    void 0,
    [],
    {},
    // FIXME: use built-in random?
    Math.random(),
    Math.random().toString(36).substr(2)
  ]);
}
function hasValue(schema, value) {
  if (schema.enum)
    return schema.enum.includes(value);
  if (schema.const)
    return schema.const === value;
}
function notValue(schema, parent) {
  const copy = merge({}, parent);
  if (typeof schema.minimum !== "undefined") {
    copy.maximum = schema.minimum;
    copy.exclusiveMaximum = true;
  }
  if (typeof schema.maximum !== "undefined") {
    copy.minimum = schema.maximum > copy.maximum ? 0 : schema.maximum;
    copy.exclusiveMinimum = true;
  }
  if (typeof schema.minLength !== "undefined") {
    copy.maxLength = schema.minLength;
  }
  if (typeof schema.maxLength !== "undefined") {
    copy.minLength = schema.maxLength > copy.maxLength ? 0 : schema.maxLength;
  }
  if (schema.type) {
    copy.type = random_default.pick(constants_default.SCALAR_TYPES.filter((x) => {
      const types2 = Array.isArray(schema.type) ? schema.type : [schema.type];
      return types2.every((type) => {
        if (x === "number" || x === "integer") {
          return type !== "number" && type !== "integer";
        }
        return x !== type;
      });
    }));
  } else if (schema.enum) {
    let value;
    do {
      value = anyValue();
    } while (schema.enum.indexOf(value) !== -1);
    copy.enum = [value];
  }
  if (schema.required && copy.properties) {
    schema.required.forEach((prop) => {
      delete copy.properties[prop];
    });
  }
  return copy;
}
function validateValueForSchema(value, schema) {
  const schemaHasMin = schema.minimum !== void 0;
  const schemaHasMax = schema.maximum !== void 0;
  return (schemaHasMin || schemaHasMax) && (!schemaHasMin || value >= schema.minimum) && (!schemaHasMax || value <= schema.maximum);
}
function validate(value, schemas) {
  return !schemas.every((schema) => validateValueForSchema(value, schema));
}
function validateValueForOneOf(value, oneOf) {
  const validCount = oneOf.reduce((count, schema) => count + (validateValueForSchema(value, schema) ? 1 : 0), 0);
  return validCount === 1;
}
function isKey(prop) {
  return ["enum", "const", "default", "examples", "required", "definitions", "items", "properties"].includes(prop);
}
function omitProps(obj, props) {
  return Object.keys(obj).filter((key) => !props.includes(key)).reduce((copy, k) => {
    if (Array.isArray(obj[k])) {
      copy[k] = obj[k].slice();
    } else {
      copy[k] = obj[k] instanceof Object ? merge({}, obj[k]) : obj[k];
    }
    return copy;
  }, {});
}
function template(value, schema) {
  if (Array.isArray(value)) {
    return value.map((x) => template(x, schema));
  }
  if (typeof value === "string") {
    value = value.replace(/#\{([\w.-]+)\}/g, (_, $1) => schema[$1]);
  }
  return value;
}
function isEmpty(value) {
  return Object.prototype.toString.call(value) === "[object Object]" && !Object.keys(value).length;
}
function shouldClean(key, schema) {
  schema = schema.items || schema;
  const alwaysFakeOptionals = option_default("alwaysFakeOptionals");
  const isRequired = Array.isArray(schema.required) && schema.required.includes(key) || alwaysFakeOptionals;
  const wasCleaned = typeof schema.thunk === "function" || schema.additionalProperties && typeof schema.additionalProperties.thunk === "function";
  return !isRequired && !wasCleaned;
}
function clean(obj, schema, isArray = false) {
  if (!obj || typeof obj !== "object") {
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map((value) => clean(value, schema == null ? void 0 : schema.items, true)).filter((value) => typeof value !== "undefined");
  }
  Object.keys(obj).forEach((k) => {
    if (isEmpty(obj[k])) {
      if (shouldClean(k, schema)) {
        delete obj[k];
      }
    } else {
      let subSchema = schema;
      if (schema && schema.properties && schema.properties[k]) {
        subSchema = schema.properties[k];
      }
      const value = clean(obj[k], subSchema);
      if (!isEmpty(value)) {
        obj[k] = value;
      }
    }
    if (typeof obj[k] === "undefined") {
      delete obj[k];
    }
  });
  if (!Object.keys(obj).length && isArray) {
    return void 0;
  }
  return obj;
}
var RE_NUMERIC, utils_default;
var init_utils = __esm({
  "src/lib/core/utils.mjs"() {
    init_option();
    init_constants();
    init_random();
    RE_NUMERIC = /^(0|[1-9][0-9]*)$/;
    utils_default = {
      hasProperties,
      getLocalRef,
      omitProps,
      typecast,
      merge,
      clone,
      short,
      hasValue,
      notValue,
      anyValue,
      validate,
      validateValueForSchema,
      validateValueForOneOf,
      isKey,
      template,
      shouldClean,
      clean,
      isEmpty,
      clampDate
    };
  }
});

// src/lib/class/Container.mjs
function proxy(gen) {
  return (value, schema, property, rootSchema) => {
    let fn = value;
    let args = [];
    if (typeof value === "object") {
      fn = Object.keys(value)[0];
      if (Array.isArray(value[fn])) {
        args = value[fn];
      } else {
        args.push(value[fn]);
      }
    }
    const props = fn.split(".");
    let ctx = gen();
    while (props.length > 1) {
      ctx = ctx[props.shift()];
    }
    value = typeof ctx === "object" ? ctx[props[0]] : ctx;
    if (typeof value === "function") {
      value = value.apply(ctx, args.map((x) => utils_default.template(x, rootSchema)));
    }
    if (Object.prototype.toString.call(value) === "[object Object]") {
      Object.keys(value).forEach((key) => {
        if (typeof value[key] === "function") {
          throw new Error(`Cannot resolve value for '${property}: ${fn}', given: ${value}`);
        }
      });
    }
    return value;
  };
}
var Container, Container_default;
var init_Container = __esm({
  "src/lib/class/Container.mjs"() {
    init_utils();
    Container = class {
      constructor() {
        this.registry = {};
        this.support = {};
      }
      /**
       * Unregister extensions
       * @param name
       */
      reset(name) {
        if (!name) {
          this.registry = {};
          this.support = {};
        } else {
          delete this.registry[name];
          delete this.support[name];
        }
      }
      /**
       * Override dependency given by name
       * @param name
       * @param callback
       */
      extend(name, callback) {
        this.registry[name] = callback(this.registry[name]);
        if (!this.support[name]) {
          this.support[name] = proxy(() => this.registry[name]);
        }
      }
      /**
       * Set keyword support by name
       * @param name
       * @param callback
       */
      define(name, callback) {
        this.support[name] = callback;
      }
      /**
       * Returns dependency given by name
       * @param name
       * @returns {Dependency}
       */
      get(name) {
        if (typeof this.registry[name] === "undefined") {
          throw new ReferenceError(`'${name}' dependency doesn't exist.`);
        }
        return this.registry[name];
      }
      /**
       * Apply a custom keyword
       * @param schema
       */
      wrap(schema) {
        if (!("generate" in schema)) {
          const keys = Object.keys(schema);
          const context = {};
          let length = keys.length;
          while (length--) {
            const fn = keys[length].replace(/^x-/, "");
            const gen = this.support[fn];
            if (typeof gen === "function") {
              Object.defineProperty(schema, "generate", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: (rootSchema, key) => gen.call(context, schema[keys[length]], schema, keys[length], rootSchema, key.slice())
                // eslint-disable-line
              });
              break;
            }
          }
        }
        return schema;
      }
    };
    Container_default = Container;
  }
});

// src/lib/api/format.mjs
function formatAPI(nameOrFormatMap, callback) {
  if (typeof nameOrFormatMap === "undefined") {
    return registry2.list();
  }
  if (typeof nameOrFormatMap === "string") {
    if (typeof callback === "function") {
      registry2.register(nameOrFormatMap, callback);
    } else if (callback === null || callback === false) {
      registry2.unregister(nameOrFormatMap);
    } else {
      return registry2.get(nameOrFormatMap);
    }
  } else {
    registry2.registerMany(nameOrFormatMap);
  }
}
var registry2, format_default;
var init_format = __esm({
  "src/lib/api/format.mjs"() {
    init_Registry();
    registry2 = new Registry_default();
    format_default = formatAPI;
  }
});

// src/lib/core/error.mjs
var ParseError, error_default;
var init_error = __esm({
  "src/lib/core/error.mjs"() {
    ParseError = class extends Error {
      constructor(message, path) {
        super();
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "ParseError";
        this.message = message;
        this.path = path;
      }
    };
    error_default = ParseError;
  }
});

// src/lib/core/infer.mjs
function matchesType(obj, lastElementInPath, inferredTypeProperties) {
  return Object.keys(obj).filter((prop) => {
    const isSubschema = subschemaProperties.indexOf(lastElementInPath) > -1;
    const inferredPropertyFound = inferredTypeProperties.indexOf(prop) > -1;
    if (inferredPropertyFound && !isSubschema) {
      return true;
    }
    return false;
  }).length > 0;
}
function inferType(obj, schemaPath) {
  const keys = Object.keys(inferredProperties);
  for (let i = 0; i < keys.length; i += 1) {
    const typeName = keys[i];
    const lastElementInPath = schemaPath[schemaPath.length - 1];
    if (matchesType(obj, lastElementInPath, inferredProperties[typeName])) {
      return typeName;
    }
  }
}
var inferredProperties, subschemaProperties, infer_default;
var init_infer = __esm({
  "src/lib/core/infer.mjs"() {
    inferredProperties = {
      array: [
        "additionalItems",
        "items",
        "maxItems",
        "minItems",
        "uniqueItems"
      ],
      integer: [
        "exclusiveMaximum",
        "exclusiveMinimum",
        "maximum",
        "minimum",
        "multipleOf"
      ],
      object: [
        "additionalProperties",
        "dependencies",
        "maxProperties",
        "minProperties",
        "patternProperties",
        "properties",
        "required"
      ],
      string: [
        "maxLength",
        "minLength",
        "pattern",
        "format"
      ]
    };
    inferredProperties.number = inferredProperties.integer;
    subschemaProperties = [
      "additionalItems",
      "items",
      "additionalProperties",
      "dependencies",
      "patternProperties",
      "properties"
    ];
    infer_default = inferType;
  }
});

// src/lib/generators/boolean.mjs
function booleanGenerator() {
  return option_default("random")() > 0.5;
}
var boolean_default;
var init_boolean = __esm({
  "src/lib/generators/boolean.mjs"() {
    init_option();
    boolean_default = booleanGenerator;
  }
});

// src/lib/types/boolean.mjs
var booleanType, boolean_default2;
var init_boolean2 = __esm({
  "src/lib/types/boolean.mjs"() {
    init_boolean();
    booleanType = boolean_default;
    boolean_default2 = booleanType;
  }
});

// src/lib/generators/null.mjs
function nullGenerator() {
  return null;
}
var null_default;
var init_null = __esm({
  "src/lib/generators/null.mjs"() {
    null_default = nullGenerator;
  }
});

// src/lib/types/null.mjs
var nullType, null_default2;
var init_null2 = __esm({
  "src/lib/types/null.mjs"() {
    init_null();
    nullType = null_default;
    null_default2 = nullType;
  }
});

// src/lib/types/array.mjs
function unique(path, items, value, sample, resolve2, traverseCallback) {
  const tmp = [];
  const seen = [];
  function walk(obj) {
    const json = JSON.stringify(obj.value);
    if (seen.indexOf(json) === -1) {
      seen.push(json);
      tmp.push(obj);
      return true;
    }
    return false;
  }
  items.forEach(walk);
  let limit = 100;
  while (tmp.length !== items.length) {
    if (!walk(traverseCallback(value.items || sample, path, resolve2))) {
      limit -= 1;
    }
    if (!limit) {
      break;
    }
  }
  return tmp;
}
function arrayType(value, path, resolve2, traverseCallback) {
  const items = [];
  if (!(value.items || value.additionalItems)) {
    if (utils_default.hasProperties(value, "minItems", "maxItems", "uniqueItems")) {
      if (value.minItems !== 0 || value.maxItems !== 0) {
        throw new error_default(`missing items for ${utils_default.short(value)}`, path);
      }
    }
    return items;
  }
  if (Array.isArray(value.items)) {
    return value.items.map((item, key) => {
      const itemSubpath = path.concat(["items", key]);
      return traverseCallback(item, itemSubpath, resolve2);
    });
  }
  let minItems = value.minItems;
  let maxItems = value.maxItems;
  const defaultMinItems = option_default("minItems");
  const defaultMaxItems = option_default("maxItems");
  if (defaultMinItems) {
    minItems = typeof minItems === "undefined" ? defaultMinItems : Math.min(defaultMinItems, minItems);
  }
  if (defaultMaxItems) {
    maxItems = typeof maxItems === "undefined" ? defaultMaxItems : Math.min(defaultMaxItems, maxItems);
    if (maxItems && maxItems > defaultMaxItems) {
      maxItems = defaultMaxItems;
    }
    if (minItems && minItems > defaultMaxItems) {
      minItems = maxItems;
    }
  }
  const optionalsProbability = option_default("alwaysFakeOptionals") === true ? 1 : option_default("optionalsProbability");
  const fixedProbabilities = option_default("alwaysFakeOptionals") || option_default("fixedProbabilities") || false;
  let length = random_default.number(minItems, maxItems, 0, 5);
  if (optionalsProbability !== null) {
    length = Math.max(fixedProbabilities ? Math.round((maxItems || length) * optionalsProbability) : Math.abs(random_default.number(minItems, maxItems) * optionalsProbability), minItems || 0);
  }
  const sample = typeof value.additionalItems === "object" ? value.additionalItems : {};
  for (let current = items.length; current < length; current += 1) {
    const itemSubpath = path.concat(["items", current]);
    const element = traverseCallback(value.items || sample, itemSubpath, resolve2);
    items.push(element);
  }
  if (value.contains && length > 0) {
    const idx = random_default.number(0, length - 1);
    items[idx] = traverseCallback(value.contains, path.concat(["items", idx]), resolve2);
  }
  if (value.uniqueItems) {
    return unique(path.concat(["items"]), items, value, sample, resolve2, traverseCallback);
  }
  return items;
}
var array_default;
var init_array = __esm({
  "src/lib/types/array.mjs"() {
    init_random();
    init_utils();
    init_error();
    init_option();
    array_default = arrayType;
  }
});

// src/lib/types/number.mjs
function numberType(value) {
  let min = typeof value.minimum === "undefined" || value.minimum === -Number.MAX_VALUE ? constants_default.MIN_INTEGER : value.minimum;
  let max = typeof value.maximum === "undefined" || value.maximum === Number.MAX_VALUE ? constants_default.MAX_INTEGER : value.maximum;
  if (min > max) {
    max = Number.MAX_SAFE_INTEGER;
  }
  const multipleOf = value.multipleOf;
  const decimals = multipleOf && String(multipleOf).match(/e-(\d)|\.(\d+)$/);
  if (decimals) {
    const number2 = (Math.random() * random_default.number(0, 10) + 1) * multipleOf;
    const truncate = decimals[1] || decimals[2].length;
    const result = parseFloat(number2.toFixed(truncate));
    const base = random_default.number(min, max - 1);
    if (!String(result).includes(".")) {
      return (base + result).toExponential();
    }
    return base + result;
  }
  if (multipleOf) {
    max = Math.floor(max / multipleOf) * multipleOf;
    min = Math.ceil(min / multipleOf) * multipleOf;
  }
  if (value.exclusiveMinimum && min === value.minimum) {
    min += multipleOf || 1;
  }
  if (value.exclusiveMaximum && max === value.maximum) {
    max -= multipleOf || 1;
  }
  if (min > max) {
    return NaN;
  }
  if (multipleOf) {
    let base = random_default.number(Math.floor(min / multipleOf), Math.floor(max / multipleOf)) * multipleOf;
    while (base < min) {
      base += multipleOf;
    }
    return base;
  }
  return random_default.number(min, max, void 0, void 0, value.type !== "integer");
}
var number_default;
var init_number = __esm({
  "src/lib/types/number.mjs"() {
    init_random();
    init_constants();
    number_default = numberType;
  }
});

// src/lib/types/integer.mjs
function integerType(value) {
  return Math.floor(number_default({ ...value }));
}
var integer_default;
var init_integer = __esm({
  "src/lib/types/integer.mjs"() {
    init_number();
    integer_default = integerType;
  }
});

// src/lib/generators/words.mjs
function wordsGenerator(length) {
  const words = random_default.shuffle(LIPSUM_WORDS);
  return words.slice(0, length);
}
var LIPSUM_WORDS, words_default;
var init_words = __esm({
  "src/lib/generators/words.mjs"() {
    init_random();
    LIPSUM_WORDS = `Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore
et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est
laborum`.split(/\W/);
    words_default = wordsGenerator;
  }
});

// src/lib/types/object.mjs
function objectType(value, path, resolve2, traverseCallback) {
  const props = {};
  const properties = value.properties || {};
  const patternProperties = value.patternProperties || {};
  const requiredProperties = typeof value.required === "boolean" ? [] : (value.required || []).slice();
  const allowsAdditional = value.additionalProperties !== false;
  const propertyKeys = Object.keys(properties);
  const patternPropertyKeys = Object.keys(patternProperties);
  const optionalProperties = propertyKeys.concat(patternPropertyKeys).reduce((_response, _key) => {
    if (requiredProperties.indexOf(_key) === -1)
      _response.push(_key);
    return _response;
  }, []);
  const allProperties = requiredProperties.concat(optionalProperties);
  const additionalProperties = allowsAdditional ? value.additionalProperties === true ? anyType : value.additionalProperties : value.additionalProperties;
  if (!allowsAdditional && propertyKeys.length === 0 && patternPropertyKeys.length === 0 && utils_default.hasProperties(value, "minProperties", "maxProperties", "dependencies", "required")) {
    return null;
  }
  if (option_default("requiredOnly") === true) {
    requiredProperties.forEach((key) => {
      if (properties[key]) {
        props[key] = properties[key];
      }
    });
    return traverseCallback(props, path.concat(["properties"]), resolve2, value);
  }
  const optionalsProbability = option_default("alwaysFakeOptionals") === true ? 1 : option_default("optionalsProbability");
  const fixedProbabilities = option_default("alwaysFakeOptionals") || option_default("fixedProbabilities") || false;
  const ignoreProperties = option_default("ignoreProperties") || [];
  const reuseProps = option_default("reuseProperties");
  const fillProps = option_default("fillProperties");
  const max = value.maxProperties || allProperties.length + (allowsAdditional ? random_default.number(1, 5) : 0);
  let min = Math.max(value.minProperties || 0, requiredProperties.length);
  let neededExtras = Math.max(0, allProperties.length - min);
  if (allProperties.length === 1 && !requiredProperties.length) {
    min = Math.max(random_default.number(fillProps ? 1 : 0, max), min);
  }
  if (optionalsProbability !== null) {
    if (fixedProbabilities === true) {
      neededExtras = Math.round(min - requiredProperties.length + optionalsProbability * (allProperties.length - min));
    } else {
      neededExtras = random_default.number(min - requiredProperties.length, optionalsProbability * (allProperties.length - min));
    }
  }
  const extraPropertiesRandomOrder = random_default.shuffle(optionalProperties).slice(0, neededExtras);
  const extraProperties = optionalProperties.filter((_item) => {
    return extraPropertiesRandomOrder.indexOf(_item) !== -1;
  });
  const _limit = optionalsProbability !== null || requiredProperties.length === max ? max : random_default.number(0, max);
  const _props = requiredProperties.concat(random_default.shuffle(extraProperties).slice(0, _limit)).slice(0, max);
  const _defns = [];
  const _deps = [];
  if (value.dependencies) {
    Object.keys(value.dependencies).forEach((prop) => {
      const _required = value.dependencies[prop];
      if (_props.indexOf(prop) !== -1) {
        if (Array.isArray(_required)) {
          _required.forEach((sub) => {
            if (_props.indexOf(sub) === -1) {
              _props.push(sub);
            }
          });
        } else if (Array.isArray(_required.oneOf || _required.anyOf)) {
          const values = _required.oneOf || _required.anyOf;
          _deps.push({ prop, values });
        } else {
          _defns.push(_required);
        }
      }
    });
    if (_defns.length) {
      delete value.dependencies;
      return traverseCallback({
        allOf: _defns.concat(value)
      }, path.concat(["properties"]), resolve2, value);
    }
  }
  const skipped = [];
  const missing = [];
  _props.forEach((key) => {
    if (properties[key] && ["{}", "true"].includes(JSON.stringify(properties[key].not))) {
      return;
    }
    for (let i = 0; i < ignoreProperties.length; i += 1) {
      if (ignoreProperties[i] instanceof RegExp && ignoreProperties[i].test(key) || typeof ignoreProperties[i] === "string" && ignoreProperties[i] === key || typeof ignoreProperties[i] === "function" && ignoreProperties[i](properties[key], key)) {
        skipped.push(key);
        return;
      }
    }
    if (additionalProperties === false) {
      if (requiredProperties.indexOf(key) !== -1) {
        props[key] = properties[key];
      }
    }
    if (properties[key]) {
      props[key] = properties[key];
    }
    let found;
    patternPropertyKeys.forEach((_key) => {
      if (key.match(new RegExp(_key))) {
        found = true;
        if (props[key]) {
          utils_default.merge(props[key], patternProperties[_key]);
        } else {
          props[random_default.randexp(key)] = patternProperties[_key];
        }
      }
    });
    if (!found) {
      const subschema = patternProperties[key] || additionalProperties;
      if (subschema && additionalProperties !== false) {
        props[patternProperties[key] ? random_default.randexp(key) : key] = properties[key] || subschema;
      } else {
        missing.push(key);
      }
    }
  });
  let current = Object.keys(props).length + (fillProps ? 0 : skipped.length);
  const hash = (suffix) => random_default.randexp(`_?[_a-f\\d]{1,3}${suffix ? "\\$?" : ""}`);
  function get(from) {
    let one;
    do {
      if (!from.length)
        break;
      one = from.shift();
    } while (props[one]);
    return one;
  }
  let minProps = min;
  if (allowsAdditional && !requiredProperties.length) {
    minProps = Math.max(optionalsProbability === null || additionalProperties ? random_default.number(fillProps ? 1 : 0, max) : 0, min);
  }
  if (!extraProperties.length && !neededExtras && allowsAdditional && fixedProbabilities === true && fillProps) {
    const limit = random_default.number(0, max);
    for (let i = 0; i < limit; i += 1) {
      props[words_default(1) + hash(limit[i])] = additionalProperties || anyType;
    }
  }
  while (fillProps) {
    if (!(patternPropertyKeys.length || allowsAdditional)) {
      break;
    }
    if (current >= minProps) {
      break;
    }
    if (allowsAdditional) {
      if (reuseProps && propertyKeys.length - current > minProps) {
        let count = 0;
        let key;
        do {
          count += 1;
          if (count > 1e3) {
            break;
          }
          key = get(requiredProperties) || random_default.pick(propertyKeys);
        } while (typeof props[key] !== "undefined");
        if (typeof props[key] === "undefined") {
          props[key] = properties[key];
          current += 1;
        }
      } else if (patternPropertyKeys.length && !additionalProperties) {
        const prop = random_default.pick(patternPropertyKeys);
        const word = random_default.randexp(prop);
        if (!props[word]) {
          props[word] = patternProperties[prop];
          current += 1;
        }
      } else {
        const word = get(requiredProperties) || words_default(1) + hash();
        if (!props[word]) {
          props[word] = additionalProperties || anyType;
          current += 1;
        }
      }
    }
    for (let i = 0; current < min && i < patternPropertyKeys.length; i += 1) {
      const _key = patternPropertyKeys[i];
      const word = random_default.randexp(_key);
      if (!props[word]) {
        props[word] = patternProperties[_key];
        current += 1;
      }
    }
  }
  if (requiredProperties.length === 0 && (!allowsAdditional || optionalsProbability === false)) {
    const maximum = random_default.number(min, max);
    for (; current < maximum; ) {
      const word = get(propertyKeys);
      if (word) {
        props[word] = properties[word];
      }
      current += 1;
    }
  }
  let sortedObj = props;
  if (option_default("sortProperties") !== null) {
    const originalKeys = Object.keys(properties);
    const sortedKeys = Object.keys(props).sort((a, b) => {
      return option_default("sortProperties") ? a.localeCompare(b) : originalKeys.indexOf(a) - originalKeys.indexOf(b);
    });
    sortedObj = sortedKeys.reduce((memo, key) => {
      memo[key] = props[key];
      return memo;
    }, {});
  }
  const result = traverseCallback(sortedObj, path.concat(["properties"]), resolve2, value);
  _deps.forEach((dep) => {
    for (const sub of dep.values) {
      if (utils_default.hasValue(sub.properties[dep.prop], result.value[dep.prop])) {
        Object.keys(sub.properties).forEach((next) => {
          if (next !== dep.prop) {
            utils_default.merge(result.value, traverseCallback(sub.properties, path.concat(["properties"]), resolve2, value).value);
          }
        });
        break;
      }
    }
  });
  return result;
}
var anyType, object_default;
var init_object = __esm({
  "src/lib/types/object.mjs"() {
    init_constants();
    init_random();
    init_words();
    init_utils();
    init_option();
    anyType = { type: constants_default.ALLOWED_TYPES };
    object_default = objectType;
  }
});

// src/lib/generators/thunk.mjs
function produce() {
  const length = random_default.number(1, 5);
  return words_default(length).join(" ");
}
function thunkGenerator(min = 0, max = 140) {
  const _min = Math.max(0, min);
  const _max = random_default.number(_min, max);
  let result = produce();
  while (result.length < _min) {
    result += produce();
  }
  if (result.length > _max) {
    result = result.substr(0, _max);
  }
  return result;
}
var thunk_default;
var init_thunk = __esm({
  "src/lib/generators/thunk.mjs"() {
    init_words();
    init_random();
    thunk_default = thunkGenerator;
  }
});

// src/lib/generators/ipv4.mjs
function ipv4Generator() {
  return [0, 0, 0, 0].map(() => {
    return random_default.number(0, 255);
  }).join(".");
}
var ipv4_default;
var init_ipv4 = __esm({
  "src/lib/generators/ipv4.mjs"() {
    init_random();
    ipv4_default = ipv4Generator;
  }
});

// src/lib/generators/dateTime.mjs
function dateTimeGenerator() {
  return random_default.date().toISOString();
}
var dateTime_default;
var init_dateTime = __esm({
  "src/lib/generators/dateTime.mjs"() {
    init_random();
    dateTime_default = dateTimeGenerator;
  }
});

// src/lib/generators/date.mjs
function dateGenerator() {
  return dateTime_default().slice(0, 10);
}
var date_default;
var init_date = __esm({
  "src/lib/generators/date.mjs"() {
    init_dateTime();
    date_default = dateGenerator;
  }
});

// src/lib/generators/time.mjs
function timeGenerator() {
  return dateTime_default().slice(11);
}
var time_default;
var init_time = __esm({
  "src/lib/generators/time.mjs"() {
    init_dateTime();
    time_default = timeGenerator;
  }
});

// src/lib/generators/coreFormat.mjs
function coreFormatGenerator(coreFormat) {
  return random_default.randexp(regexps[coreFormat]).replace(ALLOWED_FORMATS, (match, key) => {
    return random_default.randexp(regexps[key]);
  });
}
var FRAGMENT, URI_PATTERN, PARAM_PATTERN, regexps, ALLOWED_FORMATS, coreFormat_default;
var init_coreFormat = __esm({
  "src/lib/generators/coreFormat.mjs"() {
    init_random();
    FRAGMENT = "[a-zA-Z][a-zA-Z0-9+-.]*";
    URI_PATTERN = `https?://{hostname}(?:${FRAGMENT})+`;
    PARAM_PATTERN = "(?:\\?([a-z]{1,7}(=\\w{1,5})?&){0,3})?";
    regexps = {
      email: "[a-zA-Z\\d][a-zA-Z\\d-]{1,13}[a-zA-Z\\d]@{hostname}",
      hostname: "[a-zA-Z]{1,33}\\.[a-z]{2,4}",
      ipv6: "[a-f\\d]{4}(:[a-f\\d]{4}){7}",
      uri: URI_PATTERN,
      slug: "[a-zA-Z\\d_-]+",
      // types from draft-0[67] (?)
      "uri-reference": `${URI_PATTERN}${PARAM_PATTERN}`,
      "uri-template": URI_PATTERN.replace("(?:", "(?:/\\{[a-z][:a-zA-Z0-9-]*\\}|"),
      "json-pointer": `(/(?:${FRAGMENT.replace("]*", "/]*")}|~[01]))+`,
      // some types from https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#data-types (?)
      uuid: "^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$",
      duration: "^P(?!$)((\\d+Y)?(\\d+M)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?|(\\d+W)?)$"
    };
    regexps.iri = regexps["uri-reference"];
    regexps["iri-reference"] = regexps["uri-reference"];
    regexps["idn-email"] = regexps.email;
    regexps["idn-hostname"] = regexps.hostname;
    ALLOWED_FORMATS = new RegExp(`\\{(${Object.keys(regexps).join("|")})\\}`);
    coreFormat_default = coreFormatGenerator;
  }
});

// src/lib/types/string.mjs
function generateFormat(value, invalid) {
  const callback = format_default(value.format);
  if (typeof callback === "function") {
    return callback(value);
  }
  switch (value.format) {
    case "date-time":
    case "datetime":
      return dateTime_default();
    case "date":
      return date_default();
    case "time":
      return time_default();
    case "ipv4":
      return ipv4_default();
    case "regex":
      return ".+?";
    case "email":
    case "hostname":
    case "ipv6":
    case "uri":
    case "uri-reference":
    case "iri":
    case "iri-reference":
    case "idn-email":
    case "idn-hostname":
    case "json-pointer":
    case "slug":
    case "uri-template":
    case "uuid":
    case "duration":
      return coreFormat_default(value.format);
    default:
      if (typeof callback === "undefined") {
        if (option_default("failOnInvalidFormat")) {
          throw new Error(`unknown registry key ${utils_default.short(value.format)}`);
        } else {
          return invalid();
        }
      }
      throw new Error(`unsupported format '${value.format}'`);
  }
}
function stringType(value) {
  const output = utils_default.typecast("string", value, (opts) => {
    if (value.format) {
      return generateFormat(value, () => thunk_default(opts.minLength, opts.maxLength));
    }
    if (value.pattern) {
      return random_default.randexp(value.pattern);
    }
    return thunk_default(opts.minLength, opts.maxLength);
  });
  return output;
}
var string_default;
var init_string = __esm({
  "src/lib/types/string.mjs"() {
    init_thunk();
    init_ipv4();
    init_dateTime();
    init_date();
    init_time();
    init_coreFormat();
    init_option();
    init_format();
    init_random();
    init_utils();
    string_default = stringType;
  }
});

// src/lib/types/index.mjs
var typeMap, types_default;
var init_types = __esm({
  "src/lib/types/index.mjs"() {
    init_boolean2();
    init_null2();
    init_array();
    init_integer();
    init_number();
    init_object();
    init_string();
    typeMap = {
      boolean: boolean_default2,
      null: null_default2,
      array: array_default,
      integer: integer_default,
      number: number_default,
      object: object_default,
      string: string_default
    };
    types_default = typeMap;
  }
});

// src/lib/core/traverse.mjs
function getMeta({ $comment: comment, title, description }) {
  return Object.entries({ comment, title, description }).filter(([, value]) => value).reduce((memo, [k, v]) => {
    memo[k] = v;
    return memo;
  }, {});
}
function traverse(schema, path, resolve2, rootSchema) {
  schema = resolve2(schema, null, path);
  if (schema && (schema.oneOf || schema.anyOf || schema.allOf)) {
    schema = resolve2(schema, null, path);
  }
  if (!schema) {
    throw new Error(`Cannot traverse at '${path.join(".")}', given '${JSON.stringify(rootSchema)}'`);
  }
  const context = {
    ...getMeta(schema),
    schemaPath: path
  };
  if (path[path.length - 1] !== "properties") {
    if (option_default("useExamplesValue") && Array.isArray(schema.examples)) {
      const fixedExamples = schema.examples.concat("default" in schema ? [schema.default] : []);
      return { value: utils_default.typecast(null, schema, () => random_default.pick(fixedExamples)), context };
    }
    if (option_default("useExamplesValue") && typeof schema.example !== "undefined") {
      return { value: utils_default.typecast(null, schema, () => schema.example), context };
    }
    if (option_default("useDefaultValue") && "default" in schema) {
      if (schema.default !== "" || !option_default("replaceEmptyByRandomValue")) {
        return { value: schema.default, context };
      }
    }
    if ("template" in schema) {
      return { value: utils_default.template(schema.template, rootSchema), context };
    }
    if ("const" in schema) {
      return { value: schema.const, context };
    }
  }
  if (schema.not && typeof schema.not === "object") {
    schema = utils_default.notValue(schema.not, utils_default.omitProps(schema, ["not"]));
    if (schema.type && schema.type === "object") {
      const { value, context: innerContext } = traverse(schema, path.concat(["not"]), resolve2, rootSchema);
      return { value: utils_default.clean(value, schema, false), context: { ...context, items: innerContext } };
    }
  }
  if (typeof schema.thunk === "function") {
    const { value, context: innerContext } = traverse(schema.thunk(rootSchema), path, resolve2);
    return { value, context: { ...context, items: innerContext } };
  }
  if (schema.jsonPath) {
    return { value: schema, context };
  }
  let type = schema.type;
  if (Array.isArray(type)) {
    type = random_default.pick(type);
  } else if (typeof type === "undefined") {
    type = infer_default(schema, path) || type;
    if (type) {
      schema.type = type;
    }
  }
  if (typeof schema.generate === "function") {
    const retVal = utils_default.typecast(null, schema, () => schema.generate(rootSchema, path));
    const retType = retVal === null ? "null" : typeof retVal;
    if (retType === type || retType === "number" && type === "integer" || Array.isArray(retVal) && type === "array") {
      return { value: retVal, context };
    }
  }
  if (typeof schema.pattern === "string") {
    return { value: utils_default.typecast("string", schema, () => random_default.randexp(schema.pattern)), context };
  }
  if (Array.isArray(schema.enum)) {
    return { value: utils_default.typecast(null, schema, () => random_default.pick(schema.enum)), context };
  }
  if (typeof type === "string") {
    if (!types_default[type]) {
      if (option_default("failOnInvalidTypes")) {
        throw new error_default(`unknown primitive ${utils_default.short(type)}`, path.concat(["type"]));
      } else {
        const value = option_default("defaultInvalidTypeProduct");
        if (typeof value === "string" && types_default[value]) {
          return { value: types_default[value](schema, path, resolve2, traverse), context };
        }
        return { value, context };
      }
    } else {
      try {
        const innerResult = types_default[type](schema, path, resolve2, traverse);
        if (type === "array") {
          return {
            value: innerResult.map(({ value }) => value),
            context: {
              ...context,
              items: innerResult.map(
                Array.isArray(schema.items) ? ({ context: c }) => c : ({ context: c }) => ({
                  ...c,
                  // we have to remove the index from the path to get the real schema path
                  schemaPath: c.schemaPath.slice(0, -1)
                })
              )
            }
          };
        }
        if (type === "object") {
          return innerResult !== null ? { value: innerResult.value, context: { ...context, items: innerResult.context } } : { value: {}, context };
        }
        return { value: innerResult, context };
      } catch (e) {
        if (typeof e.path === "undefined") {
          throw new error_default(e.stack, path);
        }
        throw e;
      }
    }
  }
  let valueCopy = {};
  let contextCopy = { ...context };
  if (Array.isArray(schema)) {
    valueCopy = [];
  }
  const pruneProperties = option_default("pruneProperties") || [];
  Object.keys(schema).forEach((prop) => {
    if (pruneProperties.includes(prop))
      return;
    if (schema[prop] === null)
      return;
    if (typeof schema[prop] === "object" && prop !== "definitions") {
      const { value, context: innerContext } = traverse(schema[prop], path.concat([prop]), resolve2, valueCopy);
      valueCopy[prop] = utils_default.clean(value, schema[prop], false);
      contextCopy[prop] = innerContext;
      if (valueCopy[prop] === null && option_default("omitNulls")) {
        delete valueCopy[prop];
        delete contextCopy[prop];
      }
    } else {
      valueCopy[prop] = schema[prop];
    }
  });
  return { value: valueCopy, context: contextCopy };
}
var traverse_default;
var init_traverse = __esm({
  "src/lib/core/traverse.mjs"() {
    init_utils();
    init_random();
    init_error();
    init_infer();
    init_types();
    init_option();
    traverse_default = traverse;
  }
});

// src/lib/core/buildResolveSchema.mjs
var buildResolveSchema, buildResolveSchema_default;
var init_buildResolveSchema = __esm({
  "src/lib/core/buildResolveSchema.mjs"() {
    init_option();
    init_random();
    init_utils();
    buildResolveSchema = ({
      refs,
      schema,
      container: container2,
      synchronous,
      refDepthMax,
      refDepthMin
    }) => {
      const recursiveUtil = {};
      const seenRefs = {};
      let depth = 0;
      let lastRef;
      let lastPath;
      recursiveUtil.resolveSchema = (sub, index, rootPath) => {
        if (sub === null || sub === void 0) {
          return null;
        }
        if (typeof sub.generate === "function") {
          return sub;
        }
        const _id = sub.$id || sub.id;
        if (typeof _id === "string") {
          delete sub.id;
          delete sub.$id;
          delete sub.$schema;
        }
        if (typeof sub.$ref === "string") {
          const maxDepth = Math.max(refDepthMin, refDepthMax) - 1;
          if (sub.$ref === "#" || seenRefs[sub.$ref] < 0 || lastRef === sub.$ref && ++depth > maxDepth) {
            if (sub.$ref !== "#" && lastPath && lastPath.length === rootPath.length) {
              return utils_default.getLocalRef(schema, sub.$ref, synchronous && refs);
            }
            delete sub.$ref;
            return sub;
          }
          if (typeof seenRefs[sub.$ref] === "undefined") {
            seenRefs[sub.$ref] = random_default.number(refDepthMin, refDepthMax) - 1;
          }
          lastPath = rootPath;
          lastRef = sub.$ref;
          let ref;
          if (sub.$ref.indexOf("#/") === -1) {
            ref = refs[sub.$ref] || null;
          } else {
            ref = utils_default.getLocalRef(schema, sub.$ref, synchronous && refs) || null;
          }
          let fixed;
          if (typeof ref !== "undefined") {
            if (!ref && option_default("ignoreMissingRefs") !== true) {
              throw new Error(`Reference not found: ${sub.$ref}`);
            }
            seenRefs[sub.$ref] -= 1;
            utils_default.merge(sub, ref || {});
            fixed = synchronous && ref && ref.$ref;
          }
          if (!fixed)
            delete sub.$ref;
          return sub;
        }
        if (Array.isArray(sub.allOf)) {
          const schemas = sub.allOf;
          delete sub.allOf;
          schemas.forEach((subSchema) => {
            const _sub = recursiveUtil.resolveSchema(subSchema, null, rootPath);
            utils_default.merge(sub, typeof _sub.thunk === "function" ? _sub.thunk(sub) : _sub);
            if (Array.isArray(sub.allOf)) {
              recursiveUtil.resolveSchema(sub, index, rootPath);
            }
          });
        }
        if (Array.isArray(sub.oneOf || sub.anyOf) && rootPath[rootPath.length - 2] !== "dependencies") {
          const mix = sub.oneOf || sub.anyOf;
          if (sub.enum && sub.oneOf) {
            sub.enum = sub.enum.filter((x) => utils_default.validate(x, mix));
          }
          return {
            thunk(rootSchema) {
              const copy = utils_default.omitProps(sub, ["anyOf", "oneOf"]);
              const fixed = random_default.pick(mix);
              utils_default.merge(copy, fixed);
              mix.forEach((omit) => {
                if (omit.required && omit !== fixed) {
                  omit.required.forEach((key) => {
                    if (fixed.required && fixed.required.includes(key)) {
                      return;
                    }
                    const includesKey = copy.required && copy.required.includes(key);
                    if (copy.properties && !includesKey) {
                      delete copy.properties[key];
                    }
                    if (rootSchema && rootSchema.properties) {
                      delete rootSchema.properties[key];
                    }
                  });
                }
              });
              return copy;
            }
          };
        }
        Object.keys(sub).forEach((prop) => {
          if ((Array.isArray(sub[prop]) || typeof sub[prop] === "object") && !utils_default.isKey(prop)) {
            sub[prop] = recursiveUtil.resolveSchema(sub[prop], prop, rootPath.concat(prop));
          }
        });
        if (rootPath) {
          const lastProp = rootPath[rootPath.length - 1];
          if (lastProp === "properties" || lastProp === "items") {
            return sub;
          }
        }
        return container2.wrap(sub);
      };
      return recursiveUtil;
    };
    buildResolveSchema_default = buildResolveSchema;
  }
});

// src/lib/core/run.mjs
function pick2(data) {
  return Array.isArray(data) ? random_default.pick(data) : data;
}
function cycle(data, reverse) {
  if (!Array.isArray(data)) {
    return data;
  }
  const value = reverse ? data.pop() : data.shift();
  if (reverse) {
    data.unshift(value);
  } else {
    data.push(value);
  }
  return value;
}
function resolve(obj, data, values, property) {
  if (!obj || typeof obj !== "object") {
    return obj;
  }
  if (!values) {
    values = {};
  }
  if (!data) {
    data = obj;
  }
  if (Array.isArray(obj)) {
    return obj.map((x) => resolve(x, data, values, property));
  }
  if (obj.jsonPath) {
    const { JSONPath: JSONPath2 } = getDependencies();
    const params = typeof obj.jsonPath !== "object" ? { path: obj.jsonPath } : obj.jsonPath;
    params.group = obj.group || params.group || property;
    params.cycle = obj.cycle || params.cycle || false;
    params.reverse = obj.reverse || params.reverse || false;
    params.count = obj.count || params.count || 1;
    const key = `${params.group}__${params.path}`;
    if (!values[key]) {
      if (params.count > 1) {
        values[key] = JSONPath2(params.path, data).slice(0, params.count);
      } else {
        values[key] = JSONPath2(params.path, data);
      }
    }
    if (params.cycle || params.reverse) {
      return cycle(values[key], params.reverse);
    }
    return pick2(values[key]);
  }
  Object.keys(obj).forEach((k) => {
    obj[k] = resolve(obj[k], data, values, k);
  });
  return obj;
}
function run(refs, schema, container2, synchronous) {
  if (Object.prototype.toString.call(schema) !== "[object Object]") {
    throw new Error(`Invalid input, expecting object but given ${typeof schema}`);
  }
  const refDepthMin = option_default("refDepthMin") || 0;
  const refDepthMax = option_default("refDepthMax") || 3;
  try {
    const { resolveSchema } = buildResolveSchema_default({
      refs,
      schema,
      container: container2,
      synchronous,
      refDepthMin,
      refDepthMax
    });
    const result = traverse_default(utils_default.clone(schema), [], resolveSchema);
    if (option_default("resolveJsonPath")) {
      return {
        value: resolve(result.value),
        context: result.context
      };
    }
    return result;
  } catch (e) {
    if (e.path) {
      throw new Error(`${e.message} in /${e.path.join("/")}`);
    } else {
      throw e;
    }
  }
}
var run_default;
var init_run = __esm({
  "src/lib/core/run.mjs"() {
    init_vendor();
    init_option();
    init_traverse();
    init_random();
    init_utils();
    init_buildResolveSchema();
    run_default = run;
  }
});

// src/lib/renderers/js.mjs
function renderJS(res) {
  return res.value;
}
var js_default;
var init_js = __esm({
  "src/lib/renderers/js.mjs"() {
    js_default = renderJS;
  }
});

// node_modules/yaml/dist/PlainValue-ec8e588e.js
var require_PlainValue_ec8e588e = __commonJS({
  "node_modules/yaml/dist/PlainValue-ec8e588e.js"(exports2) {
    "use strict";
    var Char = {
      ANCHOR: "&",
      COMMENT: "#",
      TAG: "!",
      DIRECTIVES_END: "-",
      DOCUMENT_END: "."
    };
    var Type = {
      ALIAS: "ALIAS",
      BLANK_LINE: "BLANK_LINE",
      BLOCK_FOLDED: "BLOCK_FOLDED",
      BLOCK_LITERAL: "BLOCK_LITERAL",
      COMMENT: "COMMENT",
      DIRECTIVE: "DIRECTIVE",
      DOCUMENT: "DOCUMENT",
      FLOW_MAP: "FLOW_MAP",
      FLOW_SEQ: "FLOW_SEQ",
      MAP: "MAP",
      MAP_KEY: "MAP_KEY",
      MAP_VALUE: "MAP_VALUE",
      PLAIN: "PLAIN",
      QUOTE_DOUBLE: "QUOTE_DOUBLE",
      QUOTE_SINGLE: "QUOTE_SINGLE",
      SEQ: "SEQ",
      SEQ_ITEM: "SEQ_ITEM"
    };
    var defaultTagPrefix = "tag:yaml.org,2002:";
    var defaultTags = {
      MAP: "tag:yaml.org,2002:map",
      SEQ: "tag:yaml.org,2002:seq",
      STR: "tag:yaml.org,2002:str"
    };
    function findLineStarts(src) {
      const ls = [0];
      let offset = src.indexOf("\n");
      while (offset !== -1) {
        offset += 1;
        ls.push(offset);
        offset = src.indexOf("\n", offset);
      }
      return ls;
    }
    function getSrcInfo(cst) {
      let lineStarts, src;
      if (typeof cst === "string") {
        lineStarts = findLineStarts(cst);
        src = cst;
      } else {
        if (Array.isArray(cst))
          cst = cst[0];
        if (cst && cst.context) {
          if (!cst.lineStarts)
            cst.lineStarts = findLineStarts(cst.context.src);
          lineStarts = cst.lineStarts;
          src = cst.context.src;
        }
      }
      return {
        lineStarts,
        src
      };
    }
    function getLinePos(offset, cst) {
      if (typeof offset !== "number" || offset < 0)
        return null;
      const {
        lineStarts,
        src
      } = getSrcInfo(cst);
      if (!lineStarts || !src || offset > src.length)
        return null;
      for (let i = 0; i < lineStarts.length; ++i) {
        const start = lineStarts[i];
        if (offset < start) {
          return {
            line: i,
            col: offset - lineStarts[i - 1] + 1
          };
        }
        if (offset === start)
          return {
            line: i + 1,
            col: 1
          };
      }
      const line = lineStarts.length;
      return {
        line,
        col: offset - lineStarts[line - 1] + 1
      };
    }
    function getLine(line, cst) {
      const {
        lineStarts,
        src
      } = getSrcInfo(cst);
      if (!lineStarts || !(line >= 1) || line > lineStarts.length)
        return null;
      const start = lineStarts[line - 1];
      let end = lineStarts[line];
      while (end && end > start && src[end - 1] === "\n")
        --end;
      return src.slice(start, end);
    }
    function getPrettyContext({
      start,
      end
    }, cst, maxWidth = 80) {
      let src = getLine(start.line, cst);
      if (!src)
        return null;
      let {
        col
      } = start;
      if (src.length > maxWidth) {
        if (col <= maxWidth - 10) {
          src = src.substr(0, maxWidth - 1) + "\u2026";
        } else {
          const halfWidth = Math.round(maxWidth / 2);
          if (src.length > col + halfWidth)
            src = src.substr(0, col + halfWidth - 1) + "\u2026";
          col -= src.length - maxWidth;
          src = "\u2026" + src.substr(1 - maxWidth);
        }
      }
      let errLen = 1;
      let errEnd = "";
      if (end) {
        if (end.line === start.line && col + (end.col - start.col) <= maxWidth + 1) {
          errLen = end.col - start.col;
        } else {
          errLen = Math.min(src.length + 1, maxWidth) - col;
          errEnd = "\u2026";
        }
      }
      const offset = col > 1 ? " ".repeat(col - 1) : "";
      const err = "^".repeat(errLen);
      return `${src}
${offset}${err}${errEnd}`;
    }
    var Range = class _Range {
      static copy(orig) {
        return new _Range(orig.start, orig.end);
      }
      constructor(start, end) {
        this.start = start;
        this.end = end || start;
      }
      isEmpty() {
        return typeof this.start !== "number" || !this.end || this.end <= this.start;
      }
      /**
       * Set `origStart` and `origEnd` to point to the original source range for
       * this node, which may differ due to dropped CR characters.
       *
       * @param {number[]} cr - Positions of dropped CR characters
       * @param {number} offset - Starting index of `cr` from the last call
       * @returns {number} - The next offset, matching the one found for `origStart`
       */
      setOrigRange(cr, offset) {
        const {
          start,
          end
        } = this;
        if (cr.length === 0 || end <= cr[0]) {
          this.origStart = start;
          this.origEnd = end;
          return offset;
        }
        let i = offset;
        while (i < cr.length) {
          if (cr[i] > start)
            break;
          else
            ++i;
        }
        this.origStart = start + i;
        const nextOffset = i;
        while (i < cr.length) {
          if (cr[i] >= end)
            break;
          else
            ++i;
        }
        this.origEnd = end + i;
        return nextOffset;
      }
    };
    var Node2 = class _Node {
      static addStringTerminator(src, offset, str) {
        if (str[str.length - 1] === "\n")
          return str;
        const next = _Node.endOfWhiteSpace(src, offset);
        return next >= src.length || src[next] === "\n" ? str + "\n" : str;
      }
      // ^(---|...)
      static atDocumentBoundary(src, offset, sep) {
        const ch0 = src[offset];
        if (!ch0)
          return true;
        const prev = src[offset - 1];
        if (prev && prev !== "\n")
          return false;
        if (sep) {
          if (ch0 !== sep)
            return false;
        } else {
          if (ch0 !== Char.DIRECTIVES_END && ch0 !== Char.DOCUMENT_END)
            return false;
        }
        const ch1 = src[offset + 1];
        const ch2 = src[offset + 2];
        if (ch1 !== ch0 || ch2 !== ch0)
          return false;
        const ch3 = src[offset + 3];
        return !ch3 || ch3 === "\n" || ch3 === "	" || ch3 === " ";
      }
      static endOfIdentifier(src, offset) {
        let ch = src[offset];
        const isVerbatim = ch === "<";
        const notOk = isVerbatim ? ["\n", "	", " ", ">"] : ["\n", "	", " ", "[", "]", "{", "}", ","];
        while (ch && notOk.indexOf(ch) === -1)
          ch = src[offset += 1];
        if (isVerbatim && ch === ">")
          offset += 1;
        return offset;
      }
      static endOfIndent(src, offset) {
        let ch = src[offset];
        while (ch === " ")
          ch = src[offset += 1];
        return offset;
      }
      static endOfLine(src, offset) {
        let ch = src[offset];
        while (ch && ch !== "\n")
          ch = src[offset += 1];
        return offset;
      }
      static endOfWhiteSpace(src, offset) {
        let ch = src[offset];
        while (ch === "	" || ch === " ")
          ch = src[offset += 1];
        return offset;
      }
      static startOfLine(src, offset) {
        let ch = src[offset - 1];
        if (ch === "\n")
          return offset;
        while (ch && ch !== "\n")
          ch = src[offset -= 1];
        return offset + 1;
      }
      /**
       * End of indentation, or null if the line's indent level is not more
       * than `indent`
       *
       * @param {string} src
       * @param {number} indent
       * @param {number} lineStart
       * @returns {?number}
       */
      static endOfBlockIndent(src, indent, lineStart) {
        const inEnd = _Node.endOfIndent(src, lineStart);
        if (inEnd > lineStart + indent) {
          return inEnd;
        } else {
          const wsEnd = _Node.endOfWhiteSpace(src, inEnd);
          const ch = src[wsEnd];
          if (!ch || ch === "\n")
            return wsEnd;
        }
        return null;
      }
      static atBlank(src, offset, endAsBlank) {
        const ch = src[offset];
        return ch === "\n" || ch === "	" || ch === " " || endAsBlank && !ch;
      }
      static nextNodeIsIndented(ch, indentDiff, indicatorAsIndent) {
        if (!ch || indentDiff < 0)
          return false;
        if (indentDiff > 0)
          return true;
        return indicatorAsIndent && ch === "-";
      }
      // should be at line or string end, or at next non-whitespace char
      static normalizeOffset(src, offset) {
        const ch = src[offset];
        return !ch ? offset : ch !== "\n" && src[offset - 1] === "\n" ? offset - 1 : _Node.endOfWhiteSpace(src, offset);
      }
      // fold single newline into space, multiple newlines to N - 1 newlines
      // presumes src[offset] === '\n'
      static foldNewline(src, offset, indent) {
        let inCount = 0;
        let error = false;
        let fold = "";
        let ch = src[offset + 1];
        while (ch === " " || ch === "	" || ch === "\n") {
          switch (ch) {
            case "\n":
              inCount = 0;
              offset += 1;
              fold += "\n";
              break;
            case "	":
              if (inCount <= indent)
                error = true;
              offset = _Node.endOfWhiteSpace(src, offset + 2) - 1;
              break;
            case " ":
              inCount += 1;
              offset += 1;
              break;
          }
          ch = src[offset + 1];
        }
        if (!fold)
          fold = " ";
        if (ch && inCount <= indent)
          error = true;
        return {
          fold,
          offset,
          error
        };
      }
      constructor(type, props, context) {
        Object.defineProperty(this, "context", {
          value: context || null,
          writable: true
        });
        this.error = null;
        this.range = null;
        this.valueRange = null;
        this.props = props || [];
        this.type = type;
        this.value = null;
      }
      getPropValue(idx, key, skipKey) {
        if (!this.context)
          return null;
        const {
          src
        } = this.context;
        const prop = this.props[idx];
        return prop && src[prop.start] === key ? src.slice(prop.start + (skipKey ? 1 : 0), prop.end) : null;
      }
      get anchor() {
        for (let i = 0; i < this.props.length; ++i) {
          const anchor = this.getPropValue(i, Char.ANCHOR, true);
          if (anchor != null)
            return anchor;
        }
        return null;
      }
      get comment() {
        const comments = [];
        for (let i = 0; i < this.props.length; ++i) {
          const comment = this.getPropValue(i, Char.COMMENT, true);
          if (comment != null)
            comments.push(comment);
        }
        return comments.length > 0 ? comments.join("\n") : null;
      }
      commentHasRequiredWhitespace(start) {
        const {
          src
        } = this.context;
        if (this.header && start === this.header.end)
          return false;
        if (!this.valueRange)
          return false;
        const {
          end
        } = this.valueRange;
        return start !== end || _Node.atBlank(src, end - 1);
      }
      get hasComment() {
        if (this.context) {
          const {
            src
          } = this.context;
          for (let i = 0; i < this.props.length; ++i) {
            if (src[this.props[i].start] === Char.COMMENT)
              return true;
          }
        }
        return false;
      }
      get hasProps() {
        if (this.context) {
          const {
            src
          } = this.context;
          for (let i = 0; i < this.props.length; ++i) {
            if (src[this.props[i].start] !== Char.COMMENT)
              return true;
          }
        }
        return false;
      }
      get includesTrailingLines() {
        return false;
      }
      get jsonLike() {
        const jsonLikeTypes = [Type.FLOW_MAP, Type.FLOW_SEQ, Type.QUOTE_DOUBLE, Type.QUOTE_SINGLE];
        return jsonLikeTypes.indexOf(this.type) !== -1;
      }
      get rangeAsLinePos() {
        if (!this.range || !this.context)
          return void 0;
        const start = getLinePos(this.range.start, this.context.root);
        if (!start)
          return void 0;
        const end = getLinePos(this.range.end, this.context.root);
        return {
          start,
          end
        };
      }
      get rawValue() {
        if (!this.valueRange || !this.context)
          return null;
        const {
          start,
          end
        } = this.valueRange;
        return this.context.src.slice(start, end);
      }
      get tag() {
        for (let i = 0; i < this.props.length; ++i) {
          const tag = this.getPropValue(i, Char.TAG, false);
          if (tag != null) {
            if (tag[1] === "<") {
              return {
                verbatim: tag.slice(2, -1)
              };
            } else {
              const [_, handle, suffix] = tag.match(/^(.*!)([^!]*)$/);
              return {
                handle,
                suffix
              };
            }
          }
        }
        return null;
      }
      get valueRangeContainsNewline() {
        if (!this.valueRange || !this.context)
          return false;
        const {
          start,
          end
        } = this.valueRange;
        const {
          src
        } = this.context;
        for (let i = start; i < end; ++i) {
          if (src[i] === "\n")
            return true;
        }
        return false;
      }
      parseComment(start) {
        const {
          src
        } = this.context;
        if (src[start] === Char.COMMENT) {
          const end = _Node.endOfLine(src, start + 1);
          const commentRange = new Range(start, end);
          this.props.push(commentRange);
          return end;
        }
        return start;
      }
      /**
       * Populates the `origStart` and `origEnd` values of all ranges for this
       * node. Extended by child classes to handle descendant nodes.
       *
       * @param {number[]} cr - Positions of dropped CR characters
       * @param {number} offset - Starting index of `cr` from the last call
       * @returns {number} - The next offset, matching the one found for `origStart`
       */
      setOrigRanges(cr, offset) {
        if (this.range)
          offset = this.range.setOrigRange(cr, offset);
        if (this.valueRange)
          this.valueRange.setOrigRange(cr, offset);
        this.props.forEach((prop) => prop.setOrigRange(cr, offset));
        return offset;
      }
      toString() {
        const {
          context: {
            src
          },
          range,
          value
        } = this;
        if (value != null)
          return value;
        const str = src.slice(range.start, range.end);
        return _Node.addStringTerminator(src, range.end, str);
      }
    };
    var YAMLError = class extends Error {
      constructor(name, source, message) {
        if (!message || !(source instanceof Node2))
          throw new Error(`Invalid arguments for new ${name}`);
        super();
        this.name = name;
        this.message = message;
        this.source = source;
      }
      makePretty() {
        if (!this.source)
          return;
        this.nodeType = this.source.type;
        const cst = this.source.context && this.source.context.root;
        if (typeof this.offset === "number") {
          this.range = new Range(this.offset, this.offset + 1);
          const start = cst && getLinePos(this.offset, cst);
          if (start) {
            const end = {
              line: start.line,
              col: start.col + 1
            };
            this.linePos = {
              start,
              end
            };
          }
          delete this.offset;
        } else {
          this.range = this.source.range;
          this.linePos = this.source.rangeAsLinePos;
        }
        if (this.linePos) {
          const {
            line,
            col
          } = this.linePos.start;
          this.message += ` at line ${line}, column ${col}`;
          const ctx = cst && getPrettyContext(this.linePos, cst);
          if (ctx)
            this.message += `:

${ctx}
`;
        }
        delete this.source;
      }
    };
    var YAMLReferenceError = class extends YAMLError {
      constructor(source, message) {
        super("YAMLReferenceError", source, message);
      }
    };
    var YAMLSemanticError = class extends YAMLError {
      constructor(source, message) {
        super("YAMLSemanticError", source, message);
      }
    };
    var YAMLSyntaxError = class extends YAMLError {
      constructor(source, message) {
        super("YAMLSyntaxError", source, message);
      }
    };
    var YAMLWarning = class extends YAMLError {
      constructor(source, message) {
        super("YAMLWarning", source, message);
      }
    };
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var PlainValue = class _PlainValue extends Node2 {
      static endOfLine(src, start, inFlow) {
        let ch = src[start];
        let offset = start;
        while (ch && ch !== "\n") {
          if (inFlow && (ch === "[" || ch === "]" || ch === "{" || ch === "}" || ch === ","))
            break;
          const next = src[offset + 1];
          if (ch === ":" && (!next || next === "\n" || next === "	" || next === " " || inFlow && next === ","))
            break;
          if ((ch === " " || ch === "	") && next === "#")
            break;
          offset += 1;
          ch = next;
        }
        return offset;
      }
      get strValue() {
        if (!this.valueRange || !this.context)
          return null;
        let {
          start,
          end
        } = this.valueRange;
        const {
          src
        } = this.context;
        let ch = src[end - 1];
        while (start < end && (ch === "\n" || ch === "	" || ch === " "))
          ch = src[--end - 1];
        let str = "";
        for (let i = start; i < end; ++i) {
          const ch2 = src[i];
          if (ch2 === "\n") {
            const {
              fold,
              offset
            } = Node2.foldNewline(src, i, -1);
            str += fold;
            i = offset;
          } else if (ch2 === " " || ch2 === "	") {
            const wsStart = i;
            let next = src[i + 1];
            while (i < end && (next === " " || next === "	")) {
              i += 1;
              next = src[i + 1];
            }
            if (next !== "\n")
              str += i > wsStart ? src.slice(wsStart, i + 1) : ch2;
          } else {
            str += ch2;
          }
        }
        const ch0 = src[start];
        switch (ch0) {
          case "	": {
            const msg = "Plain value cannot start with a tab character";
            const errors = [new YAMLSemanticError(this, msg)];
            return {
              errors,
              str
            };
          }
          case "@":
          case "`": {
            const msg = `Plain value cannot start with reserved character ${ch0}`;
            const errors = [new YAMLSemanticError(this, msg)];
            return {
              errors,
              str
            };
          }
          default:
            return str;
        }
      }
      parseBlockValue(start) {
        const {
          indent,
          inFlow,
          src
        } = this.context;
        let offset = start;
        let valueEnd = start;
        for (let ch = src[offset]; ch === "\n"; ch = src[offset]) {
          if (Node2.atDocumentBoundary(src, offset + 1))
            break;
          const end = Node2.endOfBlockIndent(src, indent, offset + 1);
          if (end === null || src[end] === "#")
            break;
          if (src[end] === "\n") {
            offset = end;
          } else {
            valueEnd = _PlainValue.endOfLine(src, end, inFlow);
            offset = valueEnd;
          }
        }
        if (this.valueRange.isEmpty())
          this.valueRange.start = start;
        this.valueRange.end = valueEnd;
        return valueEnd;
      }
      /**
       * Parses a plain value from the source
       *
       * Accepted forms are:
       * ```
       * #comment
       *
       * first line
       *
       * first line #comment
       *
       * first line
       * block
       * lines
       *
       * #comment
       * block
       * lines
       * ```
       * where block lines are empty or have an indent level greater than `indent`.
       *
       * @param {ParseContext} context
       * @param {number} start - Index of first character
       * @returns {number} - Index of the character after this scalar, may be `\n`
       */
      parse(context, start) {
        this.context = context;
        const {
          inFlow,
          src
        } = context;
        let offset = start;
        const ch = src[offset];
        if (ch && ch !== "#" && ch !== "\n") {
          offset = _PlainValue.endOfLine(src, start, inFlow);
        }
        this.valueRange = new Range(start, offset);
        offset = Node2.endOfWhiteSpace(src, offset);
        offset = this.parseComment(offset);
        if (!this.hasComment || this.valueRange.isEmpty()) {
          offset = this.parseBlockValue(offset);
        }
        return offset;
      }
    };
    exports2.Char = Char;
    exports2.Node = Node2;
    exports2.PlainValue = PlainValue;
    exports2.Range = Range;
    exports2.Type = Type;
    exports2.YAMLError = YAMLError;
    exports2.YAMLReferenceError = YAMLReferenceError;
    exports2.YAMLSemanticError = YAMLSemanticError;
    exports2.YAMLSyntaxError = YAMLSyntaxError;
    exports2.YAMLWarning = YAMLWarning;
    exports2._defineProperty = _defineProperty;
    exports2.defaultTagPrefix = defaultTagPrefix;
    exports2.defaultTags = defaultTags;
  }
});

// node_modules/yaml/dist/resolveSeq-d03cb037.js
var require_resolveSeq_d03cb037 = __commonJS({
  "node_modules/yaml/dist/resolveSeq-d03cb037.js"(exports2) {
    "use strict";
    var PlainValue = require_PlainValue_ec8e588e();
    function addCommentBefore(str, indent, comment) {
      if (!comment)
        return str;
      const cc = comment.replace(/[\s\S]^/gm, `$&${indent}#`);
      return `#${cc}
${indent}${str}`;
    }
    function addComment(str, indent, comment) {
      return !comment ? str : comment.indexOf("\n") === -1 ? `${str} #${comment}` : `${str}
` + comment.replace(/^/gm, `${indent || ""}#`);
    }
    var Node2 = class {
    };
    function toJSON(value, arg, ctx) {
      if (Array.isArray(value))
        return value.map((v, i) => toJSON(v, String(i), ctx));
      if (value && typeof value.toJSON === "function") {
        const anchor = ctx && ctx.anchors && ctx.anchors.get(value);
        if (anchor)
          ctx.onCreate = (res2) => {
            anchor.res = res2;
            delete ctx.onCreate;
          };
        const res = value.toJSON(arg, ctx);
        if (anchor && ctx.onCreate)
          ctx.onCreate(res);
        return res;
      }
      if ((!ctx || !ctx.keep) && typeof value === "bigint")
        return Number(value);
      return value;
    }
    var Scalar2 = class extends Node2 {
      constructor(value) {
        super();
        this.value = value;
      }
      toJSON(arg, ctx) {
        return ctx && ctx.keep ? this.value : toJSON(this.value, arg, ctx);
      }
      toString() {
        return String(this.value);
      }
    };
    function collectionFromPath(schema, path, value) {
      let v = value;
      for (let i = path.length - 1; i >= 0; --i) {
        const k = path[i];
        if (Number.isInteger(k) && k >= 0) {
          const a = [];
          a[k] = v;
          v = a;
        } else {
          const o = {};
          Object.defineProperty(o, k, {
            value: v,
            writable: true,
            enumerable: true,
            configurable: true
          });
          v = o;
        }
      }
      return schema.createNode(v, false);
    }
    var isEmptyPath = (path) => path == null || typeof path === "object" && path[Symbol.iterator]().next().done;
    var Collection2 = class _Collection extends Node2 {
      constructor(schema) {
        super();
        PlainValue._defineProperty(this, "items", []);
        this.schema = schema;
      }
      addIn(path, value) {
        if (isEmptyPath(path))
          this.add(value);
        else {
          const [key, ...rest] = path;
          const node = this.get(key, true);
          if (node instanceof _Collection)
            node.addIn(rest, value);
          else if (node === void 0 && this.schema)
            this.set(key, collectionFromPath(this.schema, rest, value));
          else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
      }
      deleteIn([key, ...rest]) {
        if (rest.length === 0)
          return this.delete(key);
        const node = this.get(key, true);
        if (node instanceof _Collection)
          return node.deleteIn(rest);
        else
          throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
      getIn([key, ...rest], keepScalar) {
        const node = this.get(key, true);
        if (rest.length === 0)
          return !keepScalar && node instanceof Scalar2 ? node.value : node;
        else
          return node instanceof _Collection ? node.getIn(rest, keepScalar) : void 0;
      }
      hasAllNullValues() {
        return this.items.every((node) => {
          if (!node || node.type !== "PAIR")
            return false;
          const n = node.value;
          return n == null || n instanceof Scalar2 && n.value == null && !n.commentBefore && !n.comment && !n.tag;
        });
      }
      hasIn([key, ...rest]) {
        if (rest.length === 0)
          return this.has(key);
        const node = this.get(key, true);
        return node instanceof _Collection ? node.hasIn(rest) : false;
      }
      setIn([key, ...rest], value) {
        if (rest.length === 0) {
          this.set(key, value);
        } else {
          const node = this.get(key, true);
          if (node instanceof _Collection)
            node.setIn(rest, value);
          else if (node === void 0 && this.schema)
            this.set(key, collectionFromPath(this.schema, rest, value));
          else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
      }
      // overridden in implementations
      /* istanbul ignore next */
      toJSON() {
        return null;
      }
      toString(ctx, {
        blockItem,
        flowChars,
        isMap,
        itemIndent
      }, onComment, onChompKeep) {
        const {
          indent,
          indentStep,
          stringify
        } = ctx;
        const inFlow = this.type === PlainValue.Type.FLOW_MAP || this.type === PlainValue.Type.FLOW_SEQ || ctx.inFlow;
        if (inFlow)
          itemIndent += indentStep;
        const allNullValues = isMap && this.hasAllNullValues();
        ctx = Object.assign({}, ctx, {
          allNullValues,
          indent: itemIndent,
          inFlow,
          type: null
        });
        let chompKeep = false;
        let hasItemWithNewLine = false;
        const nodes = this.items.reduce((nodes2, item, i) => {
          let comment;
          if (item) {
            if (!chompKeep && item.spaceBefore)
              nodes2.push({
                type: "comment",
                str: ""
              });
            if (item.commentBefore)
              item.commentBefore.match(/^.*$/gm).forEach((line) => {
                nodes2.push({
                  type: "comment",
                  str: `#${line}`
                });
              });
            if (item.comment)
              comment = item.comment;
            if (inFlow && (!chompKeep && item.spaceBefore || item.commentBefore || item.comment || item.key && (item.key.commentBefore || item.key.comment) || item.value && (item.value.commentBefore || item.value.comment)))
              hasItemWithNewLine = true;
          }
          chompKeep = false;
          let str2 = stringify(item, ctx, () => comment = null, () => chompKeep = true);
          if (inFlow && !hasItemWithNewLine && str2.includes("\n"))
            hasItemWithNewLine = true;
          if (inFlow && i < this.items.length - 1)
            str2 += ",";
          str2 = addComment(str2, itemIndent, comment);
          if (chompKeep && (comment || inFlow))
            chompKeep = false;
          nodes2.push({
            type: "item",
            str: str2
          });
          return nodes2;
        }, []);
        let str;
        if (nodes.length === 0) {
          str = flowChars.start + flowChars.end;
        } else if (inFlow) {
          const {
            start,
            end
          } = flowChars;
          const strings = nodes.map((n) => n.str);
          if (hasItemWithNewLine || strings.reduce((sum, str2) => sum + str2.length + 2, 2) > _Collection.maxFlowStringSingleLineLength) {
            str = start;
            for (const s of strings) {
              str += s ? `
${indentStep}${indent}${s}` : "\n";
            }
            str += `
${indent}${end}`;
          } else {
            str = `${start} ${strings.join(" ")} ${end}`;
          }
        } else {
          const strings = nodes.map(blockItem);
          str = strings.shift();
          for (const s of strings)
            str += s ? `
${indent}${s}` : "\n";
        }
        if (this.comment) {
          str += "\n" + this.comment.replace(/^/gm, `${indent}#`);
          if (onComment)
            onComment();
        } else if (chompKeep && onChompKeep)
          onChompKeep();
        return str;
      }
    };
    PlainValue._defineProperty(Collection2, "maxFlowStringSingleLineLength", 60);
    function asItemIndex(key) {
      let idx = key instanceof Scalar2 ? key.value : key;
      if (idx && typeof idx === "string")
        idx = Number(idx);
      return Number.isInteger(idx) && idx >= 0 ? idx : null;
    }
    var YAMLSeq2 = class extends Collection2 {
      add(value) {
        this.items.push(value);
      }
      delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
          return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
      }
      get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
          return void 0;
        const it = this.items[idx];
        return !keepScalar && it instanceof Scalar2 ? it.value : it;
      }
      has(key) {
        const idx = asItemIndex(key);
        return typeof idx === "number" && idx < this.items.length;
      }
      set(key, value) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
          throw new Error(`Expected a valid index, not ${key}.`);
        this.items[idx] = value;
      }
      toJSON(_, ctx) {
        const seq = [];
        if (ctx && ctx.onCreate)
          ctx.onCreate(seq);
        let i = 0;
        for (const item of this.items)
          seq.push(toJSON(item, String(i++), ctx));
        return seq;
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx)
          return JSON.stringify(this);
        return super.toString(ctx, {
          blockItem: (n) => n.type === "comment" ? n.str : `- ${n.str}`,
          flowChars: {
            start: "[",
            end: "]"
          },
          isMap: false,
          itemIndent: (ctx.indent || "") + "  "
        }, onComment, onChompKeep);
      }
    };
    var stringifyKey = (key, jsKey, ctx) => {
      if (jsKey === null)
        return "";
      if (typeof jsKey !== "object")
        return String(jsKey);
      if (key instanceof Node2 && ctx && ctx.doc)
        return key.toString({
          anchors: /* @__PURE__ */ Object.create(null),
          doc: ctx.doc,
          indent: "",
          indentStep: ctx.indentStep,
          inFlow: true,
          inStringifyKey: true,
          stringify: ctx.stringify
        });
      return JSON.stringify(jsKey);
    };
    var Pair2 = class _Pair extends Node2 {
      constructor(key, value = null) {
        super();
        this.key = key;
        this.value = value;
        this.type = _Pair.Type.PAIR;
      }
      get commentBefore() {
        return this.key instanceof Node2 ? this.key.commentBefore : void 0;
      }
      set commentBefore(cb) {
        if (this.key == null)
          this.key = new Scalar2(null);
        if (this.key instanceof Node2)
          this.key.commentBefore = cb;
        else {
          const msg = "Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node.";
          throw new Error(msg);
        }
      }
      addToJSMap(ctx, map) {
        const key = toJSON(this.key, "", ctx);
        if (map instanceof Map) {
          const value = toJSON(this.value, key, ctx);
          map.set(key, value);
        } else if (map instanceof Set) {
          map.add(key);
        } else {
          const stringKey = stringifyKey(this.key, key, ctx);
          const value = toJSON(this.value, stringKey, ctx);
          if (stringKey in map)
            Object.defineProperty(map, stringKey, {
              value,
              writable: true,
              enumerable: true,
              configurable: true
            });
          else
            map[stringKey] = value;
        }
        return map;
      }
      toJSON(_, ctx) {
        const pair = ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
        return this.addToJSMap(ctx, pair);
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx || !ctx.doc)
          return JSON.stringify(this);
        const {
          indent: indentSize,
          indentSeq,
          simpleKeys
        } = ctx.doc.options;
        let {
          key,
          value
        } = this;
        let keyComment = key instanceof Node2 && key.comment;
        if (simpleKeys) {
          if (keyComment) {
            throw new Error("With simple keys, key nodes cannot have comments");
          }
          if (key instanceof Collection2) {
            const msg = "With simple keys, collection cannot be used as a key value";
            throw new Error(msg);
          }
        }
        let explicitKey = !simpleKeys && (!key || keyComment || (key instanceof Node2 ? key instanceof Collection2 || key.type === PlainValue.Type.BLOCK_FOLDED || key.type === PlainValue.Type.BLOCK_LITERAL : typeof key === "object"));
        const {
          doc,
          indent,
          indentStep,
          stringify
        } = ctx;
        ctx = Object.assign({}, ctx, {
          implicitKey: !explicitKey,
          indent: indent + indentStep
        });
        let chompKeep = false;
        let str = stringify(key, ctx, () => keyComment = null, () => chompKeep = true);
        str = addComment(str, ctx.indent, keyComment);
        if (!explicitKey && str.length > 1024) {
          if (simpleKeys)
            throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
          explicitKey = true;
        }
        if (ctx.allNullValues && !simpleKeys) {
          if (this.comment) {
            str = addComment(str, ctx.indent, this.comment);
            if (onComment)
              onComment();
          } else if (chompKeep && !keyComment && onChompKeep)
            onChompKeep();
          return ctx.inFlow && !explicitKey ? str : `? ${str}`;
        }
        str = explicitKey ? `? ${str}
${indent}:` : `${str}:`;
        if (this.comment) {
          str = addComment(str, ctx.indent, this.comment);
          if (onComment)
            onComment();
        }
        let vcb = "";
        let valueComment = null;
        if (value instanceof Node2) {
          if (value.spaceBefore)
            vcb = "\n";
          if (value.commentBefore) {
            const cs = value.commentBefore.replace(/^/gm, `${ctx.indent}#`);
            vcb += `
${cs}`;
          }
          valueComment = value.comment;
        } else if (value && typeof value === "object") {
          value = doc.schema.createNode(value, true);
        }
        ctx.implicitKey = false;
        if (!explicitKey && !this.comment && value instanceof Scalar2)
          ctx.indentAtStart = str.length + 1;
        chompKeep = false;
        if (!indentSeq && indentSize >= 2 && !ctx.inFlow && !explicitKey && value instanceof YAMLSeq2 && value.type !== PlainValue.Type.FLOW_SEQ && !value.tag && !doc.anchors.getName(value)) {
          ctx.indent = ctx.indent.substr(2);
        }
        const valueStr = stringify(value, ctx, () => valueComment = null, () => chompKeep = true);
        let ws = " ";
        if (vcb || this.comment) {
          ws = `${vcb}
${ctx.indent}`;
        } else if (!explicitKey && value instanceof Collection2) {
          const flow = valueStr[0] === "[" || valueStr[0] === "{";
          if (!flow || valueStr.includes("\n"))
            ws = `
${ctx.indent}`;
        } else if (valueStr[0] === "\n")
          ws = "";
        if (chompKeep && !valueComment && onChompKeep)
          onChompKeep();
        return addComment(str + ws + valueStr, ctx.indent, valueComment);
      }
    };
    PlainValue._defineProperty(Pair2, "Type", {
      PAIR: "PAIR",
      MERGE_PAIR: "MERGE_PAIR"
    });
    var getAliasCount = (node, anchors) => {
      if (node instanceof Alias2) {
        const anchor = anchors.get(node.source);
        return anchor.count * anchor.aliasCount;
      } else if (node instanceof Collection2) {
        let count = 0;
        for (const item of node.items) {
          const c = getAliasCount(item, anchors);
          if (c > count)
            count = c;
        }
        return count;
      } else if (node instanceof Pair2) {
        const kc = getAliasCount(node.key, anchors);
        const vc = getAliasCount(node.value, anchors);
        return Math.max(kc, vc);
      }
      return 1;
    };
    var Alias2 = class _Alias extends Node2 {
      static stringify({
        range,
        source
      }, {
        anchors,
        doc,
        implicitKey,
        inStringifyKey
      }) {
        let anchor = Object.keys(anchors).find((a) => anchors[a] === source);
        if (!anchor && inStringifyKey)
          anchor = doc.anchors.getName(source) || doc.anchors.newName();
        if (anchor)
          return `*${anchor}${implicitKey ? " " : ""}`;
        const msg = doc.anchors.getName(source) ? "Alias node must be after source node" : "Source node not found for alias node";
        throw new Error(`${msg} [${range}]`);
      }
      constructor(source) {
        super();
        this.source = source;
        this.type = PlainValue.Type.ALIAS;
      }
      set tag(t) {
        throw new Error("Alias nodes cannot have tags");
      }
      toJSON(arg, ctx) {
        if (!ctx)
          return toJSON(this.source, arg, ctx);
        const {
          anchors,
          maxAliasCount
        } = ctx;
        const anchor = anchors.get(this.source);
        if (!anchor || anchor.res === void 0) {
          const msg = "This should not happen: Alias anchor was not resolved?";
          if (this.cstNode)
            throw new PlainValue.YAMLReferenceError(this.cstNode, msg);
          else
            throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
          anchor.count += 1;
          if (anchor.aliasCount === 0)
            anchor.aliasCount = getAliasCount(this.source, anchors);
          if (anchor.count * anchor.aliasCount > maxAliasCount) {
            const msg = "Excessive alias count indicates a resource exhaustion attack";
            if (this.cstNode)
              throw new PlainValue.YAMLReferenceError(this.cstNode, msg);
            else
              throw new ReferenceError(msg);
          }
        }
        return anchor.res;
      }
      // Only called when stringifying an alias mapping key while constructing
      // Object output.
      toString(ctx) {
        return _Alias.stringify(this, ctx);
      }
    };
    PlainValue._defineProperty(Alias2, "default", true);
    function findPair(items, key) {
      const k = key instanceof Scalar2 ? key.value : key;
      for (const it of items) {
        if (it instanceof Pair2) {
          if (it.key === key || it.key === k)
            return it;
          if (it.key && it.key.value === k)
            return it;
        }
      }
      return void 0;
    }
    var YAMLMap2 = class extends Collection2 {
      add(pair, overwrite) {
        if (!pair)
          pair = new Pair2(pair);
        else if (!(pair instanceof Pair2))
          pair = new Pair2(pair.key || pair, pair.value);
        const prev = findPair(this.items, pair.key);
        const sortEntries = this.schema && this.schema.sortMapEntries;
        if (prev) {
          if (overwrite)
            prev.value = pair.value;
          else
            throw new Error(`Key ${pair.key} already set`);
        } else if (sortEntries) {
          const i = this.items.findIndex((item) => sortEntries(pair, item) < 0);
          if (i === -1)
            this.items.push(pair);
          else
            this.items.splice(i, 0, pair);
        } else {
          this.items.push(pair);
        }
      }
      delete(key) {
        const it = findPair(this.items, key);
        if (!it)
          return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
      }
      get(key, keepScalar) {
        const it = findPair(this.items, key);
        const node = it && it.value;
        return !keepScalar && node instanceof Scalar2 ? node.value : node;
      }
      has(key) {
        return !!findPair(this.items, key);
      }
      set(key, value) {
        this.add(new Pair2(key, value), true);
      }
      /**
       * @param {*} arg ignored
       * @param {*} ctx Conversion context, originally set in Document#toJSON()
       * @param {Class} Type If set, forces the returned collection type
       * @returns {*} Instance of Type, Map, or Object
       */
      toJSON(_, ctx, Type) {
        const map = Type ? new Type() : ctx && ctx.mapAsMap ? /* @__PURE__ */ new Map() : {};
        if (ctx && ctx.onCreate)
          ctx.onCreate(map);
        for (const item of this.items)
          item.addToJSMap(ctx, map);
        return map;
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx)
          return JSON.stringify(this);
        for (const item of this.items) {
          if (!(item instanceof Pair2))
            throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        return super.toString(ctx, {
          blockItem: (n) => n.str,
          flowChars: {
            start: "{",
            end: "}"
          },
          isMap: true,
          itemIndent: ctx.indent || ""
        }, onComment, onChompKeep);
      }
    };
    var MERGE_KEY = "<<";
    var Merge2 = class extends Pair2 {
      constructor(pair) {
        if (pair instanceof Pair2) {
          let seq = pair.value;
          if (!(seq instanceof YAMLSeq2)) {
            seq = new YAMLSeq2();
            seq.items.push(pair.value);
            seq.range = pair.value.range;
          }
          super(pair.key, seq);
          this.range = pair.range;
        } else {
          super(new Scalar2(MERGE_KEY), new YAMLSeq2());
        }
        this.type = Pair2.Type.MERGE_PAIR;
      }
      // If the value associated with a merge key is a single mapping node, each of
      // its key/value pairs is inserted into the current mapping, unless the key
      // already exists in it. If the value associated with the merge key is a
      // sequence, then this sequence is expected to contain mapping nodes and each
      // of these nodes is merged in turn according to its order in the sequence.
      // Keys in mapping nodes earlier in the sequence override keys specified in
      // later mapping nodes. -- http://yaml.org/type/merge.html
      addToJSMap(ctx, map) {
        for (const {
          source
        } of this.value.items) {
          if (!(source instanceof YAMLMap2))
            throw new Error("Merge sources must be maps");
          const srcMap = source.toJSON(null, ctx, Map);
          for (const [key, value] of srcMap) {
            if (map instanceof Map) {
              if (!map.has(key))
                map.set(key, value);
            } else if (map instanceof Set) {
              map.add(key);
            } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
              Object.defineProperty(map, key, {
                value,
                writable: true,
                enumerable: true,
                configurable: true
              });
            }
          }
        }
        return map;
      }
      toString(ctx, onComment) {
        const seq = this.value;
        if (seq.items.length > 1)
          return super.toString(ctx, onComment);
        this.value = seq.items[0];
        const str = super.toString(ctx, onComment);
        this.value = seq;
        return str;
      }
    };
    var binaryOptions2 = {
      defaultType: PlainValue.Type.BLOCK_LITERAL,
      lineWidth: 76
    };
    var boolOptions2 = {
      trueStr: "true",
      falseStr: "false"
    };
    var intOptions2 = {
      asBigInt: false
    };
    var nullOptions2 = {
      nullStr: "null"
    };
    var strOptions2 = {
      defaultType: PlainValue.Type.PLAIN,
      doubleQuoted: {
        jsonEncoding: false,
        minMultiLineLength: 40
      },
      fold: {
        lineWidth: 80,
        minContentWidth: 20
      }
    };
    function resolveScalar(str, tags, scalarFallback) {
      for (const {
        format,
        test,
        resolve: resolve2
      } of tags) {
        if (test) {
          const match = str.match(test);
          if (match) {
            let res = resolve2.apply(null, match);
            if (!(res instanceof Scalar2))
              res = new Scalar2(res);
            if (format)
              res.format = format;
            return res;
          }
        }
      }
      if (scalarFallback)
        str = scalarFallback(str);
      return new Scalar2(str);
    }
    var FOLD_FLOW = "flow";
    var FOLD_BLOCK = "block";
    var FOLD_QUOTED = "quoted";
    var consumeMoreIndentedLines = (text, i) => {
      let ch = text[i + 1];
      while (ch === " " || ch === "	") {
        do {
          ch = text[i += 1];
        } while (ch && ch !== "\n");
        ch = text[i + 1];
      }
      return i;
    };
    function foldFlowLines(text, indent, mode, {
      indentAtStart,
      lineWidth = 80,
      minContentWidth = 20,
      onFold,
      onOverflow
    }) {
      if (!lineWidth || lineWidth < 0)
        return text;
      const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
      if (text.length <= endStep)
        return text;
      const folds = [];
      const escapedFolds = {};
      let end = lineWidth - indent.length;
      if (typeof indentAtStart === "number") {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
          folds.push(0);
        else
          end = lineWidth - indentAtStart;
      }
      let split = void 0;
      let prev = void 0;
      let overflow = false;
      let i = -1;
      let escStart = -1;
      let escEnd = -1;
      if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i);
        if (i !== -1)
          end = i + endStep;
      }
      for (let ch; ch = text[i += 1]; ) {
        if (mode === FOLD_QUOTED && ch === "\\") {
          escStart = i;
          switch (text[i + 1]) {
            case "x":
              i += 3;
              break;
            case "u":
              i += 5;
              break;
            case "U":
              i += 9;
              break;
            default:
              i += 1;
          }
          escEnd = i;
        }
        if (ch === "\n") {
          if (mode === FOLD_BLOCK)
            i = consumeMoreIndentedLines(text, i);
          end = i + endStep;
          split = void 0;
        } else {
          if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
            const next = text[i + 1];
            if (next && next !== " " && next !== "\n" && next !== "	")
              split = i;
          }
          if (i >= end) {
            if (split) {
              folds.push(split);
              end = split + endStep;
              split = void 0;
            } else if (mode === FOLD_QUOTED) {
              while (prev === " " || prev === "	") {
                prev = ch;
                ch = text[i += 1];
                overflow = true;
              }
              const j = i > escEnd + 1 ? i - 2 : escStart - 1;
              if (escapedFolds[j])
                return text;
              folds.push(j);
              escapedFolds[j] = true;
              end = j + endStep;
              split = void 0;
            } else {
              overflow = true;
            }
          }
        }
        prev = ch;
      }
      if (overflow && onOverflow)
        onOverflow();
      if (folds.length === 0)
        return text;
      if (onFold)
        onFold();
      let res = text.slice(0, folds[0]);
      for (let i2 = 0; i2 < folds.length; ++i2) {
        const fold = folds[i2];
        const end2 = folds[i2 + 1] || text.length;
        if (fold === 0)
          res = `
${indent}${text.slice(0, end2)}`;
        else {
          if (mode === FOLD_QUOTED && escapedFolds[fold])
            res += `${text[fold]}\\`;
          res += `
${indent}${text.slice(fold + 1, end2)}`;
        }
      }
      return res;
    }
    var getFoldOptions = ({
      indentAtStart
    }) => indentAtStart ? Object.assign({
      indentAtStart
    }, strOptions2.fold) : strOptions2.fold;
    var containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
    function lineLengthOverLimit(str, lineWidth, indentLength) {
      if (!lineWidth || lineWidth < 0)
        return false;
      const limit = lineWidth - indentLength;
      const strLen = str.length;
      if (strLen <= limit)
        return false;
      for (let i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === "\n") {
          if (i - start > limit)
            return true;
          start = i + 1;
          if (strLen - start <= limit)
            return false;
        }
      }
      return true;
    }
    function doubleQuotedString(value, ctx) {
      const {
        implicitKey
      } = ctx;
      const {
        jsonEncoding,
        minMultiLineLength
      } = strOptions2.doubleQuoted;
      const json = JSON.stringify(value);
      if (jsonEncoding)
        return json;
      const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
      let str = "";
      let start = 0;
      for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
          str += json.slice(start, i) + "\\ ";
          i += 1;
          start = i;
          ch = "\\";
        }
        if (ch === "\\")
          switch (json[i + 1]) {
            case "u":
              {
                str += json.slice(start, i);
                const code = json.substr(i + 2, 4);
                switch (code) {
                  case "0000":
                    str += "\\0";
                    break;
                  case "0007":
                    str += "\\a";
                    break;
                  case "000b":
                    str += "\\v";
                    break;
                  case "001b":
                    str += "\\e";
                    break;
                  case "0085":
                    str += "\\N";
                    break;
                  case "00a0":
                    str += "\\_";
                    break;
                  case "2028":
                    str += "\\L";
                    break;
                  case "2029":
                    str += "\\P";
                    break;
                  default:
                    if (code.substr(0, 2) === "00")
                      str += "\\x" + code.substr(2);
                    else
                      str += json.substr(i, 6);
                }
                i += 5;
                start = i + 1;
              }
              break;
            case "n":
              if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                i += 1;
              } else {
                str += json.slice(start, i) + "\n\n";
                while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                  str += "\n";
                  i += 2;
                }
                str += indent;
                if (json[i + 2] === " ")
                  str += "\\";
                i += 1;
                start = i + 1;
              }
              break;
            default:
              i += 1;
          }
      }
      str = start ? str + json.slice(start) : json;
      return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));
    }
    function singleQuotedString(value, ctx) {
      if (ctx.implicitKey) {
        if (/\n/.test(value))
          return doubleQuotedString(value, ctx);
      } else {
        if (/[ \t]\n|\n[ \t]/.test(value))
          return doubleQuotedString(value, ctx);
      }
      const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
      const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
      return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));
    }
    function blockString({
      comment,
      type,
      value
    }, ctx, onComment, onChompKeep) {
      if (/\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
        return doubleQuotedString(value, ctx);
      }
      const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
      const indentSize = indent ? "2" : "1";
      const literal = type === PlainValue.Type.BLOCK_FOLDED ? false : type === PlainValue.Type.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, strOptions2.fold.lineWidth, indent.length);
      let header = literal ? "|" : ">";
      if (!value)
        return header + "\n";
      let wsStart = "";
      let wsEnd = "";
      value = value.replace(/[\n\t ]*$/, (ws) => {
        const n = ws.indexOf("\n");
        if (n === -1) {
          header += "-";
        } else if (value === ws || n !== ws.length - 1) {
          header += "+";
          if (onChompKeep)
            onChompKeep();
        }
        wsEnd = ws.replace(/\n$/, "");
        return "";
      }).replace(/^[\n ]*/, (ws) => {
        if (ws.indexOf(" ") !== -1)
          header += indentSize;
        const m = ws.match(/ +$/);
        if (m) {
          wsStart = ws.slice(0, -m[0].length);
          return m[0];
        } else {
          wsStart = ws;
          return "";
        }
      });
      if (wsEnd)
        wsEnd = wsEnd.replace(/\n+(?!\n|$)/g, `$&${indent}`);
      if (wsStart)
        wsStart = wsStart.replace(/\n+/g, `$&${indent}`);
      if (comment) {
        header += " #" + comment.replace(/ ?[\r\n]+/g, " ");
        if (onComment)
          onComment();
      }
      if (!value)
        return `${header}${indentSize}
${indent}${wsEnd}`;
      if (literal) {
        value = value.replace(/\n+/g, `$&${indent}`);
        return `${header}
${indent}${wsStart}${value}${wsEnd}`;
      }
      value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
      const body = foldFlowLines(`${wsStart}${value}${wsEnd}`, indent, FOLD_BLOCK, strOptions2.fold);
      return `${header}
${indent}${body}`;
    }
    function plainString(item, ctx, onComment, onChompKeep) {
      const {
        comment,
        type,
        value
      } = item;
      const {
        actualString,
        implicitKey,
        indent,
        inFlow
      } = ctx;
      if (implicitKey && /[\n[\]{},]/.test(value) || inFlow && /[[\]{},]/.test(value)) {
        return doubleQuotedString(value, ctx);
      }
      if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
        return implicitKey || inFlow || value.indexOf("\n") === -1 ? value.indexOf('"') !== -1 && value.indexOf("'") === -1 ? singleQuotedString(value, ctx) : doubleQuotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
      }
      if (!implicitKey && !inFlow && type !== PlainValue.Type.PLAIN && value.indexOf("\n") !== -1) {
        return blockString(item, ctx, onComment, onChompKeep);
      }
      if (indent === "" && containsDocumentMarker(value)) {
        ctx.forceBlockIndent = true;
        return blockString(item, ctx, onComment, onChompKeep);
      }
      const str = value.replace(/\n+/g, `$&
${indent}`);
      if (actualString) {
        const {
          tags
        } = ctx.doc.schema;
        const resolved = resolveScalar(str, tags, tags.scalarFallback).value;
        if (typeof resolved !== "string")
          return doubleQuotedString(value, ctx);
      }
      const body = implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));
      if (comment && !inFlow && (body.indexOf("\n") !== -1 || comment.indexOf("\n") !== -1)) {
        if (onComment)
          onComment();
        return addCommentBefore(body, indent, comment);
      }
      return body;
    }
    function stringifyString(item, ctx, onComment, onChompKeep) {
      const {
        defaultType
      } = strOptions2;
      const {
        implicitKey,
        inFlow
      } = ctx;
      let {
        type,
        value
      } = item;
      if (typeof value !== "string") {
        value = String(value);
        item = Object.assign({}, item, {
          value
        });
      }
      const _stringify = (_type) => {
        switch (_type) {
          case PlainValue.Type.BLOCK_FOLDED:
          case PlainValue.Type.BLOCK_LITERAL:
            return blockString(item, ctx, onComment, onChompKeep);
          case PlainValue.Type.QUOTE_DOUBLE:
            return doubleQuotedString(value, ctx);
          case PlainValue.Type.QUOTE_SINGLE:
            return singleQuotedString(value, ctx);
          case PlainValue.Type.PLAIN:
            return plainString(item, ctx, onComment, onChompKeep);
          default:
            return null;
        }
      };
      if (type !== PlainValue.Type.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(value)) {
        type = PlainValue.Type.QUOTE_DOUBLE;
      } else if ((implicitKey || inFlow) && (type === PlainValue.Type.BLOCK_FOLDED || type === PlainValue.Type.BLOCK_LITERAL)) {
        type = PlainValue.Type.QUOTE_DOUBLE;
      }
      let res = _stringify(type);
      if (res === null) {
        res = _stringify(defaultType);
        if (res === null)
          throw new Error(`Unsupported default string type ${defaultType}`);
      }
      return res;
    }
    function stringifyNumber({
      format,
      minFractionDigits,
      tag,
      value
    }) {
      if (typeof value === "bigint")
        return String(value);
      if (!isFinite(value))
        return isNaN(value) ? ".nan" : value < 0 ? "-.inf" : ".inf";
      let n = JSON.stringify(value);
      if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
        let i = n.indexOf(".");
        if (i < 0) {
          i = n.length;
          n += ".";
        }
        let d = minFractionDigits - (n.length - i - 1);
        while (d-- > 0)
          n += "0";
      }
      return n;
    }
    function checkFlowCollectionEnd(errors, cst) {
      let char, name;
      switch (cst.type) {
        case PlainValue.Type.FLOW_MAP:
          char = "}";
          name = "flow map";
          break;
        case PlainValue.Type.FLOW_SEQ:
          char = "]";
          name = "flow sequence";
          break;
        default:
          errors.push(new PlainValue.YAMLSemanticError(cst, "Not a flow collection!?"));
          return;
      }
      let lastItem;
      for (let i = cst.items.length - 1; i >= 0; --i) {
        const item = cst.items[i];
        if (!item || item.type !== PlainValue.Type.COMMENT) {
          lastItem = item;
          break;
        }
      }
      if (lastItem && lastItem.char !== char) {
        const msg = `Expected ${name} to end with ${char}`;
        let err;
        if (typeof lastItem.offset === "number") {
          err = new PlainValue.YAMLSemanticError(cst, msg);
          err.offset = lastItem.offset + 1;
        } else {
          err = new PlainValue.YAMLSemanticError(lastItem, msg);
          if (lastItem.range && lastItem.range.end)
            err.offset = lastItem.range.end - lastItem.range.start;
        }
        errors.push(err);
      }
    }
    function checkFlowCommentSpace(errors, comment) {
      const prev = comment.context.src[comment.range.start - 1];
      if (prev !== "\n" && prev !== "	" && prev !== " ") {
        const msg = "Comments must be separated from other tokens by white space characters";
        errors.push(new PlainValue.YAMLSemanticError(comment, msg));
      }
    }
    function getLongKeyError(source, key) {
      const sk = String(key);
      const k = sk.substr(0, 8) + "..." + sk.substr(-8);
      return new PlainValue.YAMLSemanticError(source, `The "${k}" key is too long`);
    }
    function resolveComments(collection, comments) {
      for (const {
        afterKey,
        before,
        comment
      } of comments) {
        let item = collection.items[before];
        if (!item) {
          if (comment !== void 0) {
            if (collection.comment)
              collection.comment += "\n" + comment;
            else
              collection.comment = comment;
          }
        } else {
          if (afterKey && item.value)
            item = item.value;
          if (comment === void 0) {
            if (afterKey || !item.commentBefore)
              item.spaceBefore = true;
          } else {
            if (item.commentBefore)
              item.commentBefore += "\n" + comment;
            else
              item.commentBefore = comment;
          }
        }
      }
    }
    function resolveString(doc, node) {
      const res = node.strValue;
      if (!res)
        return "";
      if (typeof res === "string")
        return res;
      res.errors.forEach((error) => {
        if (!error.source)
          error.source = node;
        doc.errors.push(error);
      });
      return res.str;
    }
    function resolveTagHandle(doc, node) {
      const {
        handle,
        suffix
      } = node.tag;
      let prefix = doc.tagPrefixes.find((p) => p.handle === handle);
      if (!prefix) {
        const dtp = doc.getDefaults().tagPrefixes;
        if (dtp)
          prefix = dtp.find((p) => p.handle === handle);
        if (!prefix)
          throw new PlainValue.YAMLSemanticError(node, `The ${handle} tag handle is non-default and was not declared.`);
      }
      if (!suffix)
        throw new PlainValue.YAMLSemanticError(node, `The ${handle} tag has no suffix.`);
      if (handle === "!" && (doc.version || doc.options.version) === "1.0") {
        if (suffix[0] === "^") {
          doc.warnings.push(new PlainValue.YAMLWarning(node, "YAML 1.0 ^ tag expansion is not supported"));
          return suffix;
        }
        if (/[:/]/.test(suffix)) {
          const vocab = suffix.match(/^([a-z0-9-]+)\/(.*)/i);
          return vocab ? `tag:${vocab[1]}.yaml.org,2002:${vocab[2]}` : `tag:${suffix}`;
        }
      }
      return prefix.prefix + decodeURIComponent(suffix);
    }
    function resolveTagName(doc, node) {
      const {
        tag,
        type
      } = node;
      let nonSpecific = false;
      if (tag) {
        const {
          handle,
          suffix,
          verbatim
        } = tag;
        if (verbatim) {
          if (verbatim !== "!" && verbatim !== "!!")
            return verbatim;
          const msg = `Verbatim tags aren't resolved, so ${verbatim} is invalid.`;
          doc.errors.push(new PlainValue.YAMLSemanticError(node, msg));
        } else if (handle === "!" && !suffix) {
          nonSpecific = true;
        } else {
          try {
            return resolveTagHandle(doc, node);
          } catch (error) {
            doc.errors.push(error);
          }
        }
      }
      switch (type) {
        case PlainValue.Type.BLOCK_FOLDED:
        case PlainValue.Type.BLOCK_LITERAL:
        case PlainValue.Type.QUOTE_DOUBLE:
        case PlainValue.Type.QUOTE_SINGLE:
          return PlainValue.defaultTags.STR;
        case PlainValue.Type.FLOW_MAP:
        case PlainValue.Type.MAP:
          return PlainValue.defaultTags.MAP;
        case PlainValue.Type.FLOW_SEQ:
        case PlainValue.Type.SEQ:
          return PlainValue.defaultTags.SEQ;
        case PlainValue.Type.PLAIN:
          return nonSpecific ? PlainValue.defaultTags.STR : null;
        default:
          return null;
      }
    }
    function resolveByTagName(doc, node, tagName) {
      const {
        tags
      } = doc.schema;
      const matchWithTest = [];
      for (const tag of tags) {
        if (tag.tag === tagName) {
          if (tag.test)
            matchWithTest.push(tag);
          else {
            const res = tag.resolve(doc, node);
            return res instanceof Collection2 ? res : new Scalar2(res);
          }
        }
      }
      const str = resolveString(doc, node);
      if (typeof str === "string" && matchWithTest.length > 0)
        return resolveScalar(str, matchWithTest, tags.scalarFallback);
      return null;
    }
    function getFallbackTagName({
      type
    }) {
      switch (type) {
        case PlainValue.Type.FLOW_MAP:
        case PlainValue.Type.MAP:
          return PlainValue.defaultTags.MAP;
        case PlainValue.Type.FLOW_SEQ:
        case PlainValue.Type.SEQ:
          return PlainValue.defaultTags.SEQ;
        default:
          return PlainValue.defaultTags.STR;
      }
    }
    function resolveTag(doc, node, tagName) {
      try {
        const res = resolveByTagName(doc, node, tagName);
        if (res) {
          if (tagName && node.tag)
            res.tag = tagName;
          return res;
        }
      } catch (error) {
        if (!error.source)
          error.source = node;
        doc.errors.push(error);
        return null;
      }
      try {
        const fallback = getFallbackTagName(node);
        if (!fallback)
          throw new Error(`The tag ${tagName} is unavailable`);
        const msg = `The tag ${tagName} is unavailable, falling back to ${fallback}`;
        doc.warnings.push(new PlainValue.YAMLWarning(node, msg));
        const res = resolveByTagName(doc, node, fallback);
        res.tag = tagName;
        return res;
      } catch (error) {
        const refError = new PlainValue.YAMLReferenceError(node, error.message);
        refError.stack = error.stack;
        doc.errors.push(refError);
        return null;
      }
    }
    var isCollectionItem = (node) => {
      if (!node)
        return false;
      const {
        type
      } = node;
      return type === PlainValue.Type.MAP_KEY || type === PlainValue.Type.MAP_VALUE || type === PlainValue.Type.SEQ_ITEM;
    };
    function resolveNodeProps(errors, node) {
      const comments = {
        before: [],
        after: []
      };
      let hasAnchor = false;
      let hasTag = false;
      const props = isCollectionItem(node.context.parent) ? node.context.parent.props.concat(node.props) : node.props;
      for (const {
        start,
        end
      } of props) {
        switch (node.context.src[start]) {
          case PlainValue.Char.COMMENT: {
            if (!node.commentHasRequiredWhitespace(start)) {
              const msg = "Comments must be separated from other tokens by white space characters";
              errors.push(new PlainValue.YAMLSemanticError(node, msg));
            }
            const {
              header,
              valueRange
            } = node;
            const cc = valueRange && (start > valueRange.start || header && start > header.start) ? comments.after : comments.before;
            cc.push(node.context.src.slice(start + 1, end));
            break;
          }
          case PlainValue.Char.ANCHOR:
            if (hasAnchor) {
              const msg = "A node can have at most one anchor";
              errors.push(new PlainValue.YAMLSemanticError(node, msg));
            }
            hasAnchor = true;
            break;
          case PlainValue.Char.TAG:
            if (hasTag) {
              const msg = "A node can have at most one tag";
              errors.push(new PlainValue.YAMLSemanticError(node, msg));
            }
            hasTag = true;
            break;
        }
      }
      return {
        comments,
        hasAnchor,
        hasTag
      };
    }
    function resolveNodeValue(doc, node) {
      const {
        anchors,
        errors,
        schema
      } = doc;
      if (node.type === PlainValue.Type.ALIAS) {
        const name = node.rawValue;
        const src = anchors.getNode(name);
        if (!src) {
          const msg = `Aliased anchor not found: ${name}`;
          errors.push(new PlainValue.YAMLReferenceError(node, msg));
          return null;
        }
        const res = new Alias2(src);
        anchors._cstAliases.push(res);
        return res;
      }
      const tagName = resolveTagName(doc, node);
      if (tagName)
        return resolveTag(doc, node, tagName);
      if (node.type !== PlainValue.Type.PLAIN) {
        const msg = `Failed to resolve ${node.type} node here`;
        errors.push(new PlainValue.YAMLSyntaxError(node, msg));
        return null;
      }
      try {
        const str = resolveString(doc, node);
        return resolveScalar(str, schema.tags, schema.tags.scalarFallback);
      } catch (error) {
        if (!error.source)
          error.source = node;
        errors.push(error);
        return null;
      }
    }
    function resolveNode(doc, node) {
      if (!node)
        return null;
      if (node.error)
        doc.errors.push(node.error);
      const {
        comments,
        hasAnchor,
        hasTag
      } = resolveNodeProps(doc.errors, node);
      if (hasAnchor) {
        const {
          anchors
        } = doc;
        const name = node.anchor;
        const prev = anchors.getNode(name);
        if (prev)
          anchors.map[anchors.newName(name)] = prev;
        anchors.map[name] = node;
      }
      if (node.type === PlainValue.Type.ALIAS && (hasAnchor || hasTag)) {
        const msg = "An alias node must not specify any properties";
        doc.errors.push(new PlainValue.YAMLSemanticError(node, msg));
      }
      const res = resolveNodeValue(doc, node);
      if (res) {
        res.range = [node.range.start, node.range.end];
        if (doc.options.keepCstNodes)
          res.cstNode = node;
        if (doc.options.keepNodeTypes)
          res.type = node.type;
        const cb = comments.before.join("\n");
        if (cb) {
          res.commentBefore = res.commentBefore ? `${res.commentBefore}
${cb}` : cb;
        }
        const ca = comments.after.join("\n");
        if (ca)
          res.comment = res.comment ? `${res.comment}
${ca}` : ca;
      }
      return node.resolved = res;
    }
    function resolveMap(doc, cst) {
      if (cst.type !== PlainValue.Type.MAP && cst.type !== PlainValue.Type.FLOW_MAP) {
        const msg = `A ${cst.type} node cannot be resolved as a mapping`;
        doc.errors.push(new PlainValue.YAMLSyntaxError(cst, msg));
        return null;
      }
      const {
        comments,
        items
      } = cst.type === PlainValue.Type.FLOW_MAP ? resolveFlowMapItems(doc, cst) : resolveBlockMapItems(doc, cst);
      const map = new YAMLMap2();
      map.items = items;
      resolveComments(map, comments);
      let hasCollectionKey = false;
      for (let i = 0; i < items.length; ++i) {
        const {
          key: iKey
        } = items[i];
        if (iKey instanceof Collection2)
          hasCollectionKey = true;
        if (doc.schema.merge && iKey && iKey.value === MERGE_KEY) {
          items[i] = new Merge2(items[i]);
          const sources = items[i].value.items;
          let error = null;
          sources.some((node) => {
            if (node instanceof Alias2) {
              const {
                type
              } = node.source;
              if (type === PlainValue.Type.MAP || type === PlainValue.Type.FLOW_MAP)
                return false;
              return error = "Merge nodes aliases can only point to maps";
            }
            return error = "Merge nodes can only have Alias nodes as values";
          });
          if (error)
            doc.errors.push(new PlainValue.YAMLSemanticError(cst, error));
        } else {
          for (let j = i + 1; j < items.length; ++j) {
            const {
              key: jKey
            } = items[j];
            if (iKey === jKey || iKey && jKey && Object.prototype.hasOwnProperty.call(iKey, "value") && iKey.value === jKey.value) {
              const msg = `Map keys must be unique; "${iKey}" is repeated`;
              doc.errors.push(new PlainValue.YAMLSemanticError(cst, msg));
              break;
            }
          }
        }
      }
      if (hasCollectionKey && !doc.options.mapAsMap) {
        const warn = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
        doc.warnings.push(new PlainValue.YAMLWarning(cst, warn));
      }
      cst.resolved = map;
      return map;
    }
    var valueHasPairComment = ({
      context: {
        lineStart,
        node,
        src
      },
      props
    }) => {
      if (props.length === 0)
        return false;
      const {
        start
      } = props[0];
      if (node && start > node.valueRange.start)
        return false;
      if (src[start] !== PlainValue.Char.COMMENT)
        return false;
      for (let i = lineStart; i < start; ++i)
        if (src[i] === "\n")
          return false;
      return true;
    };
    function resolvePairComment(item, pair) {
      if (!valueHasPairComment(item))
        return;
      const comment = item.getPropValue(0, PlainValue.Char.COMMENT, true);
      let found = false;
      const cb = pair.value.commentBefore;
      if (cb && cb.startsWith(comment)) {
        pair.value.commentBefore = cb.substr(comment.length + 1);
        found = true;
      } else {
        const cc = pair.value.comment;
        if (!item.node && cc && cc.startsWith(comment)) {
          pair.value.comment = cc.substr(comment.length + 1);
          found = true;
        }
      }
      if (found)
        pair.comment = comment;
    }
    function resolveBlockMapItems(doc, cst) {
      const comments = [];
      const items = [];
      let key = void 0;
      let keyStart = null;
      for (let i = 0; i < cst.items.length; ++i) {
        const item = cst.items[i];
        switch (item.type) {
          case PlainValue.Type.BLANK_LINE:
            comments.push({
              afterKey: !!key,
              before: items.length
            });
            break;
          case PlainValue.Type.COMMENT:
            comments.push({
              afterKey: !!key,
              before: items.length,
              comment: item.comment
            });
            break;
          case PlainValue.Type.MAP_KEY:
            if (key !== void 0)
              items.push(new Pair2(key));
            if (item.error)
              doc.errors.push(item.error);
            key = resolveNode(doc, item.node);
            keyStart = null;
            break;
          case PlainValue.Type.MAP_VALUE:
            {
              if (key === void 0)
                key = null;
              if (item.error)
                doc.errors.push(item.error);
              if (!item.context.atLineStart && item.node && item.node.type === PlainValue.Type.MAP && !item.node.context.atLineStart) {
                const msg = "Nested mappings are not allowed in compact mappings";
                doc.errors.push(new PlainValue.YAMLSemanticError(item.node, msg));
              }
              let valueNode = item.node;
              if (!valueNode && item.props.length > 0) {
                valueNode = new PlainValue.PlainValue(PlainValue.Type.PLAIN, []);
                valueNode.context = {
                  parent: item,
                  src: item.context.src
                };
                const pos = item.range.start + 1;
                valueNode.range = {
                  start: pos,
                  end: pos
                };
                valueNode.valueRange = {
                  start: pos,
                  end: pos
                };
                if (typeof item.range.origStart === "number") {
                  const origPos = item.range.origStart + 1;
                  valueNode.range.origStart = valueNode.range.origEnd = origPos;
                  valueNode.valueRange.origStart = valueNode.valueRange.origEnd = origPos;
                }
              }
              const pair = new Pair2(key, resolveNode(doc, valueNode));
              resolvePairComment(item, pair);
              items.push(pair);
              if (key && typeof keyStart === "number") {
                if (item.range.start > keyStart + 1024)
                  doc.errors.push(getLongKeyError(cst, key));
              }
              key = void 0;
              keyStart = null;
            }
            break;
          default:
            if (key !== void 0)
              items.push(new Pair2(key));
            key = resolveNode(doc, item);
            keyStart = item.range.start;
            if (item.error)
              doc.errors.push(item.error);
            next:
              for (let j = i + 1; ; ++j) {
                const nextItem = cst.items[j];
                switch (nextItem && nextItem.type) {
                  case PlainValue.Type.BLANK_LINE:
                  case PlainValue.Type.COMMENT:
                    continue next;
                  case PlainValue.Type.MAP_VALUE:
                    break next;
                  default: {
                    const msg = "Implicit map keys need to be followed by map values";
                    doc.errors.push(new PlainValue.YAMLSemanticError(item, msg));
                    break next;
                  }
                }
              }
            if (item.valueRangeContainsNewline) {
              const msg = "Implicit map keys need to be on a single line";
              doc.errors.push(new PlainValue.YAMLSemanticError(item, msg));
            }
        }
      }
      if (key !== void 0)
        items.push(new Pair2(key));
      return {
        comments,
        items
      };
    }
    function resolveFlowMapItems(doc, cst) {
      const comments = [];
      const items = [];
      let key = void 0;
      let explicitKey = false;
      let next = "{";
      for (let i = 0; i < cst.items.length; ++i) {
        const item = cst.items[i];
        if (typeof item.char === "string") {
          const {
            char,
            offset
          } = item;
          if (char === "?" && key === void 0 && !explicitKey) {
            explicitKey = true;
            next = ":";
            continue;
          }
          if (char === ":") {
            if (key === void 0)
              key = null;
            if (next === ":") {
              next = ",";
              continue;
            }
          } else {
            if (explicitKey) {
              if (key === void 0 && char !== ",")
                key = null;
              explicitKey = false;
            }
            if (key !== void 0) {
              items.push(new Pair2(key));
              key = void 0;
              if (char === ",") {
                next = ":";
                continue;
              }
            }
          }
          if (char === "}") {
            if (i === cst.items.length - 1)
              continue;
          } else if (char === next) {
            next = ":";
            continue;
          }
          const msg = `Flow map contains an unexpected ${char}`;
          const err = new PlainValue.YAMLSyntaxError(cst, msg);
          err.offset = offset;
          doc.errors.push(err);
        } else if (item.type === PlainValue.Type.BLANK_LINE) {
          comments.push({
            afterKey: !!key,
            before: items.length
          });
        } else if (item.type === PlainValue.Type.COMMENT) {
          checkFlowCommentSpace(doc.errors, item);
          comments.push({
            afterKey: !!key,
            before: items.length,
            comment: item.comment
          });
        } else if (key === void 0) {
          if (next === ",")
            doc.errors.push(new PlainValue.YAMLSemanticError(item, "Separator , missing in flow map"));
          key = resolveNode(doc, item);
        } else {
          if (next !== ",")
            doc.errors.push(new PlainValue.YAMLSemanticError(item, "Indicator : missing in flow map entry"));
          items.push(new Pair2(key, resolveNode(doc, item)));
          key = void 0;
          explicitKey = false;
        }
      }
      checkFlowCollectionEnd(doc.errors, cst);
      if (key !== void 0)
        items.push(new Pair2(key));
      return {
        comments,
        items
      };
    }
    function resolveSeq(doc, cst) {
      if (cst.type !== PlainValue.Type.SEQ && cst.type !== PlainValue.Type.FLOW_SEQ) {
        const msg = `A ${cst.type} node cannot be resolved as a sequence`;
        doc.errors.push(new PlainValue.YAMLSyntaxError(cst, msg));
        return null;
      }
      const {
        comments,
        items
      } = cst.type === PlainValue.Type.FLOW_SEQ ? resolveFlowSeqItems(doc, cst) : resolveBlockSeqItems(doc, cst);
      const seq = new YAMLSeq2();
      seq.items = items;
      resolveComments(seq, comments);
      if (!doc.options.mapAsMap && items.some((it) => it instanceof Pair2 && it.key instanceof Collection2)) {
        const warn = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
        doc.warnings.push(new PlainValue.YAMLWarning(cst, warn));
      }
      cst.resolved = seq;
      return seq;
    }
    function resolveBlockSeqItems(doc, cst) {
      const comments = [];
      const items = [];
      for (let i = 0; i < cst.items.length; ++i) {
        const item = cst.items[i];
        switch (item.type) {
          case PlainValue.Type.BLANK_LINE:
            comments.push({
              before: items.length
            });
            break;
          case PlainValue.Type.COMMENT:
            comments.push({
              comment: item.comment,
              before: items.length
            });
            break;
          case PlainValue.Type.SEQ_ITEM:
            if (item.error)
              doc.errors.push(item.error);
            items.push(resolveNode(doc, item.node));
            if (item.hasProps) {
              const msg = "Sequence items cannot have tags or anchors before the - indicator";
              doc.errors.push(new PlainValue.YAMLSemanticError(item, msg));
            }
            break;
          default:
            if (item.error)
              doc.errors.push(item.error);
            doc.errors.push(new PlainValue.YAMLSyntaxError(item, `Unexpected ${item.type} node in sequence`));
        }
      }
      return {
        comments,
        items
      };
    }
    function resolveFlowSeqItems(doc, cst) {
      const comments = [];
      const items = [];
      let explicitKey = false;
      let key = void 0;
      let keyStart = null;
      let next = "[";
      let prevItem = null;
      for (let i = 0; i < cst.items.length; ++i) {
        const item = cst.items[i];
        if (typeof item.char === "string") {
          const {
            char,
            offset
          } = item;
          if (char !== ":" && (explicitKey || key !== void 0)) {
            if (explicitKey && key === void 0)
              key = next ? items.pop() : null;
            items.push(new Pair2(key));
            explicitKey = false;
            key = void 0;
            keyStart = null;
          }
          if (char === next) {
            next = null;
          } else if (!next && char === "?") {
            explicitKey = true;
          } else if (next !== "[" && char === ":" && key === void 0) {
            if (next === ",") {
              key = items.pop();
              if (key instanceof Pair2) {
                const msg = "Chaining flow sequence pairs is invalid";
                const err = new PlainValue.YAMLSemanticError(cst, msg);
                err.offset = offset;
                doc.errors.push(err);
              }
              if (!explicitKey && typeof keyStart === "number") {
                const keyEnd = item.range ? item.range.start : item.offset;
                if (keyEnd > keyStart + 1024)
                  doc.errors.push(getLongKeyError(cst, key));
                const {
                  src
                } = prevItem.context;
                for (let i2 = keyStart; i2 < keyEnd; ++i2)
                  if (src[i2] === "\n") {
                    const msg = "Implicit keys of flow sequence pairs need to be on a single line";
                    doc.errors.push(new PlainValue.YAMLSemanticError(prevItem, msg));
                    break;
                  }
              }
            } else {
              key = null;
            }
            keyStart = null;
            explicitKey = false;
            next = null;
          } else if (next === "[" || char !== "]" || i < cst.items.length - 1) {
            const msg = `Flow sequence contains an unexpected ${char}`;
            const err = new PlainValue.YAMLSyntaxError(cst, msg);
            err.offset = offset;
            doc.errors.push(err);
          }
        } else if (item.type === PlainValue.Type.BLANK_LINE) {
          comments.push({
            before: items.length
          });
        } else if (item.type === PlainValue.Type.COMMENT) {
          checkFlowCommentSpace(doc.errors, item);
          comments.push({
            comment: item.comment,
            before: items.length
          });
        } else {
          if (next) {
            const msg = `Expected a ${next} in flow sequence`;
            doc.errors.push(new PlainValue.YAMLSemanticError(item, msg));
          }
          const value = resolveNode(doc, item);
          if (key === void 0) {
            items.push(value);
            prevItem = item;
          } else {
            items.push(new Pair2(key, value));
            key = void 0;
          }
          keyStart = item.range.start;
          next = ",";
        }
      }
      checkFlowCollectionEnd(doc.errors, cst);
      if (key !== void 0)
        items.push(new Pair2(key));
      return {
        comments,
        items
      };
    }
    exports2.Alias = Alias2;
    exports2.Collection = Collection2;
    exports2.Merge = Merge2;
    exports2.Node = Node2;
    exports2.Pair = Pair2;
    exports2.Scalar = Scalar2;
    exports2.YAMLMap = YAMLMap2;
    exports2.YAMLSeq = YAMLSeq2;
    exports2.addComment = addComment;
    exports2.binaryOptions = binaryOptions2;
    exports2.boolOptions = boolOptions2;
    exports2.findPair = findPair;
    exports2.intOptions = intOptions2;
    exports2.isEmptyPath = isEmptyPath;
    exports2.nullOptions = nullOptions2;
    exports2.resolveMap = resolveMap;
    exports2.resolveNode = resolveNode;
    exports2.resolveSeq = resolveSeq;
    exports2.resolveString = resolveString;
    exports2.strOptions = strOptions2;
    exports2.stringifyNumber = stringifyNumber;
    exports2.stringifyString = stringifyString;
    exports2.toJSON = toJSON;
  }
});

// node_modules/yaml/dist/warnings-1000a372.js
var require_warnings_1000a372 = __commonJS({
  "node_modules/yaml/dist/warnings-1000a372.js"(exports2) {
    "use strict";
    var PlainValue = require_PlainValue_ec8e588e();
    var resolveSeq = require_resolveSeq_d03cb037();
    var binary = {
      identify: (value) => value instanceof Uint8Array,
      // Buffer inherits from Uint8Array
      default: false,
      tag: "tag:yaml.org,2002:binary",
      /**
       * Returns a Buffer in node and an Uint8Array in browsers
       *
       * To use the resulting buffer as an image, you'll want to do something like:
       *
       *   const blob = new Blob([buffer], { type: 'image/jpeg' })
       *   document.querySelector('#photo').src = URL.createObjectURL(blob)
       */
      resolve: (doc, node) => {
        const src = resolveSeq.resolveString(doc, node);
        if (typeof Buffer === "function") {
          return Buffer.from(src, "base64");
        } else if (typeof atob === "function") {
          const str = atob(src.replace(/[\n\r]/g, ""));
          const buffer = new Uint8Array(str.length);
          for (let i = 0; i < str.length; ++i)
            buffer[i] = str.charCodeAt(i);
          return buffer;
        } else {
          const msg = "This environment does not support reading binary tags; either Buffer or atob is required";
          doc.errors.push(new PlainValue.YAMLReferenceError(node, msg));
          return null;
        }
      },
      options: resolveSeq.binaryOptions,
      stringify: ({
        comment,
        type,
        value
      }, ctx, onComment, onChompKeep) => {
        let src;
        if (typeof Buffer === "function") {
          src = value instanceof Buffer ? value.toString("base64") : Buffer.from(value.buffer).toString("base64");
        } else if (typeof btoa === "function") {
          let s = "";
          for (let i = 0; i < value.length; ++i)
            s += String.fromCharCode(value[i]);
          src = btoa(s);
        } else {
          throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
        }
        if (!type)
          type = resolveSeq.binaryOptions.defaultType;
        if (type === PlainValue.Type.QUOTE_DOUBLE) {
          value = src;
        } else {
          const {
            lineWidth
          } = resolveSeq.binaryOptions;
          const n = Math.ceil(src.length / lineWidth);
          const lines = new Array(n);
          for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
            lines[i] = src.substr(o, lineWidth);
          }
          value = lines.join(type === PlainValue.Type.BLOCK_LITERAL ? "\n" : " ");
        }
        return resolveSeq.stringifyString({
          comment,
          type,
          value
        }, ctx, onComment, onChompKeep);
      }
    };
    function parsePairs(doc, cst) {
      const seq = resolveSeq.resolveSeq(doc, cst);
      for (let i = 0; i < seq.items.length; ++i) {
        let item = seq.items[i];
        if (item instanceof resolveSeq.Pair)
          continue;
        else if (item instanceof resolveSeq.YAMLMap) {
          if (item.items.length > 1) {
            const msg = "Each pair must have its own sequence indicator";
            throw new PlainValue.YAMLSemanticError(cst, msg);
          }
          const pair = item.items[0] || new resolveSeq.Pair();
          if (item.commentBefore)
            pair.commentBefore = pair.commentBefore ? `${item.commentBefore}
${pair.commentBefore}` : item.commentBefore;
          if (item.comment)
            pair.comment = pair.comment ? `${item.comment}
${pair.comment}` : item.comment;
          item = pair;
        }
        seq.items[i] = item instanceof resolveSeq.Pair ? item : new resolveSeq.Pair(item);
      }
      return seq;
    }
    function createPairs(schema, iterable, ctx) {
      const pairs2 = new resolveSeq.YAMLSeq(schema);
      pairs2.tag = "tag:yaml.org,2002:pairs";
      for (const it of iterable) {
        let key, value;
        if (Array.isArray(it)) {
          if (it.length === 2) {
            key = it[0];
            value = it[1];
          } else
            throw new TypeError(`Expected [key, value] tuple: ${it}`);
        } else if (it && it instanceof Object) {
          const keys = Object.keys(it);
          if (keys.length === 1) {
            key = keys[0];
            value = it[key];
          } else
            throw new TypeError(`Expected { key: value } tuple: ${it}`);
        } else {
          key = it;
        }
        const pair = schema.createPair(key, value, ctx);
        pairs2.items.push(pair);
      }
      return pairs2;
    }
    var pairs = {
      default: false,
      tag: "tag:yaml.org,2002:pairs",
      resolve: parsePairs,
      createNode: createPairs
    };
    var YAMLOMap = class _YAMLOMap extends resolveSeq.YAMLSeq {
      constructor() {
        super();
        PlainValue._defineProperty(this, "add", resolveSeq.YAMLMap.prototype.add.bind(this));
        PlainValue._defineProperty(this, "delete", resolveSeq.YAMLMap.prototype.delete.bind(this));
        PlainValue._defineProperty(this, "get", resolveSeq.YAMLMap.prototype.get.bind(this));
        PlainValue._defineProperty(this, "has", resolveSeq.YAMLMap.prototype.has.bind(this));
        PlainValue._defineProperty(this, "set", resolveSeq.YAMLMap.prototype.set.bind(this));
        this.tag = _YAMLOMap.tag;
      }
      toJSON(_, ctx) {
        const map = /* @__PURE__ */ new Map();
        if (ctx && ctx.onCreate)
          ctx.onCreate(map);
        for (const pair of this.items) {
          let key, value;
          if (pair instanceof resolveSeq.Pair) {
            key = resolveSeq.toJSON(pair.key, "", ctx);
            value = resolveSeq.toJSON(pair.value, key, ctx);
          } else {
            key = resolveSeq.toJSON(pair, "", ctx);
          }
          if (map.has(key))
            throw new Error("Ordered maps must not include duplicate keys");
          map.set(key, value);
        }
        return map;
      }
    };
    PlainValue._defineProperty(YAMLOMap, "tag", "tag:yaml.org,2002:omap");
    function parseOMap(doc, cst) {
      const pairs2 = parsePairs(doc, cst);
      const seenKeys = [];
      for (const {
        key
      } of pairs2.items) {
        if (key instanceof resolveSeq.Scalar) {
          if (seenKeys.includes(key.value)) {
            const msg = "Ordered maps must not include duplicate keys";
            throw new PlainValue.YAMLSemanticError(cst, msg);
          } else {
            seenKeys.push(key.value);
          }
        }
      }
      return Object.assign(new YAMLOMap(), pairs2);
    }
    function createOMap(schema, iterable, ctx) {
      const pairs2 = createPairs(schema, iterable, ctx);
      const omap2 = new YAMLOMap();
      omap2.items = pairs2.items;
      return omap2;
    }
    var omap = {
      identify: (value) => value instanceof Map,
      nodeClass: YAMLOMap,
      default: false,
      tag: "tag:yaml.org,2002:omap",
      resolve: parseOMap,
      createNode: createOMap
    };
    var YAMLSet = class _YAMLSet extends resolveSeq.YAMLMap {
      constructor() {
        super();
        this.tag = _YAMLSet.tag;
      }
      add(key) {
        const pair = key instanceof resolveSeq.Pair ? key : new resolveSeq.Pair(key);
        const prev = resolveSeq.findPair(this.items, pair.key);
        if (!prev)
          this.items.push(pair);
      }
      get(key, keepPair) {
        const pair = resolveSeq.findPair(this.items, key);
        return !keepPair && pair instanceof resolveSeq.Pair ? pair.key instanceof resolveSeq.Scalar ? pair.key.value : pair.key : pair;
      }
      set(key, value) {
        if (typeof value !== "boolean")
          throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
        const prev = resolveSeq.findPair(this.items, key);
        if (prev && !value) {
          this.items.splice(this.items.indexOf(prev), 1);
        } else if (!prev && value) {
          this.items.push(new resolveSeq.Pair(key));
        }
      }
      toJSON(_, ctx) {
        return super.toJSON(_, ctx, Set);
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx)
          return JSON.stringify(this);
        if (this.hasAllNullValues())
          return super.toString(ctx, onComment, onChompKeep);
        else
          throw new Error("Set items must all have null values");
      }
    };
    PlainValue._defineProperty(YAMLSet, "tag", "tag:yaml.org,2002:set");
    function parseSet(doc, cst) {
      const map = resolveSeq.resolveMap(doc, cst);
      if (!map.hasAllNullValues())
        throw new PlainValue.YAMLSemanticError(cst, "Set items must all have null values");
      return Object.assign(new YAMLSet(), map);
    }
    function createSet(schema, iterable, ctx) {
      const set2 = new YAMLSet();
      for (const value of iterable)
        set2.items.push(schema.createPair(value, null, ctx));
      return set2;
    }
    var set = {
      identify: (value) => value instanceof Set,
      nodeClass: YAMLSet,
      default: false,
      tag: "tag:yaml.org,2002:set",
      resolve: parseSet,
      createNode: createSet
    };
    var parseSexagesimal = (sign, parts) => {
      const n = parts.split(":").reduce((n2, p) => n2 * 60 + Number(p), 0);
      return sign === "-" ? -n : n;
    };
    var stringifySexagesimal = ({
      value
    }) => {
      if (isNaN(value) || !isFinite(value))
        return resolveSeq.stringifyNumber(value);
      let sign = "";
      if (value < 0) {
        sign = "-";
        value = Math.abs(value);
      }
      const parts = [value % 60];
      if (value < 60) {
        parts.unshift(0);
      } else {
        value = Math.round((value - parts[0]) / 60);
        parts.unshift(value % 60);
        if (value >= 60) {
          value = Math.round((value - parts[0]) / 60);
          parts.unshift(value);
        }
      }
      return sign + parts.map((n) => n < 10 ? "0" + String(n) : String(n)).join(":").replace(/000000\d*$/, "");
    };
    var intTime = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "TIME",
      test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,
      resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, "")),
      stringify: stringifySexagesimal
    };
    var floatTime = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      format: "TIME",
      test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,
      resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, "")),
      stringify: stringifySexagesimal
    };
    var timestamp = {
      identify: (value) => value instanceof Date,
      default: true,
      tag: "tag:yaml.org,2002:timestamp",
      // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
      // may be omitted altogether, resulting in a date format. In such a case, the time part is
      // assumed to be 00:00:00Z (start of day, UTC).
      test: RegExp("^(?:([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?)$"),
      resolve: (str, year, month, day, hour, minute, second, millisec, tz) => {
        if (millisec)
          millisec = (millisec + "00").substr(1, 3);
        let date2 = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec || 0);
        if (tz && tz !== "Z") {
          let d = parseSexagesimal(tz[0], tz.slice(1));
          if (Math.abs(d) < 30)
            d *= 60;
          date2 -= 6e4 * d;
        }
        return new Date(date2);
      },
      stringify: ({
        value
      }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
    };
    function shouldWarn(deprecation) {
      const env = typeof process !== "undefined" && process.env || {};
      if (deprecation) {
        if (typeof YAML_SILENCE_DEPRECATION_WARNINGS !== "undefined")
          return !YAML_SILENCE_DEPRECATION_WARNINGS;
        return !env.YAML_SILENCE_DEPRECATION_WARNINGS;
      }
      if (typeof YAML_SILENCE_WARNINGS !== "undefined")
        return !YAML_SILENCE_WARNINGS;
      return !env.YAML_SILENCE_WARNINGS;
    }
    function warn(warning, type) {
      if (shouldWarn(false)) {
        const emit = typeof process !== "undefined" && process.emitWarning;
        if (emit)
          emit(warning, type);
        else {
          console.warn(type ? `${type}: ${warning}` : warning);
        }
      }
    }
    function warnFileDeprecation(filename) {
      if (shouldWarn(true)) {
        const path = filename.replace(/.*yaml[/\\]/i, "").replace(/\.js$/, "").replace(/\\/g, "/");
        warn(`The endpoint 'yaml/${path}' will be removed in a future release.`, "DeprecationWarning");
      }
    }
    var warned = {};
    function warnOptionDeprecation(name, alternative) {
      if (!warned[name] && shouldWarn(true)) {
        warned[name] = true;
        let msg = `The option '${name}' will be removed in a future release`;
        msg += alternative ? `, use '${alternative}' instead.` : ".";
        warn(msg, "DeprecationWarning");
      }
    }
    exports2.binary = binary;
    exports2.floatTime = floatTime;
    exports2.intTime = intTime;
    exports2.omap = omap;
    exports2.pairs = pairs;
    exports2.set = set;
    exports2.timestamp = timestamp;
    exports2.warn = warn;
    exports2.warnFileDeprecation = warnFileDeprecation;
    exports2.warnOptionDeprecation = warnOptionDeprecation;
  }
});

// node_modules/yaml/dist/Schema-88e323a7.js
var require_Schema_88e323a7 = __commonJS({
  "node_modules/yaml/dist/Schema-88e323a7.js"(exports2) {
    "use strict";
    var PlainValue = require_PlainValue_ec8e588e();
    var resolveSeq = require_resolveSeq_d03cb037();
    var warnings = require_warnings_1000a372();
    function createMap(schema, obj, ctx) {
      const map2 = new resolveSeq.YAMLMap(schema);
      if (obj instanceof Map) {
        for (const [key, value] of obj)
          map2.items.push(schema.createPair(key, value, ctx));
      } else if (obj && typeof obj === "object") {
        for (const key of Object.keys(obj))
          map2.items.push(schema.createPair(key, obj[key], ctx));
      }
      if (typeof schema.sortMapEntries === "function") {
        map2.items.sort(schema.sortMapEntries);
      }
      return map2;
    }
    var map = {
      createNode: createMap,
      default: true,
      nodeClass: resolveSeq.YAMLMap,
      tag: "tag:yaml.org,2002:map",
      resolve: resolveSeq.resolveMap
    };
    function createSeq(schema, obj, ctx) {
      const seq2 = new resolveSeq.YAMLSeq(schema);
      if (obj && obj[Symbol.iterator]) {
        for (const it of obj) {
          const v = schema.createNode(it, ctx.wrapScalars, null, ctx);
          seq2.items.push(v);
        }
      }
      return seq2;
    }
    var seq = {
      createNode: createSeq,
      default: true,
      nodeClass: resolveSeq.YAMLSeq,
      tag: "tag:yaml.org,2002:seq",
      resolve: resolveSeq.resolveSeq
    };
    var string = {
      identify: (value) => typeof value === "string",
      default: true,
      tag: "tag:yaml.org,2002:str",
      resolve: resolveSeq.resolveString,
      stringify(item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({
          actualString: true
        }, ctx);
        return resolveSeq.stringifyString(item, ctx, onComment, onChompKeep);
      },
      options: resolveSeq.strOptions
    };
    var failsafe = [map, seq, string];
    var intIdentify$2 = (value) => typeof value === "bigint" || Number.isInteger(value);
    var intResolve$1 = (src, part, radix) => resolveSeq.intOptions.asBigInt ? BigInt(src) : parseInt(part, radix);
    function intStringify$1(node, radix, prefix) {
      const {
        value
      } = node;
      if (intIdentify$2(value) && value >= 0)
        return prefix + value.toString(radix);
      return resolveSeq.stringifyNumber(node);
    }
    var nullObj = {
      identify: (value) => value == null,
      createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,
      default: true,
      tag: "tag:yaml.org,2002:null",
      test: /^(?:~|[Nn]ull|NULL)?$/,
      resolve: () => null,
      options: resolveSeq.nullOptions,
      stringify: () => resolveSeq.nullOptions.nullStr
    };
    var boolObj = {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
      resolve: (str) => str[0] === "t" || str[0] === "T",
      options: resolveSeq.boolOptions,
      stringify: ({
        value
      }) => value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr
    };
    var octObj = {
      identify: (value) => intIdentify$2(value) && value >= 0,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "OCT",
      test: /^0o([0-7]+)$/,
      resolve: (str, oct) => intResolve$1(str, oct, 8),
      options: resolveSeq.intOptions,
      stringify: (node) => intStringify$1(node, 8, "0o")
    };
    var intObj = {
      identify: intIdentify$2,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^[-+]?[0-9]+$/,
      resolve: (str) => intResolve$1(str, str, 10),
      options: resolveSeq.intOptions,
      stringify: resolveSeq.stringifyNumber
    };
    var hexObj = {
      identify: (value) => intIdentify$2(value) && value >= 0,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "HEX",
      test: /^0x([0-9a-fA-F]+)$/,
      resolve: (str, hex) => intResolve$1(str, hex, 16),
      options: resolveSeq.intOptions,
      stringify: (node) => intStringify$1(node, 16, "0x")
    };
    var nanObj = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^(?:[-+]?\.inf|(\.nan))$/i,
      resolve: (str, nan) => nan ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
      stringify: resolveSeq.stringifyNumber
    };
    var expObj = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      format: "EXP",
      test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
      resolve: (str) => parseFloat(str),
      stringify: ({
        value
      }) => Number(value).toExponential()
    };
    var floatObj = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^[-+]?(?:\.([0-9]+)|[0-9]+\.([0-9]*))$/,
      resolve(str, frac1, frac2) {
        const frac = frac1 || frac2;
        const node = new resolveSeq.Scalar(parseFloat(str));
        if (frac && frac[frac.length - 1] === "0")
          node.minFractionDigits = frac.length;
        return node;
      },
      stringify: resolveSeq.stringifyNumber
    };
    var core = failsafe.concat([nullObj, boolObj, octObj, intObj, hexObj, nanObj, expObj, floatObj]);
    var intIdentify$1 = (value) => typeof value === "bigint" || Number.isInteger(value);
    var stringifyJSON = ({
      value
    }) => JSON.stringify(value);
    var json = [map, seq, {
      identify: (value) => typeof value === "string",
      default: true,
      tag: "tag:yaml.org,2002:str",
      resolve: resolveSeq.resolveString,
      stringify: stringifyJSON
    }, {
      identify: (value) => value == null,
      createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,
      default: true,
      tag: "tag:yaml.org,2002:null",
      test: /^null$/,
      resolve: () => null,
      stringify: stringifyJSON
    }, {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^true|false$/,
      resolve: (str) => str === "true",
      stringify: stringifyJSON
    }, {
      identify: intIdentify$1,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^-?(?:0|[1-9][0-9]*)$/,
      resolve: (str) => resolveSeq.intOptions.asBigInt ? BigInt(str) : parseInt(str, 10),
      stringify: ({
        value
      }) => intIdentify$1(value) ? value.toString() : JSON.stringify(value)
    }, {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
      resolve: (str) => parseFloat(str),
      stringify: stringifyJSON
    }];
    json.scalarFallback = (str) => {
      throw new SyntaxError(`Unresolved plain scalar ${JSON.stringify(str)}`);
    };
    var boolStringify = ({
      value
    }) => value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr;
    var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
    function intResolve(sign, src, radix) {
      let str = src.replace(/_/g, "");
      if (resolveSeq.intOptions.asBigInt) {
        switch (radix) {
          case 2:
            str = `0b${str}`;
            break;
          case 8:
            str = `0o${str}`;
            break;
          case 16:
            str = `0x${str}`;
            break;
        }
        const n2 = BigInt(str);
        return sign === "-" ? BigInt(-1) * n2 : n2;
      }
      const n = parseInt(str, radix);
      return sign === "-" ? -1 * n : n;
    }
    function intStringify(node, radix, prefix) {
      const {
        value
      } = node;
      if (intIdentify(value)) {
        const str = value.toString(radix);
        return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
      }
      return resolveSeq.stringifyNumber(node);
    }
    var yaml11 = failsafe.concat([{
      identify: (value) => value == null,
      createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,
      default: true,
      tag: "tag:yaml.org,2002:null",
      test: /^(?:~|[Nn]ull|NULL)?$/,
      resolve: () => null,
      options: resolveSeq.nullOptions,
      stringify: () => resolveSeq.nullOptions.nullStr
    }, {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
      resolve: () => true,
      options: resolveSeq.boolOptions,
      stringify: boolStringify
    }, {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
      resolve: () => false,
      options: resolveSeq.boolOptions,
      stringify: boolStringify
    }, {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "BIN",
      test: /^([-+]?)0b([0-1_]+)$/,
      resolve: (str, sign, bin) => intResolve(sign, bin, 2),
      stringify: (node) => intStringify(node, 2, "0b")
    }, {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "OCT",
      test: /^([-+]?)0([0-7_]+)$/,
      resolve: (str, sign, oct) => intResolve(sign, oct, 8),
      stringify: (node) => intStringify(node, 8, "0")
    }, {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^([-+]?)([0-9][0-9_]*)$/,
      resolve: (str, sign, abs) => intResolve(sign, abs, 10),
      stringify: resolveSeq.stringifyNumber
    }, {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "HEX",
      test: /^([-+]?)0x([0-9a-fA-F_]+)$/,
      resolve: (str, sign, hex) => intResolve(sign, hex, 16),
      stringify: (node) => intStringify(node, 16, "0x")
    }, {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^(?:[-+]?\.inf|(\.nan))$/i,
      resolve: (str, nan) => nan ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
      stringify: resolveSeq.stringifyNumber
    }, {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      format: "EXP",
      test: /^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,
      resolve: (str) => parseFloat(str.replace(/_/g, "")),
      stringify: ({
        value
      }) => Number(value).toExponential()
    }, {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,
      resolve(str, frac) {
        const node = new resolveSeq.Scalar(parseFloat(str.replace(/_/g, "")));
        if (frac) {
          const f = frac.replace(/_/g, "");
          if (f[f.length - 1] === "0")
            node.minFractionDigits = f.length;
        }
        return node;
      },
      stringify: resolveSeq.stringifyNumber
    }], warnings.binary, warnings.omap, warnings.pairs, warnings.set, warnings.intTime, warnings.floatTime, warnings.timestamp);
    var schemas = {
      core,
      failsafe,
      json,
      yaml11
    };
    var tags = {
      binary: warnings.binary,
      bool: boolObj,
      float: floatObj,
      floatExp: expObj,
      floatNaN: nanObj,
      floatTime: warnings.floatTime,
      int: intObj,
      intHex: hexObj,
      intOct: octObj,
      intTime: warnings.intTime,
      map,
      null: nullObj,
      omap: warnings.omap,
      pairs: warnings.pairs,
      seq,
      set: warnings.set,
      timestamp: warnings.timestamp
    };
    function findTagObject(value, tagName, tags2) {
      if (tagName) {
        const match = tags2.filter((t) => t.tag === tagName);
        const tagObj = match.find((t) => !t.format) || match[0];
        if (!tagObj)
          throw new Error(`Tag ${tagName} not found`);
        return tagObj;
      }
      return tags2.find((t) => (t.identify && t.identify(value) || t.class && value instanceof t.class) && !t.format);
    }
    function createNode(value, tagName, ctx) {
      if (value instanceof resolveSeq.Node)
        return value;
      const {
        defaultPrefix,
        onTagObj,
        prevObjects,
        schema,
        wrapScalars
      } = ctx;
      if (tagName && tagName.startsWith("!!"))
        tagName = defaultPrefix + tagName.slice(2);
      let tagObj = findTagObject(value, tagName, schema.tags);
      if (!tagObj) {
        if (typeof value.toJSON === "function")
          value = value.toJSON();
        if (!value || typeof value !== "object")
          return wrapScalars ? new resolveSeq.Scalar(value) : value;
        tagObj = value instanceof Map ? map : value[Symbol.iterator] ? seq : map;
      }
      if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
      }
      const obj = {
        value: void 0,
        node: void 0
      };
      if (value && typeof value === "object" && prevObjects) {
        const prev = prevObjects.get(value);
        if (prev) {
          const alias = new resolveSeq.Alias(prev);
          ctx.aliasNodes.push(alias);
          return alias;
        }
        obj.value = value;
        prevObjects.set(value, obj);
      }
      obj.node = tagObj.createNode ? tagObj.createNode(ctx.schema, value, ctx) : wrapScalars ? new resolveSeq.Scalar(value) : value;
      if (tagName && obj.node instanceof resolveSeq.Node)
        obj.node.tag = tagName;
      return obj.node;
    }
    function getSchemaTags(schemas2, knownTags, customTags, schemaId) {
      let tags2 = schemas2[schemaId.replace(/\W/g, "")];
      if (!tags2) {
        const keys = Object.keys(schemas2).map((key) => JSON.stringify(key)).join(", ");
        throw new Error(`Unknown schema "${schemaId}"; use one of ${keys}`);
      }
      if (Array.isArray(customTags)) {
        for (const tag of customTags)
          tags2 = tags2.concat(tag);
      } else if (typeof customTags === "function") {
        tags2 = customTags(tags2.slice());
      }
      for (let i = 0; i < tags2.length; ++i) {
        const tag = tags2[i];
        if (typeof tag === "string") {
          const tagObj = knownTags[tag];
          if (!tagObj) {
            const keys = Object.keys(knownTags).map((key) => JSON.stringify(key)).join(", ");
            throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
          }
          tags2[i] = tagObj;
        }
      }
      return tags2;
    }
    var sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
    var Schema2 = class _Schema {
      // TODO: remove in v2
      // TODO: remove in v2
      constructor({
        customTags,
        merge: merge2,
        schema,
        sortMapEntries,
        tags: deprecatedCustomTags
      }) {
        this.merge = !!merge2;
        this.name = schema;
        this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;
        if (!customTags && deprecatedCustomTags)
          warnings.warnOptionDeprecation("tags", "customTags");
        this.tags = getSchemaTags(schemas, tags, customTags || deprecatedCustomTags, schema);
      }
      createNode(value, wrapScalars, tagName, ctx) {
        const baseCtx = {
          defaultPrefix: _Schema.defaultPrefix,
          schema: this,
          wrapScalars
        };
        const createCtx = ctx ? Object.assign(ctx, baseCtx) : baseCtx;
        return createNode(value, tagName, createCtx);
      }
      createPair(key, value, ctx) {
        if (!ctx)
          ctx = {
            wrapScalars: true
          };
        const k = this.createNode(key, ctx.wrapScalars, null, ctx);
        const v = this.createNode(value, ctx.wrapScalars, null, ctx);
        return new resolveSeq.Pair(k, v);
      }
    };
    PlainValue._defineProperty(Schema2, "defaultPrefix", PlainValue.defaultTagPrefix);
    PlainValue._defineProperty(Schema2, "defaultTags", PlainValue.defaultTags);
    exports2.Schema = Schema2;
  }
});

// node_modules/yaml/dist/types.js
var require_types2 = __commonJS({
  "node_modules/yaml/dist/types.js"(exports2) {
    "use strict";
    var resolveSeq = require_resolveSeq_d03cb037();
    var Schema2 = require_Schema_88e323a7();
    require_PlainValue_ec8e588e();
    require_warnings_1000a372();
    exports2.Alias = resolveSeq.Alias;
    exports2.Collection = resolveSeq.Collection;
    exports2.Merge = resolveSeq.Merge;
    exports2.Node = resolveSeq.Node;
    exports2.Pair = resolveSeq.Pair;
    exports2.Scalar = resolveSeq.Scalar;
    exports2.YAMLMap = resolveSeq.YAMLMap;
    exports2.YAMLSeq = resolveSeq.YAMLSeq;
    exports2.binaryOptions = resolveSeq.binaryOptions;
    exports2.boolOptions = resolveSeq.boolOptions;
    exports2.intOptions = resolveSeq.intOptions;
    exports2.nullOptions = resolveSeq.nullOptions;
    exports2.strOptions = resolveSeq.strOptions;
    exports2.Schema = Schema2.Schema;
  }
});

// node_modules/yaml/types.mjs
var import_types2, binaryOptions, boolOptions, intOptions, nullOptions, strOptions, Schema, Alias, Collection, Merge, Node, Pair, Scalar, YAMLMap, YAMLSeq;
var init_types2 = __esm({
  "node_modules/yaml/types.mjs"() {
    import_types2 = __toESM(require_types2(), 1);
    binaryOptions = import_types2.default.binaryOptions;
    boolOptions = import_types2.default.boolOptions;
    intOptions = import_types2.default.intOptions;
    nullOptions = import_types2.default.nullOptions;
    strOptions = import_types2.default.strOptions;
    Schema = import_types2.default.Schema;
    Alias = import_types2.default.Alias;
    Collection = import_types2.default.Collection;
    Merge = import_types2.default.Merge;
    Node = import_types2.default.Node;
    Pair = import_types2.default.Pair;
    Scalar = import_types2.default.Scalar;
    YAMLMap = import_types2.default.YAMLMap;
    YAMLSeq = import_types2.default.YAMLSeq;
  }
});

// src/lib/renderers/yaml.mjs
function getIn(obj, path) {
  return path.reduce((v, k) => k in v ? v[k] : {}, obj);
}
function addComments(context, path, commentNode, iterNode = commentNode) {
  const { title, description, comment } = getIn(context, path);
  const lines = [];
  if (option_default("renderTitle") && title) {
    lines.push(` ${title}`, "");
  }
  if (option_default("renderDescription") && description) {
    lines.push(` ${description}`);
  }
  if (option_default("renderComment") && comment) {
    lines.push(` ${comment}`);
  }
  commentNode.commentBefore = lines.join("\n");
  if (iterNode instanceof YAMLMap) {
    iterNode.items.forEach((n) => {
      addComments(context, [...path, "items", n.key.value], n.key, n.value);
    });
  } else if (iterNode instanceof YAMLSeq) {
    iterNode.items.forEach((n, i) => {
      addComments(context, [...path, "items", i], n);
    });
  }
}
function renderYAML({ value, context }) {
  const nodes = yaml_default.createNode(value);
  addComments(context, [], nodes);
  const doc = new yaml_default.Document();
  doc.contents = nodes;
  return doc.toString();
}
var yaml_default;
var init_yaml = __esm({
  "src/lib/renderers/yaml.mjs"() {
    init_yaml();
    init_types2();
    init_option();
    yaml_default = renderYAML;
  }
});

// src/lib/renderers/index.mjs
var init_renderers = __esm({
  "src/lib/renderers/index.mjs"() {
    init_js();
    init_yaml();
  }
});

// src/lib/index.mjs
function setupKeywords() {
  container.define("autoIncrement", function autoIncrement(value, schema) {
    if (!this.offset) {
      const min = schema.minimum || 1;
      const max = min + constants_default.MAX_NUMBER;
      const offset = value.initialOffset || schema.initialOffset;
      this.offset = offset || random_default.number(min, max);
    }
    if (value) {
      return this.offset++;
    }
    return schema;
  });
  container.define("sequentialDate", function sequentialDate(value, schema) {
    if (!this.now) {
      this.now = random_default.date();
    }
    if (value) {
      schema = this.now.toISOString();
      value = value === true ? "days" : value;
      if (["seconds", "minutes", "hours", "days", "weeks", "months", "years"].indexOf(value) === -1) {
        throw new Error(`Unsupported increment by ${utils_default.short(value)}`);
      }
      this.now.setTime(this.now.getTime() + random_default.date(value));
    }
    return schema;
  });
}
function getRefs(refs, schema) {
  let $refs = {};
  if (Array.isArray(refs)) {
    refs.forEach((_schema) => {
      $refs[_schema.$id || _schema.id] = _schema;
    });
  } else {
    $refs = refs || {};
  }
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return;
    if (Array.isArray(obj))
      return obj.forEach(walk);
    const _id = obj.$id || obj.id;
    if (typeof _id === "string" && !$refs[_id]) {
      $refs[_id] = obj;
    }
    Object.keys(obj).forEach((key) => {
      walk(obj[key]);
    });
  }
  walk(refs);
  walk(schema);
  return $refs;
}
var container, jsf, JSONSchemaFaker, lib_default;
var init_lib = __esm({
  "src/lib/index.mjs"() {
    init_vendor();
    init_Container();
    init_format();
    init_option();
    init_constants();
    init_random();
    init_utils();
    init_run();
    init_renderers();
    container = new Container_default();
    jsf = (schema, refs, cwd) => {
      console.debug("[json-schema-faker] calling JSONSchemaFaker() is deprecated, call either .generate() or .resolve()");
      if (cwd) {
        console.debug("[json-schema-faker] local references are only supported by calling .resolve()");
      }
      return jsf.generate(schema, refs);
    };
    jsf.generateWithContext = (schema, refs) => {
      const $refs = getRefs(refs, schema);
      return run_default($refs, schema, container, true);
    };
    jsf.generate = (schema, refs) => js_default(
      jsf.generateWithContext(schema, refs)
    );
    jsf.generateYAML = (schema, refs) => yaml_default(
      jsf.generateWithContext(schema, refs)
    );
    jsf.resolveWithContext = (schema, refs, cwd) => {
      if (typeof refs === "string") {
        cwd = refs;
        refs = {};
      }
      cwd = cwd || (typeof process !== "undefined" && typeof process.cwd === "function" ? process.cwd() : "");
      cwd = `${cwd.replace(/\/+$/, "")}/`;
      const $refs = getRefs(refs, schema);
      const fixedRefs = {
        order: 1,
        canRead(file) {
          const key = file.url.replace("/:", ":");
          return $refs[key] || $refs[key.split("/").pop()];
        },
        read(file, callback) {
          try {
            callback(null, this.canRead(file));
          } catch (e) {
            callback(e);
          }
        }
      };
      const { $RefParser: $RefParser2 } = getDependencies();
      return $RefParser2.bundle(cwd, schema, {
        resolve: {
          file: { order: 100 },
          http: { order: 200 },
          fixedRefs
        },
        dereference: {
          circular: "ignore"
        }
      }).then((sub) => run_default($refs, sub, container)).catch((e) => {
        throw new Error(`Error while resolving schema (${e.message})`);
      });
    };
    jsf.resolve = (schema, refs, cwd) => jsf.resolveWithContext(schema, refs, cwd).then(js_default);
    jsf.resolveYAML = (schema, refs, cwd) => jsf.resolveWithContext(schema, refs, cwd).then(yaml_default);
    setupKeywords();
    jsf.format = format_default;
    jsf.option = option_default;
    jsf.random = random_default;
    jsf.extend = (name, cb) => {
      container.extend(name, cb);
      return jsf;
    };
    jsf.define = (name, cb) => {
      container.define(name, cb);
      return jsf;
    };
    jsf.reset = (name) => {
      container.reset(name);
      setupKeywords();
      return jsf;
    };
    jsf.locate = (name) => {
      return container.get(name);
    };
    jsf.VERSION = "0.5.8";
    JSONSchemaFaker = { ...jsf };
    lib_default = jsf;
  }
});

// src/lib/main.mjs
var main_exports = {};
__export(main_exports, {
  JSONSchemaFaker: () => JSONSchemaFaker,
  default: () => lib_default
});
var import_json_schema_ref_parser, import_jsonpath_plus;
var init_main = __esm({
  "src/lib/main.mjs"() {
    import_json_schema_ref_parser = __toESM(__webpack_require__(300), 1);
    import_jsonpath_plus = __webpack_require__(354);
    init_vendor();
    init_lib();
    setDependencies({ $RefParser: import_json_schema_ref_parser.default, JSONPath: import_jsonpath_plus.JSONPath });
  }
});

// src/src/main.cjs.js
var jsf2 = (init_main(), __toCommonJS(main_exports)).default;
module.exports = jsf2;
module.exports.JSONSchemaFaker = { ...jsf2 };


/***/ }),
/* 300 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Options = __webpack_require__(301),
    $Refs = __webpack_require__(343),
    parse = __webpack_require__(346),
    normalizeArgs = __webpack_require__(348),
    resolveExternal = __webpack_require__(349),
    bundle = __webpack_require__(350),
    dereference = __webpack_require__(351),
    url = __webpack_require__(341),
    maybe = __webpack_require__(352),
    ono = __webpack_require__(336);

module.exports = $RefParser;
module.exports.YAML = __webpack_require__(304);

/**
 * This class parses a JSON schema, builds a map of its JSON references and their resolved values,
 * and provides methods for traversing, manipulating, and dereferencing those references.
 *
 * @constructor
 */
function $RefParser () {
  /**
   * The parsed (and possibly dereferenced) JSON schema object
   *
   * @type {object}
   * @readonly
   */
  this.schema = null;

  /**
   * The resolved JSON references
   *
   * @type {$Refs}
   * @readonly
   */
  this.$refs = new $Refs();
}

/**
 * Parses the given JSON schema.
 * This method does not resolve any JSON references.
 * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed
 * @param {function} [callback] - An error-first callback. The second parameter is the parsed JSON schema object.
 * @returns {Promise} - The returned promise resolves with the parsed JSON schema object.
 */
$RefParser.parse = function (path, schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.parse.apply(instance, arguments);
};

/**
 * Parses the given JSON schema.
 * This method does not resolve any JSON references.
 * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed
 * @param {function} [callback] - An error-first callback. The second parameter is the parsed JSON schema object.
 * @returns {Promise} - The returned promise resolves with the parsed JSON schema object.
 */
$RefParser.prototype.parse = function (path, schema, options, callback) {
  var args = normalizeArgs(arguments);
  var promise;

  if (!args.path && !args.schema) {
    var err = ono("Expected a file path, URL, or object. Got %s", args.path || args.schema);
    return maybe(args.callback, Promise.reject(err));
  }

  // Reset everything
  this.schema = null;
  this.$refs = new $Refs();

  // If the path is a filesystem path, then convert it to a URL.
  // NOTE: According to the JSON Reference spec, these should already be URLs,
  // but, in practice, many people use local filesystem paths instead.
  // So we're being generous here and doing the conversion automatically.
  // This is not intended to be a 100% bulletproof solution.
  // If it doesn't work for your use-case, then use a URL instead.
  var pathType = "http";
  if (url.isFileSystemPath(args.path)) {
    args.path = url.fromFileSystemPath(args.path);
    pathType = "file";
  }

  // Resolve the absolute path of the schema
  args.path = url.resolve(url.cwd(), args.path);

  if (args.schema && typeof args.schema === "object") {
    // A schema object was passed-in.
    // So immediately add a new $Ref with the schema object as its value
    var $ref = this.$refs._add(args.path);
    $ref.value = args.schema;
    $ref.pathType = pathType;
    promise = Promise.resolve(args.schema);
  }
  else {
    // Parse the schema file/url
    promise = parse(args.path, this.$refs, args.options);
  }

  var me = this;
  return promise
    .then(function (result) {
      if (!result || typeof result !== "object" || Buffer.isBuffer(result)) {
        throw ono.syntax('"%s" is not a valid JSON Schema', me.$refs._root$Ref.path || result);
      }
      else {
        me.schema = result;
        return maybe(args.callback, Promise.resolve(me.schema));
      }
    })
    .catch(function (e) {
      return maybe(args.callback, Promise.reject(e));
    });
};

/**
 * Parses the given JSON schema and resolves any JSON references, including references in
 * externally-referenced files.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed and resolved
 * @param {function} [callback]
 * - An error-first callback. The second parameter is a {@link $Refs} object containing the resolved JSON references
 *
 * @returns {Promise}
 * The returned promise resolves with a {@link $Refs} object containing the resolved JSON references
 */
$RefParser.resolve = function (path, schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.resolve.apply(instance, arguments);
};

/**
 * Parses the given JSON schema and resolves any JSON references, including references in
 * externally-referenced files.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed and resolved
 * @param {function} [callback]
 * - An error-first callback. The second parameter is a {@link $Refs} object containing the resolved JSON references
 *
 * @returns {Promise}
 * The returned promise resolves with a {@link $Refs} object containing the resolved JSON references
 */
$RefParser.prototype.resolve = function (path, schema, options, callback) {
  var me = this;
  var args = normalizeArgs(arguments);

  return this.parse(args.path, args.schema, args.options)
    .then(function () {
      return resolveExternal(me, args.options);
    })
    .then(function () {
      return maybe(args.callback, Promise.resolve(me.$refs));
    })
    .catch(function (err) {
      return maybe(args.callback, Promise.reject(err));
    });
};

/**
 * Parses the given JSON schema, resolves any JSON references, and bundles all external references
 * into the main JSON schema. This produces a JSON schema that only has *internal* references,
 * not any *external* references.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the bundled JSON schema object
 * @returns {Promise} - The returned promise resolves with the bundled JSON schema object.
 */
$RefParser.bundle = function (path, schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.bundle.apply(instance, arguments);
};

/**
 * Parses the given JSON schema, resolves any JSON references, and bundles all external references
 * into the main JSON schema. This produces a JSON schema that only has *internal* references,
 * not any *external* references.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the bundled JSON schema object
 * @returns {Promise} - The returned promise resolves with the bundled JSON schema object.
 */
$RefParser.prototype.bundle = function (path, schema, options, callback) {
  var me = this;
  var args = normalizeArgs(arguments);

  return this.resolve(args.path, args.schema, args.options)
    .then(function () {
      bundle(me, args.options);
      return maybe(args.callback, Promise.resolve(me.schema));
    })
    .catch(function (err) {
      return maybe(args.callback, Promise.reject(err));
    });
};

/**
 * Parses the given JSON schema, resolves any JSON references, and dereferences the JSON schema.
 * That is, all JSON references are replaced with their resolved values.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the dereferenced JSON schema object
 * @returns {Promise} - The returned promise resolves with the dereferenced JSON schema object.
 */
$RefParser.dereference = function (path, schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.dereference.apply(instance, arguments);
};

/**
 * Parses the given JSON schema, resolves any JSON references, and dereferences the JSON schema.
 * That is, all JSON references are replaced with their resolved values.
 *
 * @param {string} [path] - The file path or URL of the JSON schema
 * @param {object} [schema] - A JSON schema object. This object will be used instead of reading from `path`.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the dereferenced JSON schema object
 * @returns {Promise} - The returned promise resolves with the dereferenced JSON schema object.
 */
$RefParser.prototype.dereference = function (path, schema, options, callback) {
  var me = this;
  var args = normalizeArgs(arguments);

  return this.resolve(args.path, args.schema, args.options)
    .then(function () {
      dereference(me, args.options);
      return maybe(args.callback, Promise.resolve(me.schema));
    })
    .catch(function (err) {
      return maybe(args.callback, Promise.reject(err));
    });
};


/***/ }),
/* 301 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* eslint lines-around-comment: [2, {beforeBlockComment: false}] */


var jsonParser = __webpack_require__(302),
    yamlParser = __webpack_require__(303),
    textParser = __webpack_require__(338),
    binaryParser = __webpack_require__(339),
    fileResolver = __webpack_require__(340),
    httpResolver = __webpack_require__(342);

module.exports = $RefParserOptions;

/**
 * Options that determine how JSON schemas are parsed, resolved, and dereferenced.
 *
 * @param {object|$RefParserOptions} [options] - Overridden options
 * @constructor
 */
function $RefParserOptions (options) {
  merge(this, $RefParserOptions.defaults);
  merge(this, options);
}

$RefParserOptions.defaults = {
  /**
   * Determines how different types of files will be parsed.
   *
   * You can add additional parsers of your own, replace an existing one with
   * your own implemenation, or disable any parser by setting it to false.
   */
  parse: {
    json: jsonParser,
    yaml: yamlParser,
    text: textParser,
    binary: binaryParser,
  },

  /**
   * Determines how JSON References will be resolved.
   *
   * You can add additional resolvers of your own, replace an existing one with
   * your own implemenation, or disable any resolver by setting it to false.
   */
  resolve: {
    file: fileResolver,
    http: httpResolver,

    /**
     * Determines whether external $ref pointers will be resolved.
     * If this option is disabled, then none of above resolvers will be called.
     * Instead, external $ref pointers will simply be ignored.
     *
     * @type {boolean}
     */
    external: true,
  },

  /**
   * Determines the types of JSON references that are allowed.
   */
  dereference: {
    /**
     * Dereference circular (recursive) JSON references?
     * If false, then a {@link ReferenceError} will be thrown if a circular reference is found.
     * If "ignore", then circular references will not be dereferenced.
     *
     * @type {boolean|string}
     */
    circular: true
  },
};

/**
 * Merges the properties of the source object into the target object.
 *
 * @param {object} target - The object that we're populating
 * @param {?object} source - The options that are being merged
 * @returns {object}
 */
function merge (target, source) {
  if (isMergeable(source)) {
    var keys = Object.keys(source);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var sourceSetting = source[key];
      var targetSetting = target[key];

      if (isMergeable(sourceSetting)) {
        // It's a nested object, so merge it recursively
        target[key] = merge(targetSetting || {}, sourceSetting);
      }
      else if (sourceSetting !== undefined) {
        // It's a scalar value, function, or array. No merging necessary. Just overwrite the target value.
        target[key] = sourceSetting;
      }
    }
  }
  return target;
}

/**
 * Determines whether the given value can be merged,
 * or if it is a scalar value that should just override the target value.
 *
 * @param   {*}  val
 * @returns {Boolean}
 */
function isMergeable (val) {
  return val &&
    (typeof val === "object") &&
    !Array.isArray(val) &&
    !(val instanceof RegExp) &&
    !(val instanceof Date);
}


/***/ }),
/* 302 */
/***/ ((module) => {

"use strict";


module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 100,

  /**
   * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that match will be tried, in order, until one successfully parses the file.
   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
   * every parser will be tried.
   *
   * @type {RegExp|string[]|function}
   */
  canParse: ".json",

  /**
   * Parses the given file as JSON
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise}
   */
  parse: function parseJSON (file) {
    return new Promise(function (resolve, reject) {
      var data = file.data;
      if (Buffer.isBuffer(data)) {
        data = data.toString();
      }

      if (typeof data === "string") {
        if (data.trim().length === 0) {
          resolve(undefined);  // This mirrors the YAML behavior
        }
        else {
          resolve(JSON.parse(data));
        }
      }
      else {
        // data is already a JavaScript value (object, array, number, null, NaN, etc.)
        resolve(data);
      }
    });
  }
};


/***/ }),
/* 303 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAML = __webpack_require__(304);

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 200,

  /**
   * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that match will be tried, in order, until one successfully parses the file.
   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
   * every parser will be tried.
   *
   * @type {RegExp|string[]|function}
   */
  canParse: [".yaml", ".yml", ".json"],  // JSON is valid YAML

  /**
   * Parses the given file as YAML
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise}
   */
  parse: function parseYAML (file) {
    return new Promise(function (resolve, reject) {
      var data = file.data;
      if (Buffer.isBuffer(data)) {
        data = data.toString();
      }

      if (typeof data === "string") {
        resolve(YAML.parse(data));
      }
      else {
        // data is already a JavaScript value (object, array, number, null, NaN, etc.)
        resolve(data);
      }
    });
  }
};


/***/ }),
/* 304 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* eslint lines-around-comment: [2, {beforeBlockComment: false}] */


var yaml = __webpack_require__(305),
    ono = __webpack_require__(336);

/**
 * Simple YAML parsing functions, similar to {@link JSON.parse} and {@link JSON.stringify}
 */
module.exports = {
  /**
   * Parses a YAML string and returns the value.
   *
   * @param {string} text - The YAML string to be parsed
   * @param {function} [reviver] - Not currently supported. Provided for consistency with {@link JSON.parse}
   * @returns {*}
   */
  parse: function yamlParse (text, reviver) {
    try {
      return yaml.safeLoad(text);
    }
    catch (e) {
      if (e instanceof Error) {
        throw e;
      }
      else {
        // https://github.com/nodeca/js-yaml/issues/153
        throw ono(e, e.message);
      }
    }
  },

  /**
   * Converts a JavaScript value to a YAML string.
   *
   * @param   {*} value - The value to convert to YAML
   * @param   {function|array} replacer - Not currently supported. Provided for consistency with {@link JSON.stringify}
   * @param   {string|number} space - The number of spaces to use for indentation, or a string containing the number of spaces.
   * @returns {string}
   */
  stringify: function yamlStringify (value, replacer, space) {
    try {
      var indent = (typeof space === "string" ? space.length : space) || 2;
      return yaml.safeDump(value, { indent: indent });
    }
    catch (e) {
      if (e instanceof Error) {
        throw e;
      }
      else {
        // https://github.com/nodeca/js-yaml/issues/153
        throw ono(e, e.message);
      }
    }
  }
};


/***/ }),
/* 305 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var yaml = __webpack_require__(306);


module.exports = yaml;


/***/ }),
/* 306 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var loader = __webpack_require__(307);
var dumper = __webpack_require__(335);


function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
  };
}


module.exports.Type = __webpack_require__(313);
module.exports.Schema = __webpack_require__(312);
module.exports.FAILSAFE_SCHEMA = __webpack_require__(316);
module.exports.JSON_SCHEMA = __webpack_require__(315);
module.exports.CORE_SCHEMA = __webpack_require__(314);
module.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(311);
module.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(330);
module.exports.load                = loader.load;
module.exports.loadAll             = loader.loadAll;
module.exports.safeLoad            = loader.safeLoad;
module.exports.safeLoadAll         = loader.safeLoadAll;
module.exports.dump                = dumper.dump;
module.exports.safeDump            = dumper.safeDump;
module.exports.YAMLException = __webpack_require__(309);

// Deprecated schema names from JS-YAML 2.0.x
module.exports.MINIMAL_SCHEMA = __webpack_require__(316);
module.exports.SAFE_SCHEMA = __webpack_require__(311);
module.exports.DEFAULT_SCHEMA = __webpack_require__(330);

// Deprecated functions from JS-YAML 1.x.x
module.exports.scan           = deprecated('scan');
module.exports.parse          = deprecated('parse');
module.exports.compose        = deprecated('compose');
module.exports.addConstructor = deprecated('addConstructor');


/***/ }),
/* 307 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len,no-use-before-define*/

var common              = __webpack_require__(308);
var YAMLException       = __webpack_require__(309);
var Mark                = __webpack_require__(310);
var DEFAULT_SAFE_SCHEMA = __webpack_require__(311);
var DEFAULT_FULL_SCHEMA = __webpack_require__(330);


var _hasOwnProperty = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || DEFAULT_FULL_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  this.legacy    = options['legacy']    || false;
  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  return new YAMLException(
    message,
    new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty.call(overridableKeys, keyNode) &&
        _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }
    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = {},
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _pos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = {},
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.
    _pos = state.position;

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }

    } else {
      break; // Reading is done. Go to the epilogue.
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if (state.lineIndent > nodeIndent && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      // Implicit resolving is not allowed for non-scalar types, and '?'
      // non-specific tag is only automatically assigned to plain scalars.
      //
      // We only need to check kind conformity in case user explicitly assigns '?'
      // tag, for example like this: "!<?> [0]"
      //
      if (state.result !== null && state.kind !== 'scalar') {
        throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
      }

      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];

        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
          state.result = type.construct(state.result);
          state.tag = type.tag;
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];

      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }

      if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched
        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
      } else {
        state.result = type.construct(state.result);
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException('expected a single document in the stream, but found more');
}


function safeLoadAll(input, iterator, options) {
  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}


function safeLoad(input, options) {
  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}


module.exports.loadAll     = loadAll;
module.exports.load        = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad    = safeLoad;


/***/ }),
/* 308 */
/***/ ((module) => {

"use strict";



function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


module.exports.isNothing      = isNothing;
module.exports.isObject       = isObject;
module.exports.toArray        = toArray;
module.exports.repeat         = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend         = extend;


/***/ }),
/* 309 */
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;


YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': ';

  result += this.reason || '(unknown reason)';

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString();
  }

  return result;
};


module.exports = YAMLException;


/***/ }),
/* 310 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var common = __webpack_require__(308);


function Mark(name, buffer, position, line, column) {
  this.name     = name;
  this.buffer   = buffer;
  this.position = position;
  this.line     = line;
  this.column   = column;
}


Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;

  if (!this.buffer) return null;

  indent = indent || 4;
  maxLength = maxLength || 75;

  head = '';
  start = this.position;

  while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;
    if (this.position - start > (maxLength / 2 - 1)) {
      head = ' ... ';
      start += 5;
      break;
    }
  }

  tail = '';
  end = this.position;

  while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;
    if (end - this.position > (maxLength / 2 - 1)) {
      tail = ' ... ';
      end -= 5;
      break;
    }
  }

  snippet = this.buffer.slice(start, end);

  return common.repeat(' ', indent) + head + snippet + tail + '\n' +
         common.repeat(' ', indent + this.position - start + head.length) + '^';
};


Mark.prototype.toString = function toString(compact) {
  var snippet, where = '';

  if (this.name) {
    where += 'in "' + this.name + '" ';
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

  if (!compact) {
    snippet = this.getSnippet();

    if (snippet) {
      where += ':\n' + snippet;
    }
  }

  return where;
};


module.exports = Mark;


/***/ }),
/* 311 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)





var Schema = __webpack_require__(312);


module.exports = new Schema({
  include: [
    __webpack_require__(314)
  ],
  implicit: [
    __webpack_require__(324),
    __webpack_require__(325)
  ],
  explicit: [
    __webpack_require__(326),
    __webpack_require__(327),
    __webpack_require__(328),
    __webpack_require__(329)
  ]
});


/***/ }),
/* 312 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len*/

var common        = __webpack_require__(308);
var YAMLException = __webpack_require__(309);
var Type          = __webpack_require__(313);


function compileList(schema, name, result) {
  var exclude = [];

  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result);
  });

  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });

    result.push(currentType);
  });

  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1;
  });
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index, length;

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema(definition) {
  this.include  = definition.include  || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];

  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
  });

  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);
}


Schema.DEFAULT = null;


Schema.create = function createSchema() {
  var schemas, types;

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  }

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  }

  if (!types.every(function (type) { return type instanceof Type; })) {
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  }

  return new Schema({
    include: schemas,
    explicit: types
  });
};


module.exports = Schema;


/***/ }),
/* 313 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__(309);

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.tag          = tag;
  this.kind         = options['kind']         || null;
  this.resolve      = options['resolve']      || function () { return true; };
  this.construct    = options['construct']    || function (data) { return data; };
  this.instanceOf   = options['instanceOf']   || null;
  this.predicate    = options['predicate']    || null;
  this.represent    = options['represent']    || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;


/***/ }),
/* 314 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.





var Schema = __webpack_require__(312);


module.exports = new Schema({
  include: [
    __webpack_require__(315)
  ]
});


/***/ }),
/* 315 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.





var Schema = __webpack_require__(312);


module.exports = new Schema({
  include: [
    __webpack_require__(316)
  ],
  implicit: [
    __webpack_require__(320),
    __webpack_require__(321),
    __webpack_require__(322),
    __webpack_require__(323)
  ]
});


/***/ }),
/* 316 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346





var Schema = __webpack_require__(312);


module.exports = new Schema({
  explicit: [
    __webpack_require__(317),
    __webpack_require__(318),
    __webpack_require__(319)
  ]
});


/***/ }),
/* 317 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});


/***/ }),
/* 318 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});


/***/ }),
/* 319 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});


/***/ }),
/* 320 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),
/* 321 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),
/* 322 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(308);
var Type   = __webpack_require__(313);

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }

    // base 8
    for (; index < max; index++) {
      ch = data[index];
      if (ch === '_') continue;
      if (!isOctCode(data.charCodeAt(index))) return false;
      hasDigits = true;
    }
    return hasDigits && ch !== '_';
  }

  // base 10 (except 0) or base 60

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (ch === ':') break;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  // if !base60 - done;
  if (ch !== ':') return true;

  // base60 almost not used, no needs to optimize
  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch, base, digits = [];

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10));
    });

    value = 0;
    base = 1;

    digits.forEach(function (d) {
      value += (d * base);
      base *= 60;
    });

    return sign * value;

  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0'  + obj.toString(8) : '-0'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});


/***/ }),
/* 323 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(308);
var Type   = __webpack_require__(313);

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // 20:59
  '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign, base, digits;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;
  digits = [];

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;

  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10));
    });

    value = 0.0;
    base = 1;

    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });

    return sign * value;

  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});


/***/ }),
/* 324 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});


/***/ }),
/* 325 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});


/***/ }),
/* 326 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-bitwise*/

var NodeBuffer;

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = undefined;
  NodeBuffer = (__webpack_require__(185).Buffer);
} catch (__) {}

var Type       = __webpack_require__(313);


// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  // Wrap into Buffer for NodeJS and leave Array for browser
  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }

  return result;
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object);
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});


/***/ }),
/* 327 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});


/***/ }),
/* 328 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});


/***/ }),
/* 329 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});


/***/ }),
/* 330 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `load` function.
// It is not described in the YAML specification.
//
// This schema is based on JS-YAML's default safe schema and includes
// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
//
// Also this schema is used as default base schema at `Schema.create` function.





var Schema = __webpack_require__(312);


module.exports = Schema.DEFAULT = new Schema({
  include: [
    __webpack_require__(311)
  ],
  explicit: [
    __webpack_require__(331),
    __webpack_require__(332),
    __webpack_require__(333)
  ]
});


/***/ }),
/* 331 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

function resolveJavascriptUndefined() {
  return true;
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined;
}

function representJavascriptUndefined() {
  return '';
}

function isUndefined(object) {
  return typeof object === 'undefined';
}

module.exports = new Type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});


/***/ }),
/* 332 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(313);

function resolveJavascriptRegExp(data) {
  if (data === null) return false;
  if (data.length === 0) return false;

  var regexp = data,
      tail   = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];

    if (modifiers.length > 3) return false;
    // if expression starts with /, is should be properly terminated
    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
  }

  return true;
}

function constructJavascriptRegExp(data) {
  var regexp = data,
      tail   = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // `/foo/gim` - tail can be maximum 4 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
  }

  return new RegExp(regexp, modifiers);
}

function representJavascriptRegExp(object /*, style*/) {
  var result = '/' + object.source + '/';

  if (object.global) result += 'g';
  if (object.multiline) result += 'm';
  if (object.ignoreCase) result += 'i';

  return result;
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]';
}

module.exports = new Type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp
});


/***/ }),
/* 333 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var esprima;

// Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//
try {
  // workaround to exclude package from browserify list.
  var _require = undefined;
  esprima = __webpack_require__(334);
} catch (_) {
  /* eslint-disable no-redeclare */
  /* global window */
  if (typeof window !== 'undefined') esprima = window.esprima;
}

var Type = __webpack_require__(313);

function resolveJavascriptFunction(data) {
  if (data === null) return false;

  try {
    var source = '(' + data + ')',
        ast    = esprima.parse(source, { range: true });

    if (ast.type                    !== 'Program'             ||
        ast.body.length             !== 1                     ||
        ast.body[0].type            !== 'ExpressionStatement' ||
        (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
          ast.body[0].expression.type !== 'FunctionExpression')) {
      return false;
    }

    return true;
  } catch (err) {
    return false;
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/

  var source = '(' + data + ')',
      ast    = esprima.parse(source, { range: true }),
      params = [],
      body;

  if (ast.type                    !== 'Program'             ||
      ast.body.length             !== 1                     ||
      ast.body[0].type            !== 'ExpressionStatement' ||
      (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
        ast.body[0].expression.type !== 'FunctionExpression')) {
    throw new Error('Failed to resolve function');
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name);
  });

  body = ast.body[0].expression.body.range;

  // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.
  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  }
  // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.
  /*eslint-disable no-new-func*/
  return new Function(params, 'return ' + source.slice(body[0], body[1]));
}

function representJavascriptFunction(object /*, style*/) {
  return object.toString();
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]';
}

module.exports = new Type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});


/***/ }),
/* 334 */
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(true)
		module.exports = factory();
	else // removed by dead control flow
{}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __nested_webpack_require_583__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_583__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_583__.m = modules;

/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_583__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_583__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_583__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __nested_webpack_require_1808__) {

	"use strict";
	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var comment_handler_1 = __nested_webpack_require_1808__(1);
	var jsx_parser_1 = __nested_webpack_require_1808__(3);
	var parser_1 = __nested_webpack_require_1808__(8);
	var tokenizer_1 = __nested_webpack_require_1808__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var isModule = false;
	    if (options && typeof options.sourceType === 'string') {
	        isModule = (options.sourceType === 'module');
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var program = isModule ? parser.parseModule() : parser.parseScript();
	    var ast = program;
	    if (collectComment && commentHandler) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function parseModule(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'module';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseModule = parseModule;
	function parseScript(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'script';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseScript = parseScript;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __nested_webpack_require_1808__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '4.0.1';


/***/ },
/* 1 */
/***/ function(module, exports, __nested_webpack_require_6456__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __nested_webpack_require_6456__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = entry.node;
	                this.stack.pop();
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(metadata);
	        var leadingComments = this.findLeadingComments(metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    AwaitExpression: 'AwaitExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __nested_webpack_require_15019__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var character_1 = __nested_webpack_require_15019__(4);
	var JSXNode = __nested_webpack_require_15019__(5);
	var jsx_syntax_1 = __nested_webpack_require_15019__(6);
	var Node = __nested_webpack_require_15019__(7);
	var parser_1 = __nested_webpack_require_15019__(8);
	var token_1 = __nested_webpack_require_15019__(13);
	var xhtml_entities_1 = __nested_webpack_require_15019__(14);
	token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
	token_1.TokenName[101 /* Text */] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = elementName;
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = elementName;
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = elementName;
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	        /* istanbul ignore next */
	        default:
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        return _super.call(this, code, options, delegate) || this;
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.line;
	        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: 8 /* StringLiteral */,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: 10 /* Template */,
	                value: '',
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: 100 /* Identifier */,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        return this.scanner.lex();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = {
	            type: 101 /* Text */,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.restoreState(state);
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === 7 /* Punctuator */ && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 100 /* Identifier */) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 8 /* StringLiteral */) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = element;
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = element;
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack[stack.length - 1];
	                    el.children.push(child);
	                    stack.pop();
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    JSXParser.prototype.isStartOfExpression = function () {
	        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    /* tslint:disable:no-bitwise */
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // https://tc39.github.io/ecma262/#sec-white-space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // https://tc39.github.io/ecma262/#sec-line-terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 5 */
/***/ function(module, exports, __nested_webpack_require_54354__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var jsx_syntax_1 = __nested_webpack_require_54354__(6);
	/* tslint:disable:max-classes-per-file */
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 7 */
/***/ function(module, exports, __nested_webpack_require_58416__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __nested_webpack_require_58416__(2);
	/* tslint:disable:max-classes-per-file */
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = false;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var AsyncArrowFunctionExpression = (function () {
	    function AsyncArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = true;
	    }
	    return AsyncArrowFunctionExpression;
	}());
	exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
	var AsyncFunctionDeclaration = (function () {
	    function AsyncFunctionDeclaration(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionDeclaration;
	}());
	exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
	var AsyncFunctionExpression = (function () {
	    function AsyncFunctionExpression(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionExpression;
	}());
	exports.AsyncFunctionExpression = AsyncFunctionExpression;
	var AwaitExpression = (function () {
	    function AwaitExpression(argument) {
	        this.type = syntax_1.Syntax.AwaitExpression;
	        this.argument = argument;
	    }
	    return AwaitExpression;
	}());
	exports.AwaitExpression = AwaitExpression;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var Module = (function () {
	    function Module(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'module';
	    }
	    return Module;
	}());
	exports.Module = Module;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, pattern, flags) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = { pattern: pattern, flags: flags };
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var Script = (function () {
	    function Script(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'script';
	    }
	    return Script;
	}());
	exports.Script = Script;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 8 */
/***/ function(module, exports, __nested_webpack_require_80491__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __nested_webpack_require_80491__(9);
	var error_handler_1 = __nested_webpack_require_80491__(10);
	var messages_1 = __nested_webpack_require_80491__(11);
	var Node = __nested_webpack_require_80491__(7);
	var scanner_1 = __nested_webpack_require_80491__(12);
	var syntax_1 = __nested_webpack_require_80491__(2);
	var token_1 = __nested_webpack_require_80491__(13);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.lookahead = {
	            type: 2 /* EOF */,
	            value: '',
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0,
	            start: 0,
	            end: 0
	        };
	        this.hasLineTerminator = false;
	        this.context = {
	            isModule: false,
	            await: false,
	            allowIn: true,
	            allowStrictDirective: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: false
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.line;
	        var column = this.lastMarker.column + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.column + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
	                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === 4 /* Keyword */) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
	            var column = token.start - lastMarkerLineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.line;
	            var column = this.lastMarker.column + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.line,
	                    column: this.startMarker.column
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.type === 9 /* RegularExpression */) {
	            var pattern = token.pattern;
	            var flags = token.flags;
	            t.regex = { pattern: pattern, flags: flags };
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        this.collectComments();
	        if (this.scanner.index !== this.startMarker.index) {
	            this.startMarker.index = this.scanner.index;
	            this.startMarker.line = this.scanner.lineNumber;
	            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        }
	        var next = this.scanner.lex();
	        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
	        if (next && this.context.strict && next.type === 3 /* Identifier */) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = 4 /* Keyword */;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== 2 /* EOF */) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.line,
	            column: this.startMarker.column
	        };
	    };
	    Parser.prototype.startNode = function (token, lastLineStart) {
	        if (lastLineStart === void 0) { lastLineStart = 0; }
	        var column = token.start - token.lineStart;
	        var line = token.lineNumber;
	        if (column < 0) {
	            column += lastLineStart;
	            line--;
	        }
	        return {
	            index: token.start,
	            line: line,
	            column: column
	        };
	    };
	    Parser.prototype.finalize = function (marker, node) {
	        if (this.config.range) {
	            node.range = [marker.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                    offset: marker.index
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === 7 /* Punctuator */ && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== 7 /* Punctuator */) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.line = this.startMarker.line;
	            this.lastMarker.column = this.startMarker.column;
	        }
	    };
	    // https://tc39.github.io/ecma262/#sec-primary-expression
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var token, raw;
	        switch (this.lookahead.type) {
	            case 3 /* Identifier */:
	                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 1 /* BooleanLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
	                break;
	            case 5 /* NullLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(null, raw));
	                break;
	            case 10 /* Template */:
	                expr = this.parseTemplateLiteral();
	                break;
	            case 7 /* Punctuator */:
	                switch (this.lookahead.value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
	                        break;
	                    default:
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case 4 /* Keyword */:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                expr = this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-array-initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // https://tc39.github.io/ecma262/#sec-object-initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = params.simple;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        var previousAwait = this.context.await;
	        this.context.allowYield = false;
	        this.context.await = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        this.context.await = previousAwait;
	        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key;
	        switch (token.type) {
	            case 8 /* StringLiteral */:
	            case 6 /* NumericLiteral */:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 3 /* Identifier */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 4 /* Keyword */:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case 7 /* Punctuator */:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    key = this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                key = this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        var isAsync = false;
	        if (token.type === 3 /* Identifier */) {
	            var id = token.value;
	            this.nextToken();
	            computed = this.match('[');
	            isAsync = !this.hasLineTerminator && (id === 'async') &&
	                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
	            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':') && !isAsync) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === 3 /* Identifier */) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== 10 /* Template */) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // https://tc39.github.io/ecma262/#sec-grouping-operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: [],
	                async: false
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr],
	                    async: false
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.lookahead.type !== 2 /* EOF */) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match(')')) {
	                            this.nextToken();
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr],
	                                async: false
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: parameters,
	                                async: false
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === 3 /* Identifier */ ||
	            token.type === 4 /* Keyword */ ||
	            token.type === 1 /* BooleanLiteral */ ||
	            token.type === 5 /* NullLiteral */;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseAsyncArgument = function () {
	        var arg = this.parseAssignmentExpression();
	        this.context.firstCoverInitializedNameError = null;
	        return arg;
	    };
	    Parser.prototype.parseAsyncArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAsyncArgument);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var maybeAsync = this.matchContextualKeyword('async');
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	                if (asyncArrow && this.match('=>')) {
	                    for (var i = 0; i < args.length; ++i) {
	                        this.reinterpretExpressionAsPattern(args[i]);
	                    }
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: args,
	                        async: true
	                    };
	                }
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-update-expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-unary-operators
	    Parser.prototype.parseAwaitExpression = function () {
	        var node = this.createNode();
	        this.nextToken();
	        var argument = this.parseUnaryExpression();
	        return this.finalize(node, new Node.AwaitExpression(argument));
	    };
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else if (this.context.await && this.matchContextualKeyword('await')) {
	            expr = this.parseAwaitExpression();
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-exp-operator
	    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
	    // https://tc39.github.io/ecma262/#sec-additive-operators
	    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
	    // https://tc39.github.io/ecma262/#sec-relational-operators
	    // https://tc39.github.io/ecma262/#sec-equality-operators
	    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === 7 /* Punctuator */) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === 4 /* Keyword */) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token.value, right];
	            var precedences = [prec];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
	                    right = stack.pop();
	                    var operator = stack.pop();
	                    precedences.pop();
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                stack.push(this.nextToken().value);
	                precedences.push(prec);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            var lastMarker = markers.pop();
	            while (i > 1) {
	                var marker = markers.pop();
	                var lastLineStart = lastMarker && lastMarker.lineStart;
	                var node = this.startNode(marker, lastLineStart);
	                var operator = stack[i - 1];
	                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
	                i -= 2;
	                lastMarker = marker;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-conditional-operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-assignment-operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectPattern:
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	            default:
	                break;
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        var asyncArrow = false;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                asyncArrow = expr.async;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            simple: true,
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            simple: options.simple,
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
	                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
	                    var arg = this.parsePrimaryExpression();
	                    this.reinterpretExpressionAsPattern(arg);
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: [arg],
	                        async: true
	                    };
	                }
	            }
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var isAsync = expr.async;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowStrictDirective = this.context.allowStrictDirective;
	                    this.context.allowStrictDirective = list.simple;
	                    var previousAllowYield = this.context.allowYield;
	                    var previousAwait = this.context.await;
	                    this.context.allowYield = true;
	                    this.context.await = isAsync;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = void 0;
	                    if (this.match('{')) {
	                        var previousAllowIn = this.context.allowIn;
	                        this.context.allowIn = true;
	                        body = this.parseFunctionSourceElements();
	                        this.context.allowIn = previousAllowIn;
	                    }
	                    else {
	                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    }
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
	                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowStrictDirective = previousAllowStrictDirective;
	                    this.context.allowYield = previousAllowYield;
	                    this.context.await = previousAwait;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = expr;
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var operator = token.value;
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-comma-operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.lookahead.type !== 2 /* EOF */) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === 4 /* Keyword */) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                if (this.match('=')) {
	                    this.nextToken();
	                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                }
	                else {
	                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
	                }
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.scanner.lex();
	        this.scanner.restoreState(state);
	        return (next.type === 3 /* Identifier */) ||
	            (next.type === 7 /* Punctuator */ && next.value === '[') ||
	            (next.type === 7 /* Punctuator */ && next.value === '{') ||
	            (next.type === 4 /* Keyword */ && next.value === 'let') ||
	            (next.type === 4 /* Keyword */ && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // https://tc39.github.io/ecma262/#sec-variable-statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== 3 /* Identifier */) {
	            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // https://tc39.github.io/ecma262/#sec-empty-statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-expression-statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // https://tc39.github.io/ecma262/#sec-if-statement
	    Parser.prototype.parseIfClause = function () {
	        if (this.context.strict && this.matchKeyword('function')) {
	            this.tolerateError(messages_1.Messages.StrictFunction);
	        }
	        return this.parseStatement();
	    };
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseIfClause();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseIfClause();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // https://tc39.github.io/ecma262/#sec-do-while-statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	        }
	        else {
	            this.expect(')');
	            if (this.match(';')) {
	                this.nextToken();
	            }
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // https://tc39.github.io/ecma262/#sec-while-statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-for-statement
	    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-continue-statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            label = id;
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-break-statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	            label = id;
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-return-statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = (!this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
	            this.lookahead.type === 8 /* StringLiteral */ ||
	            this.lookahead.type === 10 /* Template */;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-with-statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            body = this.parseStatement();
	        }
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-switch-statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // https://tc39.github.io/ecma262/#sec-labelled-statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = expr;
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var body = void 0;
	            if (this.matchKeyword('class')) {
	                this.tolerateUnexpectedToken(this.lookahead);
	                body = this.parseClassDeclaration();
	            }
	            else if (this.matchKeyword('function')) {
	                var token = this.lookahead;
	                var declaration = this.parseFunctionDeclaration();
	                if (this.context.strict) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
	                }
	                else if (declaration.generator) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
	                }
	                body = declaration;
	            }
	            else {
	                body = this.parseStatement();
	            }
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, body);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // https://tc39.github.io/ecma262/#sec-throw-statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-try-statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(param.name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // https://tc39.github.io/ecma262/#sec-debugger-statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
	    Parser.prototype.parseStatement = function () {
	        var statement;
	        switch (this.lookahead.type) {
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	            case 10 /* Template */:
	            case 9 /* RegularExpression */:
	                statement = this.parseExpressionStatement();
	                break;
	            case 7 /* Punctuator */:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case 3 /* Identifier */:
	                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
	                break;
	            case 4 /* Keyword */:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                statement = this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // https://tc39.github.io/ecma262/#sec-function-definitions
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.lookahead.type !== 2 /* EOF */) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	        options.params.push(param);
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            simple: true,
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.lookahead.type !== 2 /* EOF */) {
	                this.parseFormalParameter(options);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expect(',');
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return {
	            simple: options.simple,
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.matchAsyncFunction = function () {
	        var match = this.matchContextualKeyword('async');
	        if (match) {
	            var state = this.scanner.saveState();
	            this.scanner.scanComments();
	            var next = this.scanner.lex();
	            this.scanner.restoreState(state);
	            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
	        }
	        return match;
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
	            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
	            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== 8 /* StringLiteral */) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	                if (!this.context.allowStrictDirective) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // https://tc39.github.io/ecma262/#sec-method-definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case 3 /* Identifier */:
	            case 8 /* StringLiteral */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 4 /* Keyword */:
	                return true;
	            case 7 /* Punctuator */:
	                return token.value === '[';
	            default:
	                break;
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length > 0) {
	            this.tolerateError(messages_1.Messages.BadGetterArity);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length !== 1) {
	            this.tolerateError(messages_1.Messages.BadSetterArity);
	        }
	        else if (formalParameters.params[0] instanceof Node.RestElement) {
	            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case 7 /* Punctuator */:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case 4 /* Keyword */:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // https://tc39.github.io/ecma262/#sec-class-definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind = '';
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        var isAsync = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
	                var punctuator = this.lookahead.value;
	                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
	                    isAsync = true;
	                    token = this.lookahead;
	                    key = this.parseObjectPropertyKey();
	                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
	                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
	                    }
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || (value && value.generator)) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // https://tc39.github.io/ecma262/#sec-scripts
	    // https://tc39.github.io/ecma262/#sec-modules
	    Parser.prototype.parseModule = function () {
	        this.context.strict = true;
	        this.context.isModule = true;
	        this.scanner.isModule = true;
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Module(body));
	    };
	    Parser.prototype.parseScript = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Script(body));
	    };
	    // https://tc39.github.io/ecma262/#sec-imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== 8 /* StringLiteral */) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === 8 /* StringLiteral */) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // https://tc39.github.io/ecma262/#sec-exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchContextualKeyword('async')) {
	                // export default async function f () {}
	                // export default async function () {}
	                // export default async x => x
	                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === 4 /* Keyword */) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else if (this.matchAsyncFunction()) {
	            var declaration = this.parseFunctionDeclaration();
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	Object.defineProperty(exports, "__esModule", { value: true });
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:max-classes-per-file */
	Object.defineProperty(exports, "__esModule", { value: true });
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        /* istanbul ignore next */
	        return error;
	    };
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Error messages should be identical to V8.
	exports.Messages = {
	    BadGetterArity: 'Getter must not have any formal parameters',
	    BadSetterArity: 'Setter must have exactly one formal parameter',
	    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
	    ConstructorIsAsync: 'Class constructor may not be an async method',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateBinding: 'Duplicate binding %0',
	    DuplicateConstructor: 'A class may only have one constructor',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
	    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
	    IllegalBreak: 'Illegal break statement',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalExportDeclaration: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
	    IllegalReturn: 'Illegal return statement',
	    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
	    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    InvalidModuleSpecifier: 'Unexpected token',
	    InvalidRegExp: 'Invalid regular expression',
	    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
	    MissingFromClause: 'Unexpected token',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    UnexpectedEOS: 'Unexpected end of input',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnknownLabel: 'Undefined label \'%0\'',
	    UnterminatedRegExp: 'Invalid regular expression: missing /'
	};


/***/ },
/* 12 */
/***/ function(module, exports, __nested_webpack_require_226595__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __nested_webpack_require_226595__(9);
	var character_1 = __nested_webpack_require_226595__(4);
	var messages_1 = __nested_webpack_require_226595__(11);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.isModule = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    Scanner.prototype.saveState = function () {
	        return {
	            index: this.index,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart
	        };
	    };
	    Scanner.prototype.restoreState = function (state) {
	        this.index = state.index;
	        this.lineNumber = state.lineNumber;
	        this.lineStart = state.lineStart;
	    };
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    Scanner.prototype.tolerateUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    // https://tc39.github.io/ecma262/#sec-comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C && !this.isModule) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    // https://tc39.github.io/ecma262/#sec-future-reserved-words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    // https://tc39.github.io/ecma262/#sec-keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return null;
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = 3 /* Identifier */;
	        }
	        else if (this.isKeyword(id)) {
	            type = 4 /* Keyword */;
	        }
	        else if (id === 'null') {
	            type = 5 /* NullLiteral */;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = 1 /* BooleanLiteral */;
	        }
	        else {
	            type = 3 /* Identifier */;
	        }
	        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
	            var restore = this.index;
	            this.index = start;
	            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
	            this.index = restore;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var start = this.index;
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === start) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 7 /* Punctuator */,
	            value: str,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var num = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt('0x' + num, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var num = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var num = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            num = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (!octal && num.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var num = '';
	        if (ch !== '.') {
	            num = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (num === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            num += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            num += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                num += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    num += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseFloat(num),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-string-literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped_1 = this.scanHexEscape(ch);
	                                if (unescaped_1 === null) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped_1;
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            str += unescaped;
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 8 /* StringLiteral */,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped_2 = this.scanHexEscape(ch);
	                                if (unescaped_2 !== null) {
	                                    cooked += unescaped_2;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            cooked += unescaped;
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: 10 /* Template */,
	            value: this.source.slice(start + 1, this.index - rawOffset),
	            cooked: cooked,
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        return str.substr(1, str.length - 2);
	    };
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    var char = this.scanHexEscape('u');
	                    if (char !== null) {
	                        flags += char;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return flags;
	    };
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var pattern = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(pattern, flags);
	        return {
	            type: 9 /* RegularExpression */,
	            value: '',
	            pattern: pattern,
	            flags: flags,
	            regex: value,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: 2 /* EOF */,
	                value: '',
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenName = {};
	exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
	exports.TokenName[2 /* EOF */] = '<end>';
	exports.TokenName[3 /* Identifier */] = 'Identifier';
	exports.TokenName[4 /* Keyword */] = 'Keyword';
	exports.TokenName[5 /* NullLiteral */] = 'Null';
	exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
	exports.TokenName[7 /* Punctuator */] = 'Punctuator';
	exports.TokenName[8 /* StringLiteral */] = 'String';
	exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
	exports.TokenName[10 /* Template */] = 'Template';


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 15 */
/***/ function(module, exports, __nested_webpack_require_277122__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var error_handler_1 = __nested_webpack_require_277122__(10);
	var scanner_1 = __nested_webpack_require_277122__(12);
	var token_1 = __nested_webpack_require_277122__(13);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var keyword = this.values[this.paren - 1];
	                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check = this.values[this.curly - 4];
	                    regex = check ? !this.beforeFunctionExpression(check) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check = this.values[this.curly - 5];
	                    regex = check ? !this.beforeFunctionExpression(check) : true;
	                }
	                break;
	            default:
	                break;
	        }
	        return regex;
	    };
	    Reader.prototype.push = function (token) {
	        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    var comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
	                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
	                this.reader.push(token);
	                var entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.type === 9 /* RegularExpression */) {
	                    var pattern = token.pattern;
	                    var flags = token.flags;
	                    entry.regex = { pattern: pattern, flags: flags };
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;

/***/ }),
/* 335 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-use-before-define*/

var common              = __webpack_require__(308);
var YAMLException       = __webpack_require__(309);
var DEFAULT_FULL_SCHEMA = __webpack_require__(330);
var DEFAULT_SAFE_SCHEMA = __webpack_require__(311);

var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

function State(options) {
  this.schema        = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== 0xFEFF /* BOM */)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// [24] b-line-feed       ::=     #xA    /* LF */
// [25] b-carriage-return ::=     #xD    /* CR */
// [3]  c-byte-order-mark ::=     #xFEFF
function isNsChar(c) {
  return isPrintable(c) && !isWhitespace(c)
    // byte-order-mark
    && c !== 0xFEFF
    // b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// Simplified test for values allowed after the first character in plain style.
function isPlainSafe(c, prev) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return isPrintable(c) && c !== 0xFEFF
    // - c-flow-indicator
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // - ":" - "#"
    // /* An ns-char preceding */ "#"
    && c !== CHAR_COLON
    && ((c !== CHAR_SHARP) || (prev && isNsChar(prev)));
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return isPrintable(c) && c !== 0xFEFF
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char, prev_char;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(string.charCodeAt(0))
          && !isWhitespace(string.charCodeAt(string.length - 1));

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string)
      ? STYLE_PLAIN : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey) {
  state.dump = (function () {
    if (string.length === 0) {
      return "''";
    }
    if (!state.noCompatMode &&
        DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
      return "'" + string + "'";
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';
      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char, nextChar;
  var escapeSeq;

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i);
    // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").
    if (char >= 0xD800 && char <= 0xDBFF/* high surrogate */) {
      nextChar = string.charCodeAt(i + 1);
      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF/* low surrogate */) {
        // Combine the surrogate pair and store it escaped.
        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);
        // Advance index one extra since we already used that char here.
        i++; continue;
      }
    }
    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char)
      ? string[i]
      : escapeSeq || encodeHex(char);
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (index !== 0) pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      state.tag = explicit ? type.tag : '?';

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      var arrayLevel = (state.noArrayIndent && (level > 0)) ? level - 1 : level;
      if (block && (state.dump.length !== 0)) {
        writeBlockSequence(state, arrayLevel, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  if (writeNode(state, 0, input, true, true)) return state.dump + '\n';

  return '';
}

function safeDump(input, options) {
  return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}

module.exports.dump     = dump;
module.exports.safeDump = safeDump;


/***/ }),
/* 336 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var format = __webpack_require__(337);
var slice = Array.prototype.slice;
var protectedProperties = ["name", "message", "stack"];
var errorPrototypeProperties = [
  "name", "message", "description", "number", "code", "fileName", "lineNumber", "columnNumber",
  "sourceURL", "line", "column", "stack"
];

module.exports = create(Error);
module.exports.error = create(Error);
module.exports.eval = create(EvalError);
module.exports.range = create(RangeError);
module.exports.reference = create(ReferenceError);
module.exports.syntax = create(SyntaxError);
module.exports.type = create(TypeError);
module.exports.uri = create(URIError);
module.exports.formatter = format;

/**
 * Creates a new {@link ono} function that creates the given Error class.
 *
 * @param {Class} Klass - The Error subclass to create
 * @returns {ono}
 */
function create (Klass) {
  /**
   * @param {Error}   [err]     - The original error, if any
   * @param {object}  [props]   - An object whose properties will be added to the error object
   * @param {string}  [message] - The error message. May contain {@link util#format} placeholders
   * @param {...*}    [params]  - Parameters that map to the `message` placeholders
   * @returns {Error}
   */
  return function onoFactory (err, props, message, params) {   // eslint-disable-line no-unused-vars
    var formatArgs = [];
    var formattedMessage = "";

    // Determine which arguments were actually specified
    if (typeof err === "string") {
      formatArgs = slice.call(arguments);
      err = props = undefined;
    }
    else if (typeof props === "string") {
      formatArgs = slice.call(arguments, 1);
      props = undefined;
    }
    else if (typeof message === "string") {
      formatArgs = slice.call(arguments, 2);
    }

    // If there are any format arguments, then format the error message
    if (formatArgs.length > 0) {
      formattedMessage = module.exports.formatter.apply(null, formatArgs);
    }

    if (err && err.message) {
      // The inner-error's message will be added to the new message
      formattedMessage += (formattedMessage ? " \n" : "") + err.message;
    }

    // Create the new error
    // NOTE: DON'T move this to a separate function! We don't want to pollute the stack trace
    var newError = new Klass(formattedMessage);

    // Extend the new error with the additional properties
    extendError(newError, err);   // Copy properties of the original error
    extendToJSON(newError);       // Replace the original toJSON method
    extend(newError, props);      // Copy custom properties, possibly including a custom toJSON method

    return newError;
  };
}

/**
 * Extends the targetError with the properties of the source error.
 *
 * @param {Error}   targetError - The error object to extend
 * @param {?Error}  sourceError - The source error object, if any
 */
function extendError (targetError, sourceError) {
  extendStack(targetError, sourceError);
  extend(targetError, sourceError);
}

/**
 * JavaScript engines differ in how errors are serialized to JSON - especially when it comes
 * to custom error properties and stack traces.  So we add our own toJSON method that ALWAYS
 * outputs every property of the error.
 */
function extendToJSON (error) {
  error.toJSON = errorToJSON;

  // Also add an inspect() method, for compatibility with Node.js' `util.inspect()` method
  error.inspect = errorToString;
}

/**
 * Extends the target object with the properties of the source object.
 *
 * @param {object}  target - The object to extend
 * @param {?source} source - The object whose properties are copied
 */
function extend (target, source) {
  if (source && typeof source === "object") {
    var keys = Object.keys(source);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      // Don't copy "protected" properties, since they have special meaning/behavior
      // and are set by the onoFactory function
      if (protectedProperties.indexOf(key) >= 0) {
        continue;
      }

      try {
        target[key] = source[key];
      }
      catch (e) {
        // This property is read-only, so it can't be copied
      }
    }
  }
}

/**
 * Custom JSON serializer for Error objects.
 * Returns all built-in error properties, as well as extended properties.
 *
 * @returns {object}
 */
function errorToJSON () {
  var json = {};

  // Get all the properties of this error
  var keys = Object.keys(this);

  // Also include properties from the Error prototype
  keys = keys.concat(errorPrototypeProperties);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = this[key];
    var type = typeof value;
    if (type !== "undefined" && type !== "function") {
      json[key] = value;
    }
  }

  return json;
}

/**
 * Serializes Error objects as human-readable JSON strings for debugging/logging purposes.
 *
 * @returns {string}
 */
function errorToString () {
  return JSON.stringify(this, null, 2).replace(/\\n/g, "\n");
}

/**
 * Extend the error stack to include its cause
 *
 * @param {Error} targetError
 * @param {Error} sourceError
 */
function extendStack (targetError, sourceError) {
  if (hasLazyStack(targetError)) {
    if (sourceError) {
      lazyJoinStacks(targetError, sourceError);
    }
    else {
      lazyPopStack(targetError);
    }
  }
  else {
    if (sourceError) {
      targetError.stack = joinStacks(targetError.stack, sourceError.stack);
    }
    else {
      targetError.stack = popStack(targetError.stack);
    }
  }
}

/**
 * Appends the original {@link Error#stack} property to the new Error's stack.
 *
 * @param {string} newStack
 * @param {string} originalStack
 * @returns {string}
 */
function joinStacks (newStack, originalStack) {
  newStack = popStack(newStack);

  if (newStack && originalStack) {
    return newStack + "\n\n" + originalStack;
  }
  else {
    return newStack || originalStack;
  }
}

/**
 * Removes Ono from the stack, so that the stack starts at the original error location
 *
 * @param {string} stack
 * @returns {string}
 */
function popStack (stack) {
  if (stack) {
    var lines = stack.split("\n");

    if (lines.length < 2) {
      // The stack only has one line, so there's nothing we can remove
      return stack;
    }

    // Find the `onoFactory` call in the stack, and remove it
    for (var i = 0; i < lines.length; i++) {
      var line = lines[i];
      if (line.indexOf("onoFactory") >= 0) {
        lines.splice(i, 1);
        return lines.join("\n");
      }
    }

    // If we get here, then the stack doesn't contain a call to `onoFactory`.
    // This may be due to minification or some optimization of the JS engine.
    // So just return the stack as-is.
    return stack;
  }
}

/**
 * Does a one-time determination of whether this JavaScript engine
 * supports lazy `Error.stack` properties.
 */
var supportsLazyStack = (function () {
  return !!(
    // ES5 property descriptors must be supported
    Object.getOwnPropertyDescriptor && Object.defineProperty &&

    // Chrome on Android doesn't support lazy stacks :(
    (typeof navigator === "undefined" || !/Android/.test(navigator.userAgent))
  );
}());

/**
 * Does this error have a lazy stack property?
 *
 * @param {Error} err
 * @returns {boolean}
 */
function hasLazyStack (err) {
  if (!supportsLazyStack) {
    return false;
  }

  var descriptor = Object.getOwnPropertyDescriptor(err, "stack");
  if (!descriptor) {
    return false;
  }
  return typeof descriptor.get === "function";
}

/**
 * Calls {@link joinStacks} lazily, when the {@link Error#stack} property is accessed.
 *
 * @param {Error} targetError
 * @param {Error} sourceError
 */
function lazyJoinStacks (targetError, sourceError) {
  var targetStack = Object.getOwnPropertyDescriptor(targetError, "stack");

  Object.defineProperty(targetError, "stack", {
    get: function () {
      return joinStacks(targetStack.get.apply(targetError), sourceError.stack);
    },
    enumerable: false,
    configurable: true
  });
}

/**
 * Calls {@link popStack} lazily, when the {@link Error#stack} property is accessed.
 *
 * @param {Error} error
 */
function lazyPopStack (error) {
  var targetStack = Object.getOwnPropertyDescriptor(error, "stack");

  Object.defineProperty(error, "stack", {
    get: function () {
      return popStack(targetStack.get.apply(error));
    },
    enumerable: false,
    configurable: true
  });
}


/***/ }),
/* 337 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(222).format;


/***/ }),
/* 338 */
/***/ ((module) => {

"use strict";


var TEXT_REGEXP = /\.(txt|htm|html|md|xml|js|min|map|css|scss|less|svg)$/i;

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 300,

  /**
   * Whether to allow "empty" files (zero bytes).
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * The encoding that the text is expected to be in.
   *
   * @type {string}
   */
  encoding: "utf8",

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that return true will be tried, in order, until one successfully parses the file.
   * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case
   * every parser will be tried.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {boolean}
   */
  canParse: function isText (file) {
    // Use this parser if the file is a string or Buffer, and has a known text-based extension
    return (typeof file.data === "string" || Buffer.isBuffer(file.data)) && TEXT_REGEXP.test(file.url);
  },

  /**
   * Parses the given file as text
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise<string>}
   */
  parse: function parseText (file) {
    if (typeof file.data === "string") {
      return file.data;
    }
    else if (Buffer.isBuffer(file.data)) {
      return file.data.toString(this.encoding);
    }
    else {
      throw new Error("data is not text");
    }
  }
};


/***/ }),
/* 339 */
/***/ ((module) => {

"use strict";


var BINARY_REGEXP = /\.(jpeg|jpg|gif|png|bmp|ico)$/i;

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 400,

  /**
   * Whether to allow "empty" files (zero bytes).
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that return true will be tried, in order, until one successfully parses the file.
   * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case
   * every parser will be tried.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {boolean}
   */
  canParse: function isBinary (file) {
    // Use this parser if the file is a Buffer, and has a known binary extension
    return Buffer.isBuffer(file.data) && BINARY_REGEXP.test(file.url);
  },

  /**
   * Parses the given data as a Buffer (byte array).
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise<Buffer>}
   */
  parse: function parseBinary (file) {
    if (Buffer.isBuffer(file.data)) {
      return file.data;
    }
    else {
      // This will reject if data is anything other than a string or typed array
      return new Buffer(file.data);
    }
  }
};


/***/ }),
/* 340 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fs = __webpack_require__(142),
    ono = __webpack_require__(336),
    url = __webpack_require__(341);

module.exports = {
  /**
   * The order that this resolver will run, in relation to other resolvers.
   *
   * @type {number}
   */
  order: 100,

  /**
   * Determines whether this resolver can read a given file reference.
   * Resolvers that return true will be tried, in order, until one successfully resolves the file.
   * Resolvers that return false will not be given a chance to resolve the file.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {boolean}
   */
  canRead: function isFile (file) {
    return url.isFileSystemPath(file.url);
  },

  /**
   * Reads the given file and returns its raw contents as a Buffer.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {Promise<Buffer>}
   */
  read: function readFile (file) {
    return new Promise(function (resolve, reject) {
      var path;
      try {
        path = url.toFileSystemPath(file.url);
      }
      catch (err) {
        reject(ono.uri(err, "Malformed URI: %s", file.url));
      }

      // console.log('Opening file: %s', path);

      try {
        fs.readFile(path, function (err, data) {
          if (err) {
            reject(ono(err, 'Error opening file "%s"', path));
          }
          else {
            resolve(data);
          }
        });
      }
      catch (err) {
        reject(ono(err, 'Error opening file "%s"', path));
      }
    });
  }
};


/***/ }),
/* 341 */
/***/ ((module, exports, __webpack_require__) => {

"use strict";


var isWindows = /^win/.test(process.platform),
    forwardSlashPattern = /\//g,
    protocolPattern = /^(\w{2,}):\/\//i,
    url = module.exports;

// RegExp patterns to URL-encode special characters in local filesystem paths
var urlEncodePatterns = [
  /\?/g, "%3F",
  /\#/g, "%23",
];

// RegExp patterns to URL-decode special characters for local filesystem paths
var urlDecodePatterns = [
  /\%23/g, "#",
  /\%24/g, "$",
  /\%26/g, "&",
  /\%2C/g, ",",
  /\%40/g, "@"
];

exports.parse = __webpack_require__(227).parse;
exports.resolve = __webpack_require__(227).resolve;

/**
 * Returns the current working directory (in Node) or the current page URL (in browsers).
 *
 * @returns {string}
 */
exports.cwd = function cwd () {
  return process.browser ? location.href : process.cwd() + "/";
};

/**
 * Returns the protocol of the given URL, or `undefined` if it has no protocol.
 *
 * @param   {string} path
 * @returns {?string}
 */
exports.getProtocol = function getProtocol (path) {
  var match = protocolPattern.exec(path);
  if (match) {
    return match[1].toLowerCase();
  }
};

/**
 * Returns the lowercased file extension of the given URL,
 * or an empty string if it has no extension.
 *
 * @param   {string} path
 * @returns {string}
 */
exports.getExtension = function getExtension (path) {
  var lastDot = path.lastIndexOf(".");
  if (lastDot >= 0) {
    return path.substr(lastDot).toLowerCase();
  }
  return "";
};

/**
 * Returns the hash (URL fragment), of the given path.
 * If there is no hash, then the root hash ("#") is returned.
 *
 * @param   {string} path
 * @returns {string}
 */
exports.getHash = function getHash (path) {
  var hashIndex = path.indexOf("#");
  if (hashIndex >= 0) {
    return path.substr(hashIndex);
  }
  return "#";
};

/**
 * Removes the hash (URL fragment), if any, from the given path.
 *
 * @param   {string} path
 * @returns {string}
 */
exports.stripHash = function stripHash (path) {
  var hashIndex = path.indexOf("#");
  if (hashIndex >= 0) {
    path = path.substr(0, hashIndex);
  }
  return path;
};

/**
 * Determines whether the given path is an HTTP(S) URL.
 *
 * @param   {string} path
 * @returns {boolean}
 */
exports.isHttp = function isHttp (path) {
  var protocol = url.getProtocol(path);
  if (protocol === "http" || protocol === "https") {
    return true;
  }
  else if (protocol === undefined) {
    // There is no protocol.  If we're running in a browser, then assume it's HTTP.
    return process.browser;
  }
  else {
    // It's some other protocol, such as "ftp://", "mongodb://", etc.
    return false;
  }
};

/**
 * Determines whether the given path is a filesystem path.
 * This includes "file://" URLs.
 *
 * @param   {string} path
 * @returns {boolean}
 */
exports.isFileSystemPath = function isFileSystemPath (path) {
  if (process.browser) {
    // We're running in a browser, so assume that all paths are URLs.
    // This way, even relative paths will be treated as URLs rather than as filesystem paths
    return false;
  }

  var protocol = url.getProtocol(path);
  return protocol === undefined || protocol === "file";
};

/**
 * Converts a filesystem path to a properly-encoded URL.
 *
 * This is intended to handle situations where JSON Schema $Ref Parser is called
 * with a filesystem path that contains characters which are not allowed in URLs.
 *
 * @example
 * The following filesystem paths would be converted to the following URLs:
 *
 *    <"!@#$%^&*+=?'>.json              ==>   %3C%22!@%23$%25%5E&*+=%3F\'%3E.json
 *    C:\\My Documents\\File (1).json   ==>   C:/My%20Documents/File%20(1).json
 *    file://Project #42/file.json      ==>   file://Project%20%2342/file.json
 *
 * @param {string} path
 * @returns {string}
 */
exports.fromFileSystemPath = function fromFileSystemPath (path) {
  // Step 1: On Windows, replace backslashes with forward slashes,
  // rather than encoding them as "%5C"
  if (isWindows) {
    path = path.replace(/\\/g, "/");
  }

  // Step 2: `encodeURI` will take care of MOST characters
  path = encodeURI(path);

  // Step 3: Manually encode characters that are not encoded by `encodeURI`.
  // This includes characters such as "#" and "?", which have special meaning in URLs,
  // but are just normal characters in a filesystem path.
  for (var i = 0; i < urlEncodePatterns.length; i += 2) {
    path = path.replace(urlEncodePatterns[i], urlEncodePatterns[i + 1]);
  }

  return path;
};

/**
 * Converts a URL to a local filesystem path.
 *
 * @param {string}  path
 * @param {boolean} [keepFileProtocol] - If true, then "file://" will NOT be stripped
 * @returns {string}
 */
exports.toFileSystemPath = function toFileSystemPath (path, keepFileProtocol) {
  // Step 1: `decodeURI` will decode characters such as Cyrillic characters, spaces, etc.
  path = decodeURI(path);

  // Step 2: Manually decode characters that are not decoded by `decodeURI`.
  // This includes characters such as "#" and "?", which have special meaning in URLs,
  // but are just normal characters in a filesystem path.
  for (var i = 0; i < urlDecodePatterns.length; i += 2) {
    path = path.replace(urlDecodePatterns[i], urlDecodePatterns[i + 1]);
  }

  // Step 3: If it's a "file://" URL, then format it consistently
  // or convert it to a local filesystem path
  var isFileUrl = path.substr(0, 7).toLowerCase() === "file://";
  if (isFileUrl) {
    // Strip-off the protocol, and the initial "/", if there is one
    path = path[7] === "/" ? path.substr(8) : path.substr(7);

    // insert a colon (":") after the drive letter on Windows
    if (isWindows && path[1] === "/") {
      path = path[0] + ":" + path.substr(1);
    }

    if (keepFileProtocol) {
      // Return the consistently-formatted "file://" URL
      path = "file:///" + path;
    }
    else {
      // Convert the "file://" URL to a local filesystem path.
      // On Windows, it will start with something like "C:/".
      // On Posix, it will start with "/"
      isFileUrl = false;
      path = isWindows ? path : "/" + path;
    }
  }

  // Step 4: Normalize Windows paths (unless it's a "file://" URL)
  if (isWindows && !isFileUrl) {
    // Replace forward slashes with backslashes
    path = path.replace(forwardSlashPattern, "\\");

    // Capitalize the drive letter
    if (path.substr(1, 2) === ":\\") {
      path = path[0].toUpperCase() + path.substr(1);
    }
  }

  return path;
};


/***/ }),
/* 342 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var http = __webpack_require__(225),
    https = __webpack_require__(226),
    ono = __webpack_require__(336),
    url = __webpack_require__(341);

module.exports = {
  /**
   * The order that this resolver will run, in relation to other resolvers.
   *
   * @type {number}
   */
  order: 200,

  /**
   * HTTP headers to send when downloading files.
   *
   * @example:
   * {
   *   "User-Agent": "JSON Schema $Ref Parser",
   *   Accept: "application/json"
   * }
   *
   * @type {object}
   */
  headers: null,

  /**
   * HTTP request timeout (in milliseconds).
   *
   * @type {number}
   */
  timeout: 5000, // 5 seconds

  /**
   * The maximum number of HTTP redirects to follow.
   * To disable automatic following of redirects, set this to zero.
   *
   * @type {number}
   */
  redirects: 5,

  /**
   * The `withCredentials` option of XMLHttpRequest.
   * Set this to `true` if you're downloading files from a CORS-enabled server that requires authentication
   *
   * @type {boolean}
   */
  withCredentials: false,

  /**
   * Determines whether this resolver can read a given file reference.
   * Resolvers that return true will be tried in order, until one successfully resolves the file.
   * Resolvers that return false will not be given a chance to resolve the file.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {boolean}
   */
  canRead: function isHttp (file) {
    return url.isHttp(file.url);
  },

  /**
   * Reads the given URL and returns its raw contents as a Buffer.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {Promise<Buffer>}
   */
  read: function readHttp (file) {
    var u = url.parse(file.url);

    if (process.browser && !u.protocol) {
      // Use the protocol of the current page
      u.protocol = url.parse(location.href).protocol;
    }

    return download(u, this);
  }
};

/**
 * Downloads the given file.
 *
 * @param {Url|string} u        - The url to download (can be a parsed {@link Url} object)
 * @param {object} httpOptions  - The `options.resolve.http` object
 * @param {number} [redirects]  - The redirect URLs that have already been followed
 *
 * @returns {Promise<Buffer>}
 * The promise resolves with the raw downloaded data, or rejects if there is an HTTP error.
 */
function download (u, httpOptions, redirects) {
  return new Promise(function (resolve, reject) {
    u = url.parse(u);
    redirects = redirects || [];
    redirects.push(u.href);

    get(u, httpOptions)
      .then(function (res) {
        if (res.statusCode >= 400) {
          throw ono({ status: res.statusCode }, "HTTP ERROR %d", res.statusCode);
        }
        else if (res.statusCode >= 300) {
          if (redirects.length > httpOptions.redirects) {
            reject(ono({ status: res.statusCode }, "Error downloading %s. \nToo many redirects: \n  %s",
              redirects[0], redirects.join(" \n  ")));
          }
          else if (!res.headers.location) {
            throw ono({ status: res.statusCode }, "HTTP %d redirect with no location header", res.statusCode);
          }
          else {
            // console.log('HTTP %d redirect %s -> %s', res.statusCode, u.href, res.headers.location);
            var redirectTo = url.resolve(u, res.headers.location);
            download(redirectTo, httpOptions, redirects).then(resolve, reject);
          }
        }
        else {
          resolve(res.body || new Buffer(0));
        }
      })
      .catch(function (err) {
        reject(ono(err, "Error downloading", u.href));
      });
  });
}

/**
 * Sends an HTTP GET request.
 *
 * @param {Url} u - A parsed {@link Url} object
 * @param {object} httpOptions - The `options.resolve.http` object
 *
 * @returns {Promise<Response>}
 * The promise resolves with the HTTP Response object.
 */
function get (u, httpOptions) {
  return new Promise(function (resolve, reject) {
    // console.log('GET', u.href);

    var protocol = u.protocol === "https:" ? https : http;
    var req = protocol.get({
      hostname: u.hostname,
      port: u.port,
      path: u.path,
      auth: u.auth,
      protocol: u.protocol,
      headers: httpOptions.headers || {},
      withCredentials: httpOptions.withCredentials
    });

    if (typeof req.setTimeout === "function") {
      req.setTimeout(httpOptions.timeout);
    }

    req.on("timeout", function () {
      req.abort();
    });

    req.on("error", reject);

    req.once("response", function (res) {
      res.body = new Buffer(0);

      res.on("data", function (data) {
        res.body = Buffer.concat([res.body, new Buffer(data)]);
      });

      res.on("error", reject);

      res.on("end", function () {
        resolve(res);
      });
    });
  });
}


/***/ }),
/* 343 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ono = __webpack_require__(336),
    $Ref = __webpack_require__(344),
    url = __webpack_require__(341);

module.exports = $Refs;

/**
 * This class is a map of JSON references and their resolved values.
 */
function $Refs () {
  /**
   * Indicates whether the schema contains any circular references.
   *
   * @type {boolean}
   */
  this.circular = false;

  /**
   * A map of paths/urls to {@link $Ref} objects
   *
   * @type {object}
   * @protected
   */
  this._$refs = {};

  /**
   * The {@link $Ref} object that is the root of the JSON schema.
   *
   * @type {$Ref}
   * @protected
   */
  this._root$Ref = null;
}

/**
 * Returns the paths of all the files/URLs that are referenced by the JSON schema,
 * including the schema itself.
 *
 * @param {...string|string[]} [types] - Only return paths of the given types ("file", "http", etc.)
 * @returns {string[]}
 */
$Refs.prototype.paths = function (types) {
  var paths = getPaths(this._$refs, arguments);
  return paths.map(function (path) {
    return path.decoded;
  });
};

/**
 * Returns the map of JSON references and their resolved values.
 *
 * @param {...string|string[]} [types] - Only return references of the given types ("file", "http", etc.)
 * @returns {object}
 */
$Refs.prototype.values = function (types) {
  var $refs = this._$refs;
  var paths = getPaths($refs, arguments);
  return paths.reduce(function (obj, path) {
    obj[path.decoded] = $refs[path.encoded].value;
    return obj;
  }, {});
};

/**
 * Returns a POJO (plain old JavaScript object) for serialization as JSON.
 *
 * @returns {object}
 */
$Refs.prototype.toJSON = $Refs.prototype.values;

/**
 * Determines whether the given JSON reference exists.
 *
 * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} [options]
 * @returns {boolean}
 */
$Refs.prototype.exists = function (path, options) {
  try {
    this._resolve(path, options);
    return true;
  }
  catch (e) {
    return false;
  }
};

/**
 * Resolves the given JSON reference and returns the resolved value.
 *
 * @param {string} path - The path being resolved, with a JSON pointer in the hash
 * @param {$RefParserOptions} [options]
 * @returns {*} - Returns the resolved value
 */
$Refs.prototype.get = function (path, options) {
  return this._resolve(path, options).value;
};

/**
 * Sets the value of a nested property within this {@link $Ref#value}.
 * If the property, or any of its parents don't exist, they will be created.
 *
 * @param {string} path - The path of the property to set, optionally with a JSON pointer in the hash
 * @param {*} value - The value to assign
 */
$Refs.prototype.set = function (path, value) {
  var absPath = url.resolve(this._root$Ref.path, path);
  var withoutHash = url.stripHash(absPath);
  var $ref = this._$refs[withoutHash];

  if (!$ref) {
    throw ono('Error resolving $ref pointer "%s". \n"%s" not found.', path, withoutHash);
  }

  $ref.set(absPath, value);
};

/**
 * Creates a new {@link $Ref} object and adds it to this {@link $Refs} object.
 *
 * @param {string} path  - The file path or URL of the referenced file
 */
$Refs.prototype._add = function (path) {
  var withoutHash = url.stripHash(path);

  var $ref = new $Ref();
  $ref.path = withoutHash;
  $ref.$refs = this;

  this._$refs[withoutHash] = $ref;
  this._root$Ref = this._root$Ref || $ref;

  return $ref;
};

/**
 * Resolves the given JSON reference.
 *
 * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} [options]
 * @returns {Pointer}
 * @protected
 */
$Refs.prototype._resolve = function (path, options) {
  var absPath = url.resolve(this._root$Ref.path, path);
  var withoutHash = url.stripHash(absPath);
  var $ref = this._$refs[withoutHash];

  if (!$ref) {
    throw ono('Error resolving $ref pointer "%s". \n"%s" not found.', path, withoutHash);
  }

  return $ref.resolve(absPath, options, path);
};

/**
 * Returns the specified {@link $Ref} object, or undefined.
 *
 * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash
 * @returns {$Ref|undefined}
 * @protected
 */
$Refs.prototype._get$Ref = function (path) {
  path = url.resolve(this._root$Ref.path, path);
  var withoutHash = url.stripHash(path);
  return this._$refs[withoutHash];
};

/**
 * Returns the encoded and decoded paths keys of the given object.
 *
 * @param {object} $refs - The object whose keys are URL-encoded paths
 * @param {...string|string[]} [types] - Only return paths of the given types ("file", "http", etc.)
 * @returns {object[]}
 */
function getPaths ($refs, types) {
  var paths = Object.keys($refs);

  // Filter the paths by type
  types = Array.isArray(types[0]) ? types[0] : Array.prototype.slice.call(types);
  if (types.length > 0 && types[0]) {
    paths = paths.filter(function (key) {
      return types.indexOf($refs[key].pathType) !== -1;
    });
  }

  // Decode local filesystem paths
  return paths.map(function (path) {
    return {
      encoded: path,
      decoded: $refs[path].pathType === "file" ? url.toFileSystemPath(path, true) : path
    };
  });
}


/***/ }),
/* 344 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = $Ref;

var Pointer = __webpack_require__(345);

/**
 * This class represents a single JSON reference and its resolved value.
 *
 * @constructor
 */
function $Ref () {
  /**
   * The file path or URL of the referenced file.
   * This path is relative to the path of the main JSON schema file.
   *
   * This path does NOT contain document fragments (JSON pointers). It always references an ENTIRE file.
   * Use methods such as {@link $Ref#get}, {@link $Ref#resolve}, and {@link $Ref#exists} to get
   * specific JSON pointers within the file.
   *
   * @type {string}
   */
  this.path = undefined;

  /**
   * The resolved value of the JSON reference.
   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).
   * @type {?*}
   */
  this.value = undefined;

  /**
   * The {@link $Refs} object that contains this {@link $Ref} object.
   * @type {$Refs}
   */
  this.$refs = undefined;

  /**
   * Indicates the type of {@link $Ref#path} (e.g. "file", "http", etc.)
   * @type {?string}
   */
  this.pathType = undefined;
}

/**
 * Determines whether the given JSON reference exists within this {@link $Ref#value}.
 *
 * @param {string} path - The full path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} options
 * @returns {boolean}
 */
$Ref.prototype.exists = function (path, options) {
  try {
    this.resolve(path, options);
    return true;
  }
  catch (e) {
    return false;
  }
};

/**
 * Resolves the given JSON reference within this {@link $Ref#value} and returns the resolved value.
 *
 * @param {string} path - The full path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} options
 * @returns {*} - Returns the resolved value
 */
$Ref.prototype.get = function (path, options) {
  return this.resolve(path, options).value;
};

/**
 * Resolves the given JSON reference within this {@link $Ref#value}.
 *
 * @param {string} path - The full path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} options
 * @param {string} [friendlyPath] - The original user-specified path (used for error messages)
 * @returns {Pointer}
 */
$Ref.prototype.resolve = function (path, options, friendlyPath) {
  var pointer = new Pointer(this, path, friendlyPath);
  return pointer.resolve(this.value, options);
};

/**
 * Sets the value of a nested property within this {@link $Ref#value}.
 * If the property, or any of its parents don't exist, they will be created.
 *
 * @param {string} path - The full path of the property to set, optionally with a JSON pointer in the hash
 * @param {*} value - The value to assign
 */
$Ref.prototype.set = function (path, value) {
  var pointer = new Pointer(this, path);
  this.value = pointer.set(this.value, value);
};

/**
 * Determines whether the given value is a JSON reference.
 *
 * @param {*} value - The value to inspect
 * @returns {boolean}
 */
$Ref.is$Ref = function (value) {
  return value && typeof value === "object" && typeof value.$ref === "string" && value.$ref.length > 0;
};

/**
 * Determines whether the given value is an external JSON reference.
 *
 * @param {*} value - The value to inspect
 * @returns {boolean}
 */
$Ref.isExternal$Ref = function (value) {
  return $Ref.is$Ref(value) && value.$ref[0] !== "#";
};

/**
 * Determines whether the given value is a JSON reference, and whether it is allowed by the options.
 * For example, if it references an external file, then options.resolve.external must be true.
 *
 * @param {*} value - The value to inspect
 * @param {$RefParserOptions} options
 * @returns {boolean}
 */
$Ref.isAllowed$Ref = function (value, options) {
  if ($Ref.is$Ref(value)) {
    if (value.$ref.substr(0, 2) === "#/" || value.$ref === "#") {
      // It's a JSON Pointer reference, which is always allowed
      return true;
    }
    else if (value.$ref[0] !== "#" && (!options || options.resolve.external)) {
      // It's an external reference, which is allowed by the options
      return true;
    }
  }
};

/**
 * Determines whether the given value is a JSON reference that "extends" its resolved value.
 * That is, it has extra properties (in addition to "$ref"), so rather than simply pointing to
 * an existing value, this $ref actually creates a NEW value that is a shallow copy of the resolved
 * value, plus the extra properties.
 *
 * @example:
 *  {
 *    person: {
 *      properties: {
 *        firstName: { type: string }
 *        lastName: { type: string }
 *      }
 *    }
 *    employee: {
 *      properties: {
 *        $ref: #/person/properties
 *        salary: { type: number }
 *      }
 *    }
 *  }
 *
 *  In this example, "employee" is an extended $ref, since it extends "person" with an additional
 *  property (salary).  The result is a NEW value that looks like this:
 *
 *  {
 *    properties: {
 *      firstName: { type: string }
 *      lastName: { type: string }
 *      salary: { type: number }
 *    }
 *  }
 *
 * @param {*} value - The value to inspect
 * @returns {boolean}
 */
$Ref.isExtended$Ref = function (value) {
  return $Ref.is$Ref(value) && Object.keys(value).length > 1;
};

/**
 * Returns the resolved value of a JSON Reference.
 * If necessary, the resolved value is merged with the JSON Reference to create a new object
 *
 * @example:
 *  {
 *    person: {
 *      properties: {
 *        firstName: { type: string }
 *        lastName: { type: string }
 *      }
 *    }
 *    employee: {
 *      properties: {
 *        $ref: #/person/properties
 *        salary: { type: number }
 *      }
 *    }
 *  }
 *
 *  When "person" and "employee" are merged, you end up with the following object:
 *
 *  {
 *    properties: {
 *      firstName: { type: string }
 *      lastName: { type: string }
 *      salary: { type: number }
 *    }
 *  }
 *
 * @param {object} $ref - The JSON reference object (the one with the "$ref" property)
 * @param {*} resolvedValue - The resolved value, which can be any type
 * @returns {*} - Returns the dereferenced value
 */
$Ref.dereference = function ($ref, resolvedValue) {
  if (resolvedValue && typeof resolvedValue === "object" && $Ref.isExtended$Ref($ref)) {
    var merged = {};
    Object.keys($ref).forEach(function (key) {
      if (key !== "$ref") {
        merged[key] = $ref[key];
      }
    });
    Object.keys(resolvedValue).forEach(function (key) {
      if (!(key in merged)) {
        merged[key] = resolvedValue[key];
      }
    });
    return merged;
  }
  else {
    // Completely replace the original reference with the resolved value
    return resolvedValue;
  }
};


/***/ }),
/* 345 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = Pointer;

var $Ref = __webpack_require__(344),
    url = __webpack_require__(341),
    ono = __webpack_require__(336),
    slashes = /\//g,
    tildes = /~/g,
    escapedSlash = /~1/g,
    escapedTilde = /~0/g;

/**
 * This class represents a single JSON pointer and its resolved value.
 *
 * @param {$Ref} $ref
 * @param {string} path
 * @param {string} [friendlyPath] - The original user-specified path (used for error messages)
 * @constructor
 */
function Pointer ($ref, path, friendlyPath) {
  /**
   * The {@link $Ref} object that contains this {@link Pointer} object.
   * @type {$Ref}
   */
  this.$ref = $ref;

  /**
   * The file path or URL, containing the JSON pointer in the hash.
   * This path is relative to the path of the main JSON schema file.
   * @type {string}
   */
  this.path = path;

  /**
   * The original path or URL, used for error messages.
   * @type {string}
   */
  this.originalPath = friendlyPath || path;

  /**
   * The value of the JSON pointer.
   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).
   * @type {?*}
   */
  this.value = undefined;

  /**
   * Indicates whether the pointer references itself.
   * @type {boolean}
   */
  this.circular = false;

  /**
   * The number of indirect references that were traversed to resolve the value.
   * Resolving a single pointer may require resolving multiple $Refs.
   * @type {number}
   */
  this.indirections = 0;
}

/**
 * Resolves the value of a nested property within the given object.
 *
 * @param {*} obj - The object that will be crawled
 * @param {$RefParserOptions} options
 *
 * @returns {Pointer}
 * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.
 * If resolving this value required resolving other JSON references, then
 * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path
 * of the resolved value.
 */
Pointer.prototype.resolve = function (obj, options) {
  var tokens = Pointer.parse(this.path);

  // Crawl the object, one token at a time
  this.value = obj;
  for (var i = 0; i < tokens.length; i++) {
    if (resolveIf$Ref(this, options)) {
      // The $ref path has changed, so append the remaining tokens to the path
      this.path = Pointer.join(this.path, tokens.slice(i));
    }

    var token = tokens[i];
    if (this.value[token] === undefined) {
      throw ono.syntax('Error resolving $ref pointer "%s". \nToken "%s" does not exist.', this.originalPath, token);
    }
    else {
      this.value = this.value[token];
    }
  }

  // Resolve the final value
  resolveIf$Ref(this, options);
  return this;
};

/**
 * Sets the value of a nested property within the given object.
 *
 * @param {*} obj - The object that will be crawled
 * @param {*} value - the value to assign
 * @param {$RefParserOptions} options
 *
 * @returns {*}
 * Returns the modified object, or an entirely new object if the entire object is overwritten.
 */
Pointer.prototype.set = function (obj, value, options) {
  var tokens = Pointer.parse(this.path);
  var token;

  if (tokens.length === 0) {
    // There are no tokens, replace the entire object with the new value
    this.value = value;
    return value;
  }

  // Crawl the object, one token at a time
  this.value = obj;
  for (var i = 0; i < tokens.length - 1; i++) {
    resolveIf$Ref(this, options);

    token = tokens[i];
    if (this.value && this.value[token] !== undefined) {
      // The token exists
      this.value = this.value[token];
    }
    else {
      // The token doesn't exist, so create it
      this.value = setValue(this, token, {});
    }
  }

  // Set the value of the final token
  resolveIf$Ref(this, options);
  token = tokens[tokens.length - 1];
  setValue(this, token, value);

  // Return the updated object
  return obj;
};

/**
 * Parses a JSON pointer (or a path containing a JSON pointer in the hash)
 * and returns an array of the pointer's tokens.
 * (e.g. "schema.json#/definitions/person/name" => ["definitions", "person", "name"])
 *
 * The pointer is parsed according to RFC 6901
 * {@link https://tools.ietf.org/html/rfc6901#section-3}
 *
 * @param {string} path
 * @returns {string[]}
 */
Pointer.parse = function (path) {
  // Get the JSON pointer from the path's hash
  var pointer = url.getHash(path).substr(1);

  // If there's no pointer, then there are no tokens,
  // so return an empty array
  if (!pointer) {
    return [];
  }

  // Split into an array
  pointer = pointer.split("/");

  // Decode each part, according to RFC 6901
  for (var i = 0; i < pointer.length; i++) {
    pointer[i] = decodeURIComponent(pointer[i].replace(escapedSlash, "/").replace(escapedTilde, "~"));
  }

  if (pointer[0] !== "") {
    throw ono.syntax('Invalid $ref pointer "%s". Pointers must begin with "#/"', pointer);
  }

  return pointer.slice(1);
};

/**
 * Creates a JSON pointer path, by joining one or more tokens to a base path.
 *
 * @param {string} base - The base path (e.g. "schema.json#/definitions/person")
 * @param {string|string[]} tokens - The token(s) to append (e.g. ["name", "first"])
 * @returns {string}
 */
Pointer.join = function (base, tokens) {
  // Ensure that the base path contains a hash
  if (base.indexOf("#") === -1) {
    base += "#";
  }

  // Append each token to the base path
  tokens = Array.isArray(tokens) ? tokens : [tokens];
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    // Encode the token, according to RFC 6901
    base += "/" + encodeURIComponent(token.replace(tildes, "~0").replace(slashes, "~1"));
  }

  return base;
};

/**
 * If the given pointer's {@link Pointer#value} is a JSON reference,
 * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.
 * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the
 * resolution path of the new value.
 *
 * @param {Pointer} pointer
 * @param {$RefParserOptions} options
 * @returns {boolean} - Returns `true` if the resolution path changed
 */
function resolveIf$Ref (pointer, options) {
  // Is the value a JSON reference? (and allowed?)

  if ($Ref.isAllowed$Ref(pointer.value, options)) {
    var $refPath = url.resolve(pointer.path, pointer.value.$ref);

    if ($refPath === pointer.path) {
      // The value is a reference to itself, so there's nothing to do.
      pointer.circular = true;
    }
    else {
      var resolved = pointer.$ref.$refs._resolve($refPath, options);
      pointer.indirections += resolved.indirections + 1;

      if ($Ref.isExtended$Ref(pointer.value)) {
        // This JSON reference "extends" the resolved value, rather than simply pointing to it.
        // So the resolved path does NOT change.  Just the value does.
        pointer.value = $Ref.dereference(pointer.value, resolved.value);
        return false;
      }
      else {
        // Resolve the reference
        pointer.$ref = resolved.$ref;
        pointer.path = resolved.path;
        pointer.value = resolved.value;
      }

      return true;
    }
  }
}

/**
 * Sets the specified token value of the {@link Pointer#value}.
 *
 * The token is evaluated according to RFC 6901.
 * {@link https://tools.ietf.org/html/rfc6901#section-4}
 *
 * @param {Pointer} pointer - The JSON Pointer whose value will be modified
 * @param {string} token - A JSON Pointer token that indicates how to modify `obj`
 * @param {*} value - The value to assign
 * @returns {*} - Returns the assigned value
 */
function setValue (pointer, token, value) {
  if (pointer.value && typeof pointer.value === "object") {
    if (token === "-" && Array.isArray(pointer.value)) {
      pointer.value.push(value);
    }
    else {
      pointer.value[token] = value;
    }
  }
  else {
    throw ono.syntax('Error assigning $ref pointer "%s". \nCannot set "%s" of a non-object.', pointer.path, token);
  }
  return value;
}


/***/ }),
/* 346 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ono = __webpack_require__(336),
    url = __webpack_require__(341),
    plugins = __webpack_require__(347);

module.exports = parse;

/**
 * Reads and parses the specified file path or URL.
 *
 * @param {string} path - This path MUST already be resolved, since `read` doesn't know the resolution context
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves with the parsed file contents, NOT the raw (Buffer) contents.
 */
function parse (path, $refs, options) {
  try {
    // Remove the URL fragment, if any
    path = url.stripHash(path);

    // Add a new $Ref for this file, even though we don't have the value yet.
    // This ensures that we don't simultaneously read & parse the same file multiple times
    var $ref = $refs._add(path);

    // This "file object" will be passed to all resolvers and parsers.
    var file = {
      url: path,
      extension: url.getExtension(path),
    };

    // Read the file and then parse the data
    return readFile(file, options)
      .then(function (resolver) {
        $ref.pathType = resolver.plugin.name;
        file.data = resolver.result;
        return parseFile(file, options);
      })
      .then(function (parser) {
        $ref.value = parser.result;
        return parser.result;
      });
  }
  catch (e) {
    return Promise.reject(e);
  }
}

/**
 * Reads the given file, using the configured resolver plugins
 *
 * @param {object} file           - An object containing information about the referenced file
 * @param {string} file.url       - The full URL of the referenced file
 * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves with the raw file contents and the resolver that was used.
 */
function readFile (file, options) {
  return new Promise(function (resolve, reject) {
    // console.log('Reading %s', file.url);

    // Find the resolvers that can read this file
    var resolvers = plugins.all(options.resolve);
    resolvers = plugins.filter(resolvers, "canRead", file);

    // Run the resolvers, in order, until one of them succeeds
    plugins.sort(resolvers);
    plugins.run(resolvers, "read", file)
      .then(resolve, onError);

    function onError (err) {
      // Throw the original error, if it's one of our own (user-friendly) errors.
      // Otherwise, throw a generic, friendly error.
      if (err && !(err instanceof SyntaxError)) {
        reject(err);
      }
      else {
        reject(ono.syntax('Unable to resolve $ref pointer "%s"', file.url));
      }
    }
  });
}

/**
 * Parses the given file's contents, using the configured parser plugins.
 *
 * @param {object} file           - An object containing information about the referenced file
 * @param {string} file.url       - The full URL of the referenced file
 * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
 * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves with the parsed file contents and the parser that was used.
 */
function parseFile (file, options) {
  return new Promise(function (resolve, reject) {
    // console.log('Parsing %s', file.url);

    // Find the parsers that can read this file type.
    // If none of the parsers are an exact match for this file, then we'll try ALL of them.
    // This handles situations where the file IS a supported type, just with an unknown extension.
    var allParsers = plugins.all(options.parse);
    var filteredParsers = plugins.filter(allParsers, "canParse", file);
    var parsers = filteredParsers.length > 0 ? filteredParsers : allParsers;

    // Run the parsers, in order, until one of them succeeds
    plugins.sort(parsers);
    plugins.run(parsers, "parse", file)
      .then(onParsed, onError);

    function onParsed (parser) {
      if (!parser.plugin.allowEmpty && isEmpty(parser.result)) {
        reject(ono.syntax('Error parsing "%s" as %s. \nParsed value is empty', file.url, parser.plugin.name));
      }
      else {
        resolve(parser);
      }
    }

    function onError (err) {
      if (err) {
        err = err instanceof Error ? err : new Error(err);
        reject(ono.syntax(err, "Error parsing %s", file.url));
      }
      else {
        reject(ono.syntax("Unable to parse %s", file.url));
      }
    }
  });
}

/**
 * Determines whether the parsed value is "empty".
 *
 * @param {*} value
 * @returns {boolean}
 */
function isEmpty (value) {
  return value === undefined ||
    (typeof value === "object" && Object.keys(value).length === 0) ||
    (typeof value === "string" && value.trim().length === 0) ||
    (Buffer.isBuffer(value) && value.length === 0);
}


/***/ }),
/* 347 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Returns the given plugins as an array, rather than an object map.
 * All other methods in this module expect an array of plugins rather than an object map.
 *
 * @param  {object} plugins - A map of plugin objects
 * @return {object[]}
 */
exports.all = function (plugins) {
  return Object.keys(plugins)
    .filter(function (key) {
      return typeof plugins[key] === "object";
    })
    .map(function (key) {
      plugins[key].name = key;
      return plugins[key];
    });
};

/**
 * Filters the given plugins, returning only the ones return `true` for the given method.
 *
 * @param  {object[]} plugins - An array of plugin objects
 * @param  {string}   method  - The name of the filter method to invoke for each plugin
 * @param  {object}   file    - A file info object, which will be passed to each method
 * @return {object[]}
 */
exports.filter = function (plugins, method, file) {
  return plugins
    .filter(function (plugin) {
      return !!getResult(plugin, method, file);
    });
};

/**
 * Sorts the given plugins, in place, by their `order` property.
 *
 * @param {object[]} plugins - An array of plugin objects
 * @returns {object[]}
 */
exports.sort = function (plugins) {
  plugins.forEach(function (plugin) {
    plugin.order = plugin.order || Number.MAX_SAFE_INTEGER;
  });

  return plugins.sort(function (a, b) { return a.order - b.order; });
};

/**
 * Runs the specified method of the given plugins, in order, until one of them returns a successful result.
 * Each method can return a synchronous value, a Promise, or call an error-first callback.
 * If the promise resolves successfully, or the callback is called without an error, then the result
 * is immediately returned and no further plugins are called.
 * If the promise rejects, or the callback is called with an error, then the next plugin is called.
 * If ALL plugins fail, then the last error is thrown.
 *
 * @param {object[]}  plugins - An array of plugin objects
 * @param {string}    method  - The name of the method to invoke for each plugin
 * @param {object}    file    - A file info object, which will be passed to each method
 * @returns {Promise}
 */
exports.run = function (plugins, method, file) {
  var plugin, lastError, index = 0;

  return new Promise(function (resolve, reject) {
    runNextPlugin();

    function runNextPlugin () {
      plugin = plugins[index++];
      if (!plugin) {
        // There are no more functions, so re-throw the last error
        return reject(lastError);
      }

      try {
        // console.log('  %s', plugin.name);
        var result = getResult(plugin, method, file, callback);
        if (result && typeof result.then === "function") {
          // A promise was returned
          result.then(onSuccess, onError);
        }
        else if (result !== undefined) {
          // A synchronous result was returned
          onSuccess(result);
        }
        // else { the callback will be called }
      }
      catch (e) {
        onError(e);
      }
    }

    function callback (err, result) {
      if (err) {
        onError(err);
      }
      else {
        onSuccess(result);
      }
    }

    function onSuccess (result) {
      // console.log('    success');
      resolve({
        plugin: plugin,
        result: result
      });
    }

    function onError (err) {
      // console.log('    %s', err.message || err);
      lastError = err;
      runNextPlugin();
    }
  });
};

/**
 * Returns the value of the given property.
 * If the property is a function, then the result of the function is returned.
 * If the value is a RegExp, then it will be tested against the file URL.
 * If the value is an aray, then it will be compared against the file extension.
 *
 * @param   {object}   obj        - The object whose property/method is called
 * @param   {string}   prop       - The name of the property/method to invoke
 * @param   {object}   file       - A file info object, which will be passed to the method
 * @param   {function} [callback] - A callback function, which will be passed to the method
 * @returns {*}
 */
function getResult (obj, prop, file, callback) {
  var value = obj[prop];

  if (typeof value === "function") {
    return value.apply(obj, [file, callback]);
  }

  if (!callback) {
    // The synchronous plugin functions (canParse and canRead)
    // allow a "shorthand" syntax, where the user can match
    // files by RegExp or by file extension.
    if (value instanceof RegExp) {
      return value.test(file.url);
    }
    else if (typeof value === "string") {
      return value === file.extension;
    }
    else if (Array.isArray(value)) {
      return value.indexOf(file.extension) !== -1;
    }
  }

  return value;
}


/***/ }),
/* 348 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Options = __webpack_require__(301);

module.exports = normalizeArgs;

/**
 * Normalizes the given arguments, accounting for optional args.
 *
 * @param {Arguments} args
 * @returns {object}
 */
function normalizeArgs (args) {
  var path, schema, options, callback;
  args = Array.prototype.slice.call(args);

  if (typeof args[args.length - 1] === "function") {
    // The last parameter is a callback function
    callback = args.pop();
  }

  if (typeof args[0] === "string") {
    // The first parameter is the path
    path = args[0];
    if (typeof args[2] === "object") {
      // The second parameter is the schema, and the third parameter is the options
      schema = args[1];
      options = args[2];
    }
    else {
      // The second parameter is the options
      schema = undefined;
      options = args[1];
    }
  }
  else {
    // The first parameter is the schema
    path = "";
    schema = args[0];
    options = args[1];
  }

  if (!(options instanceof Options)) {
    options = new Options(options);
  }

  return {
    path: path,
    schema: schema,
    options: options,
    callback: callback
  };
}


/***/ }),
/* 349 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $Ref = __webpack_require__(344),
    Pointer = __webpack_require__(345),
    parse = __webpack_require__(346),
    url = __webpack_require__(341);

module.exports = resolveExternal;

/**
 * Crawls the JSON schema, finds all external JSON references, and resolves their values.
 * This method does not mutate the JSON schema. The resolved values are added to {@link $RefParser#$refs}.
 *
 * NOTE: We only care about EXTERNAL references here. INTERNAL references are only relevant when dereferencing.
 *
 * @param {$RefParser} parser
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves once all JSON references in the schema have been resolved,
 * including nested references that are contained in externally-referenced files.
 */
function resolveExternal (parser, options) {
  if (!options.resolve.external) {
    // Nothing to resolve, so exit early
    return Promise.resolve();
  }

  try {
    // console.log('Resolving $ref pointers in %s', parser.$refs._root$Ref.path);
    var promises = crawl(parser.schema, parser.$refs._root$Ref.path + "#", parser.$refs, options);
    return Promise.all(promises);
  }
  catch (e) {
    return Promise.reject(e);
  }
}

/**
 * Recursively crawls the given value, and resolves any external JSON references.
 *
 * @param {*} obj - The value to crawl. If it's not an object or array, it will be ignored.
 * @param {string} path - The full path of `obj`, possibly with a JSON Pointer in the hash
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 *
 * @returns {Promise[]}
 * Returns an array of promises. There will be one promise for each JSON reference in `obj`.
 * If `obj` does not contain any JSON references, then the array will be empty.
 * If any of the JSON references point to files that contain additional JSON references,
 * then the corresponding promise will internally reference an array of promises.
 */
function crawl (obj, path, $refs, options) {
  var promises = [];

  if (obj && typeof obj === "object") {
    if ($Ref.isExternal$Ref(obj)) {
      promises.push(resolve$Ref(obj, path, $refs, options));
    }
    else {
      Object.keys(obj).forEach(function (key) {
        var keyPath = Pointer.join(path, key);
        var value = obj[key];

        if ($Ref.isExternal$Ref(value)) {
          promises.push(resolve$Ref(value, keyPath, $refs, options));
        }
        else {
          promises = promises.concat(crawl(value, keyPath, $refs, options));
        }
      });
    }
  }

  return promises;
}

/**
 * Resolves the given JSON Reference, and then crawls the resulting value.
 *
 * @param {{$ref: string}} $ref - The JSON Reference to resolve
 * @param {string} path - The full path of `$ref`, possibly with a JSON Pointer in the hash
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves once all JSON references in the object have been resolved,
 * including nested references that are contained in externally-referenced files.
 */
function resolve$Ref ($ref, path, $refs, options) {
  // console.log('Resolving $ref pointer "%s" at %s', $ref.$ref, path);

  var resolvedPath = url.resolve(path, $ref.$ref);
  var withoutHash = url.stripHash(resolvedPath);

  // Do we already have this $ref?
  $ref = $refs._$refs[withoutHash];
  if ($ref) {
    // We've already parsed this $ref, so use the existing value
    return Promise.resolve($ref.value);
  }

  // Parse the $referenced file/url
  return parse(resolvedPath, $refs, options)
    .then(function (result) {
      // Crawl the parsed value
      // console.log('Resolving $ref pointers in %s', withoutHash);
      var promises = crawl(result, withoutHash + "#", $refs, options);
      return Promise.all(promises);
    });
}


/***/ }),
/* 350 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $Ref = __webpack_require__(344),
    Pointer = __webpack_require__(345),
    url = __webpack_require__(341);

module.exports = bundle;

/**
 * Bundles all external JSON references into the main JSON schema, thus resulting in a schema that
 * only has *internal* references, not any *external* references.
 * This method mutates the JSON schema object, adding new references and re-mapping existing ones.
 *
 * @param {$RefParser} parser
 * @param {$RefParserOptions} options
 */
function bundle (parser, options) {
  // console.log('Bundling $ref pointers in %s', parser.$refs._root$Ref.path);

  // Build an inventory of all $ref pointers in the JSON Schema
  var inventory = [];
  crawl(parser, "schema", parser.$refs._root$Ref.path + "#", "#", 0, inventory, parser.$refs, options);

  // Remap all $ref pointers
  remap(inventory);
}

/**
 * Recursively crawls the given value, and inventories all JSON references.
 *
 * @param {object} parent - The object containing the value to crawl. If the value is not an object or array, it will be ignored.
 * @param {string} key - The property key of `parent` to be crawled
 * @param {string} path - The full path of the property being crawled, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of the property being crawled, from the schema root
 * @param {object[]} inventory - An array of already-inventoried $ref pointers
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 */
function crawl (parent, key, path, pathFromRoot, indirections, inventory, $refs, options) {
  var obj = key === null ? parent : parent[key];

  if (obj && typeof obj === "object") {
    if ($Ref.isAllowed$Ref(obj)) {
      inventory$Ref(parent, key, path, pathFromRoot, indirections, inventory, $refs, options);
    }
    else {
      // Crawl the object in a specific order that's optimized for bundling.
      // This is important because it determines how `pathFromRoot` gets built,
      // which later determines which keys get dereferenced and which ones get remapped
      var keys = Object.keys(obj)
        .sort(function (a, b) {
          // Most people will expect references to be bundled into the the "definitions" property,
          // so we always crawl that property first, if it exists.
          if (a === "definitions") {
            return -1;
          }
          else if (b === "definitions") {
            return 1;
          }
          else {
            // Otherwise, crawl the keys based on their length.
            // This produces the shortest possible bundled references
            return a.length - b.length;
          }
        });

      keys.forEach(function (key) {
        var keyPath = Pointer.join(path, key);
        var keyPathFromRoot = Pointer.join(pathFromRoot, key);
        var value = obj[key];

        if ($Ref.isAllowed$Ref(value)) {
          inventory$Ref(obj, key, path, keyPathFromRoot, indirections, inventory, $refs, options);
        }
        else {
          crawl(obj, key, keyPath, keyPathFromRoot, indirections, inventory, $refs, options);
        }
      });
    }
  }
}

/**
 * Inventories the given JSON Reference (i.e. records detailed information about it so we can
 * optimize all $refs in the schema), and then crawls the resolved value.
 *
 * @param {object} $refParent - The object that contains a JSON Reference as one of its keys
 * @param {string} $refKey - The key in `$refParent` that is a JSON Reference
 * @param {string} path - The full path of the JSON Reference at `$refKey`, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of the JSON Reference at `$refKey`, from the schema root
 * @param {object[]} inventory - An array of already-inventoried $ref pointers
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 */
function inventory$Ref ($refParent, $refKey, path, pathFromRoot, indirections, inventory, $refs, options) {
  var $ref = $refKey === null ? $refParent : $refParent[$refKey];
  var $refPath = url.resolve(path, $ref.$ref);
  var pointer = $refs._resolve($refPath, options);
  var depth = Pointer.parse(pathFromRoot).length;
  var file = url.stripHash(pointer.path);
  var hash = url.getHash(pointer.path);
  var external = file !== $refs._root$Ref.path;
  var extended = $Ref.isExtended$Ref($ref);
  indirections += pointer.indirections;

  var existingEntry = findInInventory(inventory, $refParent, $refKey);
  if (existingEntry) {
    // This $Ref has already been inventoried, so we don't need to process it again
    if (depth < existingEntry.depth || indirections < existingEntry.indirections) {
      removeFromInventory(inventory, existingEntry);
    }
    else {
      return;
    }
  }

  inventory.push({
    $ref: $ref,                   // The JSON Reference (e.g. {$ref: string})
    parent: $refParent,           // The object that contains this $ref pointer
    key: $refKey,                 // The key in `parent` that is the $ref pointer
    pathFromRoot: pathFromRoot,   // The path to the $ref pointer, from the JSON Schema root
    depth: depth,                 // How far from the JSON Schema root is this $ref pointer?
    file: file,                   // The file that the $ref pointer resolves to
    hash: hash,                   // The hash within `file` that the $ref pointer resolves to
    value: pointer.value,         // The resolved value of the $ref pointer
    circular: pointer.circular,   // Is this $ref pointer DIRECTLY circular? (i.e. it references itself)
    extended: extended,           // Does this $ref extend its resolved value? (i.e. it has extra properties, in addition to "$ref")
    external: external,           // Does this $ref pointer point to a file other than the main JSON Schema file?
    indirections: indirections,   // The number of indirect references that were traversed to resolve the value
  });

  // Recursively crawl the resolved value
  crawl(pointer.value, null, pointer.path, pathFromRoot, indirections + 1, inventory, $refs, options);
}

/**
 * Re-maps every $ref pointer, so that they're all relative to the root of the JSON Schema.
 * Each referenced value is dereferenced EXACTLY ONCE.  All subsequent references to the same
 * value are re-mapped to point to the first reference.
 *
 * @example:
 *  {
 *    first: { $ref: somefile.json#/some/part },
 *    second: { $ref: somefile.json#/another/part },
 *    third: { $ref: somefile.json },
 *    fourth: { $ref: somefile.json#/some/part/sub/part }
 *  }
 *
 * In this example, there are four references to the same file, but since the third reference points
 * to the ENTIRE file, that's the only one we need to dereference.  The other three can just be
 * remapped to point inside the third one.
 *
 * On the other hand, if the third reference DIDN'T exist, then the first and second would both need
 * to be dereferenced, since they point to different parts of the file. The fourth reference does NOT
 * need to be dereferenced, because it can be remapped to point inside the first one.
 *
 * @param {object[]} inventory
 */
function remap (inventory) {
  // Group & sort all the $ref pointers, so they're in the order that we need to dereference/remap them
  inventory.sort(function (a, b) {
    if (a.file !== b.file) {
      // Group all the $refs that point to the same file
      return a.file < b.file ? -1 : +1;
    }
    else if (a.hash !== b.hash) {
      // Group all the $refs that point to the same part of the file
      return a.hash < b.hash ? -1 : +1;
    }
    else if (a.circular !== b.circular) {
      // If the $ref points to itself, then sort it higher than other $refs that point to this $ref
      return a.circular ? -1 : +1;
    }
    else if (a.extended !== b.extended) {
      // If the $ref extends the resolved value, then sort it lower than other $refs that don't extend the value
      return a.extended ? +1 : -1;
    }
    else if (a.indirections !== b.indirections) {
      // Sort direct references higher than indirect references
      return a.indirections - b.indirections;
    }
    else if (a.depth !== b.depth) {
      // Sort $refs by how close they are to the JSON Schema root
      return a.depth - b.depth;
    }
    else {
      // Determine how far each $ref is from the "definitions" property.
      // Most people will expect references to be bundled into the the "definitions" property if possible.
      var aDefinitionsIndex = a.pathFromRoot.lastIndexOf("/definitions");
      var bDefinitionsIndex = b.pathFromRoot.lastIndexOf("/definitions");

      if (aDefinitionsIndex !== bDefinitionsIndex) {
        // Give higher priority to the $ref that's closer to the "definitions" property
        return bDefinitionsIndex - aDefinitionsIndex;
      }
      else {
        // All else is equal, so use the shorter path, which will produce the shortest possible reference
        return a.pathFromRoot.length - b.pathFromRoot.length;
      }
    }
  });

  var file, hash, pathFromRoot;
  inventory.forEach(function (entry) {
    // console.log('Re-mapping $ref pointer "%s" at %s', entry.$ref.$ref, entry.pathFromRoot);

    if (!entry.external) {
      // This $ref already resolves to the main JSON Schema file
      entry.$ref.$ref = entry.hash;
    }
    else if (entry.file === file && entry.hash === hash) {
      // This $ref points to the same value as the prevous $ref, so remap it to the same path
      entry.$ref.$ref = pathFromRoot;
    }
    else if (entry.file === file && entry.hash.indexOf(hash + "/") === 0) {
      // This $ref points to a sub-value of the prevous $ref, so remap it beneath that path
      entry.$ref.$ref = Pointer.join(pathFromRoot, Pointer.parse(entry.hash.replace(hash, "#")));
    }
    else {
      // We've moved to a new file or new hash
      file = entry.file;
      hash = entry.hash;
      pathFromRoot = entry.pathFromRoot;

      // This is the first $ref to point to this value, so dereference the value.
      // Any other $refs that point to the same value will point to this $ref instead
      entry.$ref = entry.parent[entry.key] = $Ref.dereference(entry.$ref, entry.value);

      if (entry.circular) {
        // This $ref points to itself
        entry.$ref.$ref = entry.pathFromRoot;
      }
    }

    // console.log('    new value: %s', (entry.$ref && entry.$ref.$ref) ? entry.$ref.$ref : '[object Object]');
  });
}

/**
 * TODO
 */
function findInInventory (inventory, $refParent, $refKey) {
  for (var i = 0; i < inventory.length; i++) {
    var existingEntry = inventory[i];
    if (existingEntry.parent === $refParent && existingEntry.key === $refKey) {
      return existingEntry;
    }
  }
}

function removeFromInventory (inventory, entry) {
  var index = inventory.indexOf(entry);
  inventory.splice(index, 1);
}


/***/ }),
/* 351 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $Ref = __webpack_require__(344),
    Pointer = __webpack_require__(345),
    ono = __webpack_require__(336),
    url = __webpack_require__(341);

module.exports = dereference;

/**
 * Crawls the JSON schema, finds all JSON references, and dereferences them.
 * This method mutates the JSON schema object, replacing JSON references with their resolved value.
 *
 * @param {$RefParser} parser
 * @param {$RefParserOptions} options
 */
function dereference (parser, options) {
  // console.log('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);
  var dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, "#", [], parser.$refs, options);
  parser.$refs.circular = dereferenced.circular;
  parser.schema = dereferenced.value;
}

/**
 * Recursively crawls the given value, and dereferences any JSON references.
 *
 * @param {*} obj - The value to crawl. If it's not an object or array, it will be ignored.
 * @param {string} path - The full path of `obj`, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of `obj` from the schema root
 * @param {object[]} parents - An array of the parent objects that have already been dereferenced
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 * @returns {{value: object, circular: boolean}}
 */
function crawl (obj, path, pathFromRoot, parents, $refs, options) {
  var dereferenced;
  var result = {
    value: obj,
    circular: false
  };

  if (obj && typeof obj === "object") {
    parents.push(obj);

    if ($Ref.isAllowed$Ref(obj, options)) {
      dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, $refs, options);
      result.circular = dereferenced.circular;
      result.value = dereferenced.value;
    }
    else {
      Object.keys(obj).forEach(function (key) {
        var keyPath = Pointer.join(path, key);
        var keyPathFromRoot = Pointer.join(pathFromRoot, key);
        var value = obj[key];
        var circular = false;

        if ($Ref.isAllowed$Ref(value, options)) {
          dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, $refs, options);
          circular = dereferenced.circular;
          obj[key] = dereferenced.value;
        }
        else {
          if (parents.indexOf(value) === -1) {
            dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, $refs, options);
            circular = dereferenced.circular;
            obj[key] = dereferenced.value;
          }
          else {
            circular = foundCircularReference(keyPath, $refs, options);
          }
        }

        // Set the "isCircular" flag if this or any other property is circular
        result.circular = result.circular || circular;
      });
    }

    parents.pop();
  }

  return result;
}

/**
 * Dereferences the given JSON Reference, and then crawls the resulting value.
 *
 * @param {{$ref: string}} $ref - The JSON Reference to resolve
 * @param {string} path - The full path of `$ref`, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of `$ref` from the schema root
 * @param {object[]} parents - An array of the parent objects that have already been dereferenced
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 * @returns {{value: object, circular: boolean}}
 */
function dereference$Ref ($ref, path, pathFromRoot, parents, $refs, options) {
  // console.log('Dereferencing $ref pointer "%s" at %s', $ref.$ref, path);

  var $refPath = url.resolve(path, $ref.$ref);
  var pointer = $refs._resolve($refPath, options);

  // Check for circular references
  var directCircular = pointer.circular;
  var circular = directCircular || parents.indexOf(pointer.value) !== -1;
  circular && foundCircularReference(path, $refs, options);

  // Dereference the JSON reference
  var dereferencedValue = $Ref.dereference($ref, pointer.value);

  // Crawl the dereferenced value (unless it's circular)
  if (!circular) {
    // Determine if the dereferenced value is circular
    var dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, $refs, options);
    circular = dereferenced.circular;
    dereferencedValue = dereferenced.value;
  }

  if (circular && !directCircular && options.dereference.circular === "ignore") {
    // The user has chosen to "ignore" circular references, so don't change the value
    dereferencedValue = $ref;
  }

  if (directCircular) {
    // The pointer is a DIRECT circular reference (i.e. it references itself).
    // So replace the $ref path with the absolute path from the JSON Schema root
    dereferencedValue.$ref = pathFromRoot;
  }

  return {
    circular: circular,
    value: dereferencedValue
  };
}

/**
 * Called when a circular reference is found.
 * It sets the {@link $Refs#circular} flag, and throws an error if options.dereference.circular is false.
 *
 * @param {string} keyPath - The JSON Reference path of the circular reference
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 * @returns {boolean} - always returns true, to indicate that a circular reference was found
 */
function foundCircularReference (keyPath, $refs, options) {
  $refs.circular = true;
  if (!options.dereference.circular) {
    throw ono.reference("Circular $ref pointer found at %s", keyPath);
  }
  return true;
}


/***/ }),
/* 352 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var next = __webpack_require__(353)

module.exports = function maybe (cb, promise) {
  if (cb) {
    promise
      .then(function (result) {
        next(function () { cb(null, result) })
      }, function (err) {
        next(function () { cb(err) })
      })
    return undefined
  }
  else {
    return promise
  }
}


/***/ }),
/* 353 */
/***/ ((module) => {

"use strict";


function makeNext () {
  if (typeof process === 'object' && typeof process.nextTick === 'function') {
    return process.nextTick
  } else if (typeof setImmediate === 'function') {
    return setImmediate
  } else {
    return function next (f) {
      setTimeout(f, 0)
    }
  }
}

module.exports = makeNext()


/***/ }),
/* 354 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var vm = __webpack_require__(355);

/**
 * @implements {IHooks}
 */
class Hooks {
  /**
   * @callback HookCallback
   * @this {*|Jsep} this
   * @param {Jsep} env
   * @returns: void
   */
  /**
   * Adds the given callback to the list of callbacks for the given hook.
   *
   * The callback will be invoked when the hook it is registered for is run.
   *
   * One callback function can be registered to multiple hooks and the same hook multiple times.
   *
   * @param {string|object} name The name of the hook, or an object of callbacks keyed by name
   * @param {HookCallback|boolean} callback The callback function which is given environment variables.
   * @param {?boolean} [first=false] Will add the hook to the top of the list (defaults to the bottom)
   * @public
   */
  add(name, callback, first) {
    if (typeof arguments[0] != 'string') {
      // Multiple hook callbacks, keyed by name
      for (let name in arguments[0]) {
        this.add(name, arguments[0][name], arguments[1]);
      }
    } else {
      (Array.isArray(name) ? name : [name]).forEach(function (name) {
        this[name] = this[name] || [];
        if (callback) {
          this[name][first ? 'unshift' : 'push'](callback);
        }
      }, this);
    }
  }

  /**
   * Runs a hook invoking all registered callbacks with the given environment variables.
   *
   * Callbacks will be invoked synchronously and in the order in which they were registered.
   *
   * @param {string} name The name of the hook.
   * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
   * @public
   */
  run(name, env) {
    this[name] = this[name] || [];
    this[name].forEach(function (callback) {
      callback.call(env && env.context ? env.context : env, env);
    });
  }
}

/**
 * @implements {IPlugins}
 */
class Plugins {
  constructor(jsep) {
    this.jsep = jsep;
    this.registered = {};
  }

  /**
   * @callback PluginSetup
   * @this {Jsep} jsep
   * @returns: void
   */
  /**
   * Adds the given plugin(s) to the registry
   *
   * @param {object} plugins
   * @param {string} plugins.name The name of the plugin
   * @param {PluginSetup} plugins.init The init function
   * @public
   */
  register(...plugins) {
    plugins.forEach(plugin => {
      if (typeof plugin !== 'object' || !plugin.name || !plugin.init) {
        throw new Error('Invalid JSEP plugin format');
      }
      if (this.registered[plugin.name]) {
        // already registered. Ignore.
        return;
      }
      plugin.init(this.jsep);
      this.registered[plugin.name] = plugin;
    });
  }
}

//     JavaScript Expression Parser (JSEP) 1.4.0

class Jsep {
  /**
   * @returns {string}
   */
  static get version() {
    // To be filled in by the template
    return '1.4.0';
  }

  /**
   * @returns {string}
   */
  static toString() {
    return 'JavaScript Expression Parser (JSEP) v' + Jsep.version;
  }
  // ==================== CONFIG ================================
  /**
   * @method addUnaryOp
   * @param {string} op_name The name of the unary op to add
   * @returns {Jsep}
   */
  static addUnaryOp(op_name) {
    Jsep.max_unop_len = Math.max(op_name.length, Jsep.max_unop_len);
    Jsep.unary_ops[op_name] = 1;
    return Jsep;
  }

  /**
   * @method jsep.addBinaryOp
   * @param {string} op_name The name of the binary op to add
   * @param {number} precedence The precedence of the binary op (can be a float). Higher number = higher precedence
   * @param {boolean} [isRightAssociative=false] whether operator is right-associative
   * @returns {Jsep}
   */
  static addBinaryOp(op_name, precedence, isRightAssociative) {
    Jsep.max_binop_len = Math.max(op_name.length, Jsep.max_binop_len);
    Jsep.binary_ops[op_name] = precedence;
    if (isRightAssociative) {
      Jsep.right_associative.add(op_name);
    } else {
      Jsep.right_associative.delete(op_name);
    }
    return Jsep;
  }

  /**
   * @method addIdentifierChar
   * @param {string} char The additional character to treat as a valid part of an identifier
   * @returns {Jsep}
   */
  static addIdentifierChar(char) {
    Jsep.additional_identifier_chars.add(char);
    return Jsep;
  }

  /**
   * @method addLiteral
   * @param {string} literal_name The name of the literal to add
   * @param {*} literal_value The value of the literal
   * @returns {Jsep}
   */
  static addLiteral(literal_name, literal_value) {
    Jsep.literals[literal_name] = literal_value;
    return Jsep;
  }

  /**
   * @method removeUnaryOp
   * @param {string} op_name The name of the unary op to remove
   * @returns {Jsep}
   */
  static removeUnaryOp(op_name) {
    delete Jsep.unary_ops[op_name];
    if (op_name.length === Jsep.max_unop_len) {
      Jsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);
    }
    return Jsep;
  }

  /**
   * @method removeAllUnaryOps
   * @returns {Jsep}
   */
  static removeAllUnaryOps() {
    Jsep.unary_ops = {};
    Jsep.max_unop_len = 0;
    return Jsep;
  }

  /**
   * @method removeIdentifierChar
   * @param {string} char The additional character to stop treating as a valid part of an identifier
   * @returns {Jsep}
   */
  static removeIdentifierChar(char) {
    Jsep.additional_identifier_chars.delete(char);
    return Jsep;
  }

  /**
   * @method removeBinaryOp
   * @param {string} op_name The name of the binary op to remove
   * @returns {Jsep}
   */
  static removeBinaryOp(op_name) {
    delete Jsep.binary_ops[op_name];
    if (op_name.length === Jsep.max_binop_len) {
      Jsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);
    }
    Jsep.right_associative.delete(op_name);
    return Jsep;
  }

  /**
   * @method removeAllBinaryOps
   * @returns {Jsep}
   */
  static removeAllBinaryOps() {
    Jsep.binary_ops = {};
    Jsep.max_binop_len = 0;
    return Jsep;
  }

  /**
   * @method removeLiteral
   * @param {string} literal_name The name of the literal to remove
   * @returns {Jsep}
   */
  static removeLiteral(literal_name) {
    delete Jsep.literals[literal_name];
    return Jsep;
  }

  /**
   * @method removeAllLiterals
   * @returns {Jsep}
   */
  static removeAllLiterals() {
    Jsep.literals = {};
    return Jsep;
  }
  // ==================== END CONFIG ============================

  /**
   * @returns {string}
   */
  get char() {
    return this.expr.charAt(this.index);
  }

  /**
   * @returns {number}
   */
  get code() {
    return this.expr.charCodeAt(this.index);
  }
  /**
   * @param {string} expr a string with the passed in express
   * @returns Jsep
   */
  constructor(expr) {
    // `index` stores the character number we are currently at
    // All of the gobbles below will modify `index` as we move along
    this.expr = expr;
    this.index = 0;
  }

  /**
   * static top-level parser
   * @returns {jsep.Expression}
   */
  static parse(expr) {
    return new Jsep(expr).parse();
  }

  /**
   * Get the longest key length of any object
   * @param {object} obj
   * @returns {number}
   */
  static getMaxKeyLen(obj) {
    return Math.max(0, ...Object.keys(obj).map(k => k.length));
  }

  /**
   * `ch` is a character code in the next three functions
   * @param {number} ch
   * @returns {boolean}
   */
  static isDecimalDigit(ch) {
    return ch >= 48 && ch <= 57; // 0...9
  }

  /**
   * Returns the precedence of a binary operator or `0` if it isn't a binary operator. Can be float.
   * @param {string} op_val
   * @returns {number}
   */
  static binaryPrecedence(op_val) {
    return Jsep.binary_ops[op_val] || 0;
  }

  /**
   * Looks for start of identifier
   * @param {number} ch
   * @returns {boolean}
   */
  static isIdentifierStart(ch) {
    return ch >= 65 && ch <= 90 ||
    // A...Z
    ch >= 97 && ch <= 122 ||
    // a...z
    ch >= 128 && !Jsep.binary_ops[String.fromCharCode(ch)] ||
    // any non-ASCII that is not an operator
    Jsep.additional_identifier_chars.has(String.fromCharCode(ch)); // additional characters
  }

  /**
   * @param {number} ch
   * @returns {boolean}
   */
  static isIdentifierPart(ch) {
    return Jsep.isIdentifierStart(ch) || Jsep.isDecimalDigit(ch);
  }

  /**
   * throw error at index of the expression
   * @param {string} message
   * @throws
   */
  throwError(message) {
    const error = new Error(message + ' at character ' + this.index);
    error.index = this.index;
    error.description = message;
    throw error;
  }

  /**
   * Run a given hook
   * @param {string} name
   * @param {jsep.Expression|false} [node]
   * @returns {?jsep.Expression}
   */
  runHook(name, node) {
    if (Jsep.hooks[name]) {
      const env = {
        context: this,
        node
      };
      Jsep.hooks.run(name, env);
      return env.node;
    }
    return node;
  }

  /**
   * Runs a given hook until one returns a node
   * @param {string} name
   * @returns {?jsep.Expression}
   */
  searchHook(name) {
    if (Jsep.hooks[name]) {
      const env = {
        context: this
      };
      Jsep.hooks[name].find(function (callback) {
        callback.call(env.context, env);
        return env.node;
      });
      return env.node;
    }
  }

  /**
   * Push `index` up to the next non-space character
   */
  gobbleSpaces() {
    let ch = this.code;
    // Whitespace
    while (ch === Jsep.SPACE_CODE || ch === Jsep.TAB_CODE || ch === Jsep.LF_CODE || ch === Jsep.CR_CODE) {
      ch = this.expr.charCodeAt(++this.index);
    }
    this.runHook('gobble-spaces');
  }

  /**
   * Top-level method to parse all expressions and returns compound or single node
   * @returns {jsep.Expression}
   */
  parse() {
    this.runHook('before-all');
    const nodes = this.gobbleExpressions();

    // If there's only one expression just try returning the expression
    const node = nodes.length === 1 ? nodes[0] : {
      type: Jsep.COMPOUND,
      body: nodes
    };
    return this.runHook('after-all', node);
  }

  /**
   * top-level parser (but can be reused within as well)
   * @param {number} [untilICode]
   * @returns {jsep.Expression[]}
   */
  gobbleExpressions(untilICode) {
    let nodes = [],
      ch_i,
      node;
    while (this.index < this.expr.length) {
      ch_i = this.code;

      // Expressions can be separated by semicolons, commas, or just inferred without any
      // separators
      if (ch_i === Jsep.SEMCOL_CODE || ch_i === Jsep.COMMA_CODE) {
        this.index++; // ignore separators
      } else {
        // Try to gobble each expression individually
        if (node = this.gobbleExpression()) {
          nodes.push(node);
          // If we weren't able to find a binary expression and are out of room, then
          // the expression passed in probably has too much
        } else if (this.index < this.expr.length) {
          if (ch_i === untilICode) {
            break;
          }
          this.throwError('Unexpected "' + this.char + '"');
        }
      }
    }
    return nodes;
  }

  /**
   * The main parsing function.
   * @returns {?jsep.Expression}
   */
  gobbleExpression() {
    const node = this.searchHook('gobble-expression') || this.gobbleBinaryExpression();
    this.gobbleSpaces();
    return this.runHook('after-expression', node);
  }

  /**
   * Search for the operation portion of the string (e.g. `+`, `===`)
   * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)
   * and move down from 3 to 2 to 1 character until a matching binary operation is found
   * then, return that binary operation
   * @returns {string|boolean}
   */
  gobbleBinaryOp() {
    this.gobbleSpaces();
    let to_check = this.expr.substr(this.index, Jsep.max_binop_len);
    let tc_len = to_check.length;
    while (tc_len > 0) {
      // Don't accept a binary op when it is an identifier.
      // Binary ops that start with a identifier-valid character must be followed
      // by a non identifier-part valid character
      if (Jsep.binary_ops.hasOwnProperty(to_check) && (!Jsep.isIdentifierStart(this.code) || this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))) {
        this.index += tc_len;
        return to_check;
      }
      to_check = to_check.substr(0, --tc_len);
    }
    return false;
  }

  /**
   * This function is responsible for gobbling an individual expression,
   * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`
   * @returns {?jsep.BinaryExpression}
   */
  gobbleBinaryExpression() {
    let node, biop, prec, stack, biop_info, left, right, i, cur_biop;

    // First, try to get the leftmost thing
    // Then, check to see if there's a binary operator operating on that leftmost thing
    // Don't gobbleBinaryOp without a left-hand-side
    left = this.gobbleToken();
    if (!left) {
      return left;
    }
    biop = this.gobbleBinaryOp();

    // If there wasn't a binary operator, just return the leftmost node
    if (!biop) {
      return left;
    }

    // Otherwise, we need to start a stack to properly place the binary operations in their
    // precedence structure
    biop_info = {
      value: biop,
      prec: Jsep.binaryPrecedence(biop),
      right_a: Jsep.right_associative.has(biop)
    };
    right = this.gobbleToken();
    if (!right) {
      this.throwError("Expected expression after " + biop);
    }
    stack = [left, biop_info, right];

    // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)
    while (biop = this.gobbleBinaryOp()) {
      prec = Jsep.binaryPrecedence(biop);
      if (prec === 0) {
        this.index -= biop.length;
        break;
      }
      biop_info = {
        value: biop,
        prec,
        right_a: Jsep.right_associative.has(biop)
      };
      cur_biop = biop;

      // Reduce: make a binary expression from the three topmost entries.
      const comparePrev = prev => biop_info.right_a && prev.right_a ? prec > prev.prec : prec <= prev.prec;
      while (stack.length > 2 && comparePrev(stack[stack.length - 2])) {
        right = stack.pop();
        biop = stack.pop().value;
        left = stack.pop();
        node = {
          type: Jsep.BINARY_EXP,
          operator: biop,
          left,
          right
        };
        stack.push(node);
      }
      node = this.gobbleToken();
      if (!node) {
        this.throwError("Expected expression after " + cur_biop);
      }
      stack.push(biop_info, node);
    }
    i = stack.length - 1;
    node = stack[i];
    while (i > 1) {
      node = {
        type: Jsep.BINARY_EXP,
        operator: stack[i - 1].value,
        left: stack[i - 2],
        right: node
      };
      i -= 2;
    }
    return node;
  }

  /**
   * An individual part of a binary expression:
   * e.g. `foo.bar(baz)`, `1`, `"abc"`, `(a % 2)` (because it's in parenthesis)
   * @returns {boolean|jsep.Expression}
   */
  gobbleToken() {
    let ch, to_check, tc_len, node;
    this.gobbleSpaces();
    node = this.searchHook('gobble-token');
    if (node) {
      return this.runHook('after-token', node);
    }
    ch = this.code;
    if (Jsep.isDecimalDigit(ch) || ch === Jsep.PERIOD_CODE) {
      // Char code 46 is a dot `.` which can start off a numeric literal
      return this.gobbleNumericLiteral();
    }
    if (ch === Jsep.SQUOTE_CODE || ch === Jsep.DQUOTE_CODE) {
      // Single or double quotes
      node = this.gobbleStringLiteral();
    } else if (ch === Jsep.OBRACK_CODE) {
      node = this.gobbleArray();
    } else {
      to_check = this.expr.substr(this.index, Jsep.max_unop_len);
      tc_len = to_check.length;
      while (tc_len > 0) {
        // Don't accept an unary op when it is an identifier.
        // Unary ops that start with a identifier-valid character must be followed
        // by a non identifier-part valid character
        if (Jsep.unary_ops.hasOwnProperty(to_check) && (!Jsep.isIdentifierStart(this.code) || this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))) {
          this.index += tc_len;
          const argument = this.gobbleToken();
          if (!argument) {
            this.throwError('missing unaryOp argument');
          }
          return this.runHook('after-token', {
            type: Jsep.UNARY_EXP,
            operator: to_check,
            argument,
            prefix: true
          });
        }
        to_check = to_check.substr(0, --tc_len);
      }
      if (Jsep.isIdentifierStart(ch)) {
        node = this.gobbleIdentifier();
        if (Jsep.literals.hasOwnProperty(node.name)) {
          node = {
            type: Jsep.LITERAL,
            value: Jsep.literals[node.name],
            raw: node.name
          };
        } else if (node.name === Jsep.this_str) {
          node = {
            type: Jsep.THIS_EXP
          };
        }
      } else if (ch === Jsep.OPAREN_CODE) {
        // open parenthesis
        node = this.gobbleGroup();
      }
    }
    if (!node) {
      return this.runHook('after-token', false);
    }
    node = this.gobbleTokenProperty(node);
    return this.runHook('after-token', node);
  }

  /**
   * Gobble properties of of identifiers/strings/arrays/groups.
   * e.g. `foo`, `bar.baz`, `foo['bar'].baz`
   * It also gobbles function calls:
   * e.g. `Math.acos(obj.angle)`
   * @param {jsep.Expression} node
   * @returns {jsep.Expression}
   */
  gobbleTokenProperty(node) {
    this.gobbleSpaces();
    let ch = this.code;
    while (ch === Jsep.PERIOD_CODE || ch === Jsep.OBRACK_CODE || ch === Jsep.OPAREN_CODE || ch === Jsep.QUMARK_CODE) {
      let optional;
      if (ch === Jsep.QUMARK_CODE) {
        if (this.expr.charCodeAt(this.index + 1) !== Jsep.PERIOD_CODE) {
          break;
        }
        optional = true;
        this.index += 2;
        this.gobbleSpaces();
        ch = this.code;
      }
      this.index++;
      if (ch === Jsep.OBRACK_CODE) {
        node = {
          type: Jsep.MEMBER_EXP,
          computed: true,
          object: node,
          property: this.gobbleExpression()
        };
        if (!node.property) {
          this.throwError('Unexpected "' + this.char + '"');
        }
        this.gobbleSpaces();
        ch = this.code;
        if (ch !== Jsep.CBRACK_CODE) {
          this.throwError('Unclosed [');
        }
        this.index++;
      } else if (ch === Jsep.OPAREN_CODE) {
        // A function call is being made; gobble all the arguments
        node = {
          type: Jsep.CALL_EXP,
          'arguments': this.gobbleArguments(Jsep.CPAREN_CODE),
          callee: node
        };
      } else if (ch === Jsep.PERIOD_CODE || optional) {
        if (optional) {
          this.index--;
        }
        this.gobbleSpaces();
        node = {
          type: Jsep.MEMBER_EXP,
          computed: false,
          object: node,
          property: this.gobbleIdentifier()
        };
      }
      if (optional) {
        node.optional = true;
      } // else leave undefined for compatibility with esprima

      this.gobbleSpaces();
      ch = this.code;
    }
    return node;
  }

  /**
   * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to
   * keep track of everything in the numeric literal and then calling `parseFloat` on that string
   * @returns {jsep.Literal}
   */
  gobbleNumericLiteral() {
    let number = '',
      ch,
      chCode;
    while (Jsep.isDecimalDigit(this.code)) {
      number += this.expr.charAt(this.index++);
    }
    if (this.code === Jsep.PERIOD_CODE) {
      // can start with a decimal marker
      number += this.expr.charAt(this.index++);
      while (Jsep.isDecimalDigit(this.code)) {
        number += this.expr.charAt(this.index++);
      }
    }
    ch = this.char;
    if (ch === 'e' || ch === 'E') {
      // exponent marker
      number += this.expr.charAt(this.index++);
      ch = this.char;
      if (ch === '+' || ch === '-') {
        // exponent sign
        number += this.expr.charAt(this.index++);
      }
      while (Jsep.isDecimalDigit(this.code)) {
        // exponent itself
        number += this.expr.charAt(this.index++);
      }
      if (!Jsep.isDecimalDigit(this.expr.charCodeAt(this.index - 1))) {
        this.throwError('Expected exponent (' + number + this.char + ')');
      }
    }
    chCode = this.code;

    // Check to make sure this isn't a variable name that start with a number (123abc)
    if (Jsep.isIdentifierStart(chCode)) {
      this.throwError('Variable names cannot start with a number (' + number + this.char + ')');
    } else if (chCode === Jsep.PERIOD_CODE || number.length === 1 && number.charCodeAt(0) === Jsep.PERIOD_CODE) {
      this.throwError('Unexpected period');
    }
    return {
      type: Jsep.LITERAL,
      value: parseFloat(number),
      raw: number
    };
  }

  /**
   * Parses a string literal, staring with single or double quotes with basic support for escape codes
   * e.g. `"hello world"`, `'this is\nJSEP'`
   * @returns {jsep.Literal}
   */
  gobbleStringLiteral() {
    let str = '';
    const startIndex = this.index;
    const quote = this.expr.charAt(this.index++);
    let closed = false;
    while (this.index < this.expr.length) {
      let ch = this.expr.charAt(this.index++);
      if (ch === quote) {
        closed = true;
        break;
      } else if (ch === '\\') {
        // Check for all of the common escape codes
        ch = this.expr.charAt(this.index++);
        switch (ch) {
          case 'n':
            str += '\n';
            break;
          case 'r':
            str += '\r';
            break;
          case 't':
            str += '\t';
            break;
          case 'b':
            str += '\b';
            break;
          case 'f':
            str += '\f';
            break;
          case 'v':
            str += '\x0B';
            break;
          default:
            str += ch;
        }
      } else {
        str += ch;
      }
    }
    if (!closed) {
      this.throwError('Unclosed quote after "' + str + '"');
    }
    return {
      type: Jsep.LITERAL,
      value: str,
      raw: this.expr.substring(startIndex, this.index)
    };
  }

  /**
   * Gobbles only identifiers
   * e.g.: `foo`, `_value`, `$x1`
   * Also, this function checks if that identifier is a literal:
   * (e.g. `true`, `false`, `null`) or `this`
   * @returns {jsep.Identifier}
   */
  gobbleIdentifier() {
    let ch = this.code,
      start = this.index;
    if (Jsep.isIdentifierStart(ch)) {
      this.index++;
    } else {
      this.throwError('Unexpected ' + this.char);
    }
    while (this.index < this.expr.length) {
      ch = this.code;
      if (Jsep.isIdentifierPart(ch)) {
        this.index++;
      } else {
        break;
      }
    }
    return {
      type: Jsep.IDENTIFIER,
      name: this.expr.slice(start, this.index)
    };
  }

  /**
   * Gobbles a list of arguments within the context of a function call
   * or array literal. This function also assumes that the opening character
   * `(` or `[` has already been gobbled, and gobbles expressions and commas
   * until the terminator character `)` or `]` is encountered.
   * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`
   * @param {number} termination
   * @returns {jsep.Expression[]}
   */
  gobbleArguments(termination) {
    const args = [];
    let closed = false;
    let separator_count = 0;
    while (this.index < this.expr.length) {
      this.gobbleSpaces();
      let ch_i = this.code;
      if (ch_i === termination) {
        // done parsing
        closed = true;
        this.index++;
        if (termination === Jsep.CPAREN_CODE && separator_count && separator_count >= args.length) {
          this.throwError('Unexpected token ' + String.fromCharCode(termination));
        }
        break;
      } else if (ch_i === Jsep.COMMA_CODE) {
        // between expressions
        this.index++;
        separator_count++;
        if (separator_count !== args.length) {
          // missing argument
          if (termination === Jsep.CPAREN_CODE) {
            this.throwError('Unexpected token ,');
          } else if (termination === Jsep.CBRACK_CODE) {
            for (let arg = args.length; arg < separator_count; arg++) {
              args.push(null);
            }
          }
        }
      } else if (args.length !== separator_count && separator_count !== 0) {
        // NOTE: `&& separator_count !== 0` allows for either all commas, or all spaces as arguments
        this.throwError('Expected comma');
      } else {
        const node = this.gobbleExpression();
        if (!node || node.type === Jsep.COMPOUND) {
          this.throwError('Expected comma');
        }
        args.push(node);
      }
    }
    if (!closed) {
      this.throwError('Expected ' + String.fromCharCode(termination));
    }
    return args;
  }

  /**
   * Responsible for parsing a group of things within parentheses `()`
   * that have no identifier in front (so not a function call)
   * This function assumes that it needs to gobble the opening parenthesis
   * and then tries to gobble everything within that parenthesis, assuming
   * that the next thing it should see is the close parenthesis. If not,
   * then the expression probably doesn't have a `)`
   * @returns {boolean|jsep.Expression}
   */
  gobbleGroup() {
    this.index++;
    let nodes = this.gobbleExpressions(Jsep.CPAREN_CODE);
    if (this.code === Jsep.CPAREN_CODE) {
      this.index++;
      if (nodes.length === 1) {
        return nodes[0];
      } else if (!nodes.length) {
        return false;
      } else {
        return {
          type: Jsep.SEQUENCE_EXP,
          expressions: nodes
        };
      }
    } else {
      this.throwError('Unclosed (');
    }
  }

  /**
   * Responsible for parsing Array literals `[1, 2, 3]`
   * This function assumes that it needs to gobble the opening bracket
   * and then tries to gobble the expressions as arguments.
   * @returns {jsep.ArrayExpression}
   */
  gobbleArray() {
    this.index++;
    return {
      type: Jsep.ARRAY_EXP,
      elements: this.gobbleArguments(Jsep.CBRACK_CODE)
    };
  }
}

// Static fields:
const hooks = new Hooks();
Object.assign(Jsep, {
  hooks,
  plugins: new Plugins(Jsep),
  // Node Types
  // ----------
  // This is the full set of types that any JSEP node can be.
  // Store them here to save space when minified
  COMPOUND: 'Compound',
  SEQUENCE_EXP: 'SequenceExpression',
  IDENTIFIER: 'Identifier',
  MEMBER_EXP: 'MemberExpression',
  LITERAL: 'Literal',
  THIS_EXP: 'ThisExpression',
  CALL_EXP: 'CallExpression',
  UNARY_EXP: 'UnaryExpression',
  BINARY_EXP: 'BinaryExpression',
  ARRAY_EXP: 'ArrayExpression',
  TAB_CODE: 9,
  LF_CODE: 10,
  CR_CODE: 13,
  SPACE_CODE: 32,
  PERIOD_CODE: 46,
  // '.'
  COMMA_CODE: 44,
  // ','
  SQUOTE_CODE: 39,
  // single quote
  DQUOTE_CODE: 34,
  // double quotes
  OPAREN_CODE: 40,
  // (
  CPAREN_CODE: 41,
  // )
  OBRACK_CODE: 91,
  // [
  CBRACK_CODE: 93,
  // ]
  QUMARK_CODE: 63,
  // ?
  SEMCOL_CODE: 59,
  // ;
  COLON_CODE: 58,
  // :

  // Operations
  // ----------
  // Use a quickly-accessible map to store all of the unary operators
  // Values are set to `1` (it really doesn't matter)
  unary_ops: {
    '-': 1,
    '!': 1,
    '~': 1,
    '+': 1
  },
  // Also use a map for the binary operations but set their values to their
  // binary precedence for quick reference (higher number = higher precedence)
  // see [Order of operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)
  binary_ops: {
    '||': 1,
    '??': 1,
    '&&': 2,
    '|': 3,
    '^': 4,
    '&': 5,
    '==': 6,
    '!=': 6,
    '===': 6,
    '!==': 6,
    '<': 7,
    '>': 7,
    '<=': 7,
    '>=': 7,
    '<<': 8,
    '>>': 8,
    '>>>': 8,
    '+': 9,
    '-': 9,
    '*': 10,
    '/': 10,
    '%': 10,
    '**': 11
  },
  // sets specific binary_ops as right-associative
  right_associative: new Set(['**']),
  // Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)
  additional_identifier_chars: new Set(['$', '_']),
  // Literals
  // ----------
  // Store the values to return for the various literals we may encounter
  literals: {
    'true': true,
    'false': false,
    'null': null
  },
  // Except for `this`, which is special. This could be changed to something like `'self'` as well
  this_str: 'this'
});
Jsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);
Jsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);

// Backward Compatibility:
const jsep = expr => new Jsep(expr).parse();
const stdClassProps = Object.getOwnPropertyNames(class Test {});
Object.getOwnPropertyNames(Jsep).filter(prop => !stdClassProps.includes(prop) && jsep[prop] === undefined).forEach(m => {
  jsep[m] = Jsep[m];
});
jsep.Jsep = Jsep; // allows for const { Jsep } = require('jsep');

const CONDITIONAL_EXP = 'ConditionalExpression';
var ternary = {
  name: 'ternary',
  init(jsep) {
    // Ternary expression: test ? consequent : alternate
    jsep.hooks.add('after-expression', function gobbleTernary(env) {
      if (env.node && this.code === jsep.QUMARK_CODE) {
        this.index++;
        const test = env.node;
        const consequent = this.gobbleExpression();
        if (!consequent) {
          this.throwError('Expected expression');
        }
        this.gobbleSpaces();
        if (this.code === jsep.COLON_CODE) {
          this.index++;
          const alternate = this.gobbleExpression();
          if (!alternate) {
            this.throwError('Expected expression');
          }
          env.node = {
            type: CONDITIONAL_EXP,
            test,
            consequent,
            alternate
          };

          // check for operators of higher priority than ternary (i.e. assignment)
          // jsep sets || at 1, and assignment at 0.9, and conditional should be between them
          if (test.operator && jsep.binary_ops[test.operator] <= 0.9) {
            let newTest = test;
            while (newTest.right.operator && jsep.binary_ops[newTest.right.operator] <= 0.9) {
              newTest = newTest.right;
            }
            env.node.test = newTest.right;
            newTest.right = env.node;
            env.node = test;
          }
        } else {
          this.throwError('Expected :');
        }
      }
    });
  }
};

// Add default plugins:

jsep.plugins.register(ternary);

const FSLASH_CODE = 47; // '/'
const BSLASH_CODE = 92; // '\\'

var index = {
  name: 'regex',
  init(jsep) {
    // Regex literal: /abc123/ig
    jsep.hooks.add('gobble-token', function gobbleRegexLiteral(env) {
      if (this.code === FSLASH_CODE) {
        const patternIndex = ++this.index;
        let inCharSet = false;
        while (this.index < this.expr.length) {
          if (this.code === FSLASH_CODE && !inCharSet) {
            const pattern = this.expr.slice(patternIndex, this.index);
            let flags = '';
            while (++this.index < this.expr.length) {
              const code = this.code;
              if (code >= 97 && code <= 122 // a...z
              || code >= 65 && code <= 90 // A...Z
              || code >= 48 && code <= 57) {
                // 0-9
                flags += this.char;
              } else {
                break;
              }
            }
            let value;
            try {
              value = new RegExp(pattern, flags);
            } catch (e) {
              this.throwError(e.message);
            }
            env.node = {
              type: jsep.LITERAL,
              value,
              raw: this.expr.slice(patternIndex - 1, this.index)
            };

            // allow . [] and () after regex: /regex/.test(a)
            env.node = this.gobbleTokenProperty(env.node);
            return env.node;
          }
          if (this.code === jsep.OBRACK_CODE) {
            inCharSet = true;
          } else if (inCharSet && this.code === jsep.CBRACK_CODE) {
            inCharSet = false;
          }
          this.index += this.code === BSLASH_CODE ? 2 : 1;
        }
        this.throwError('Unclosed Regex');
      }
    });
  }
};

const PLUS_CODE = 43; // +
const MINUS_CODE = 45; // -

const plugin = {
  name: 'assignment',
  assignmentOperators: new Set(['=', '*=', '**=', '/=', '%=', '+=', '-=', '<<=', '>>=', '>>>=', '&=', '^=', '|=', '||=', '&&=', '??=']),
  updateOperators: [PLUS_CODE, MINUS_CODE],
  assignmentPrecedence: 0.9,
  init(jsep) {
    const updateNodeTypes = [jsep.IDENTIFIER, jsep.MEMBER_EXP];
    plugin.assignmentOperators.forEach(op => jsep.addBinaryOp(op, plugin.assignmentPrecedence, true));
    jsep.hooks.add('gobble-token', function gobbleUpdatePrefix(env) {
      const code = this.code;
      if (plugin.updateOperators.some(c => c === code && c === this.expr.charCodeAt(this.index + 1))) {
        this.index += 2;
        env.node = {
          type: 'UpdateExpression',
          operator: code === PLUS_CODE ? '++' : '--',
          argument: this.gobbleTokenProperty(this.gobbleIdentifier()),
          prefix: true
        };
        if (!env.node.argument || !updateNodeTypes.includes(env.node.argument.type)) {
          this.throwError(`Unexpected ${env.node.operator}`);
        }
      }
    });
    jsep.hooks.add('after-token', function gobbleUpdatePostfix(env) {
      if (env.node) {
        const code = this.code;
        if (plugin.updateOperators.some(c => c === code && c === this.expr.charCodeAt(this.index + 1))) {
          if (!updateNodeTypes.includes(env.node.type)) {
            this.throwError(`Unexpected ${env.node.operator}`);
          }
          this.index += 2;
          env.node = {
            type: 'UpdateExpression',
            operator: code === PLUS_CODE ? '++' : '--',
            argument: env.node,
            prefix: false
          };
        }
      }
    });
    jsep.hooks.add('after-expression', function gobbleAssignment(env) {
      if (env.node) {
        // Note: Binaries can be chained in a single expression to respect
        // operator precedence (i.e. a = b = 1 + 2 + 3)
        // Update all binary assignment nodes in the tree
        updateBinariesToAssignments(env.node);
      }
    });
    function updateBinariesToAssignments(node) {
      if (plugin.assignmentOperators.has(node.operator)) {
        node.type = 'AssignmentExpression';
        updateBinariesToAssignments(node.left);
        updateBinariesToAssignments(node.right);
      } else if (!node.operator) {
        Object.values(node).forEach(val => {
          if (val && typeof val === 'object') {
            updateBinariesToAssignments(val);
          }
        });
      }
    }
  }
};

/* eslint-disable no-bitwise -- Convenient */

// register plugins
jsep.plugins.register(index, plugin);
jsep.addUnaryOp('typeof');
jsep.addLiteral('null', null);
jsep.addLiteral('undefined', undefined);
const BLOCKED_PROTO_PROPERTIES = new Set(['constructor', '__proto__', '__defineGetter__', '__defineSetter__']);
const SafeEval = {
  /**
   * @param {jsep.Expression} ast
   * @param {Record<string, any>} subs
   */
  evalAst(ast, subs) {
    switch (ast.type) {
      case 'BinaryExpression':
      case 'LogicalExpression':
        return SafeEval.evalBinaryExpression(ast, subs);
      case 'Compound':
        return SafeEval.evalCompound(ast, subs);
      case 'ConditionalExpression':
        return SafeEval.evalConditionalExpression(ast, subs);
      case 'Identifier':
        return SafeEval.evalIdentifier(ast, subs);
      case 'Literal':
        return SafeEval.evalLiteral(ast, subs);
      case 'MemberExpression':
        return SafeEval.evalMemberExpression(ast, subs);
      case 'UnaryExpression':
        return SafeEval.evalUnaryExpression(ast, subs);
      case 'ArrayExpression':
        return SafeEval.evalArrayExpression(ast, subs);
      case 'CallExpression':
        return SafeEval.evalCallExpression(ast, subs);
      case 'AssignmentExpression':
        return SafeEval.evalAssignmentExpression(ast, subs);
      default:
        throw SyntaxError('Unexpected expression', ast);
    }
  },
  evalBinaryExpression(ast, subs) {
    const result = {
      '||': (a, b) => a || b(),
      '&&': (a, b) => a && b(),
      '|': (a, b) => a | b(),
      '^': (a, b) => a ^ b(),
      '&': (a, b) => a & b(),
      // eslint-disable-next-line eqeqeq -- API
      '==': (a, b) => a == b(),
      // eslint-disable-next-line eqeqeq -- API
      '!=': (a, b) => a != b(),
      '===': (a, b) => a === b(),
      '!==': (a, b) => a !== b(),
      '<': (a, b) => a < b(),
      '>': (a, b) => a > b(),
      '<=': (a, b) => a <= b(),
      '>=': (a, b) => a >= b(),
      '<<': (a, b) => a << b(),
      '>>': (a, b) => a >> b(),
      '>>>': (a, b) => a >>> b(),
      '+': (a, b) => a + b(),
      '-': (a, b) => a - b(),
      '*': (a, b) => a * b(),
      '/': (a, b) => a / b(),
      '%': (a, b) => a % b()
    }[ast.operator](SafeEval.evalAst(ast.left, subs), () => SafeEval.evalAst(ast.right, subs));
    return result;
  },
  evalCompound(ast, subs) {
    let last;
    for (let i = 0; i < ast.body.length; i++) {
      if (ast.body[i].type === 'Identifier' && ['var', 'let', 'const'].includes(ast.body[i].name) && ast.body[i + 1] && ast.body[i + 1].type === 'AssignmentExpression') {
        // var x=2; is detected as
        // [{Identifier var}, {AssignmentExpression x=2}]
        // eslint-disable-next-line @stylistic/max-len -- Long
        // eslint-disable-next-line sonarjs/updated-loop-counter -- Convenient
        i += 1;
      }
      const expr = ast.body[i];
      last = SafeEval.evalAst(expr, subs);
    }
    return last;
  },
  evalConditionalExpression(ast, subs) {
    if (SafeEval.evalAst(ast.test, subs)) {
      return SafeEval.evalAst(ast.consequent, subs);
    }
    return SafeEval.evalAst(ast.alternate, subs);
  },
  evalIdentifier(ast, subs) {
    if (Object.hasOwn(subs, ast.name)) {
      return subs[ast.name];
    }
    throw ReferenceError(`${ast.name} is not defined`);
  },
  evalLiteral(ast) {
    return ast.value;
  },
  evalMemberExpression(ast, subs) {
    const prop = String(
    // NOTE: `String(value)` throws error when
    // value has overwritten the toString method to return non-string
    // i.e. `value = {toString: () => []}`
    ast.computed ? SafeEval.evalAst(ast.property) // `object[property]`
    : ast.property.name // `object.property` property is Identifier
    );
    const obj = SafeEval.evalAst(ast.object, subs);
    if (obj === undefined || obj === null) {
      throw TypeError(`Cannot read properties of ${obj} (reading '${prop}')`);
    }
    if (!Object.hasOwn(obj, prop) && BLOCKED_PROTO_PROPERTIES.has(prop)) {
      throw TypeError(`Cannot read properties of ${obj} (reading '${prop}')`);
    }
    const result = obj[prop];
    if (typeof result === 'function') {
      return result.bind(obj); // arrow functions aren't affected by bind.
    }
    return result;
  },
  evalUnaryExpression(ast, subs) {
    const result = {
      '-': a => -SafeEval.evalAst(a, subs),
      '!': a => !SafeEval.evalAst(a, subs),
      '~': a => ~SafeEval.evalAst(a, subs),
      // eslint-disable-next-line no-implicit-coercion -- API
      '+': a => +SafeEval.evalAst(a, subs),
      typeof: a => typeof SafeEval.evalAst(a, subs)
    }[ast.operator](ast.argument);
    return result;
  },
  evalArrayExpression(ast, subs) {
    return ast.elements.map(el => SafeEval.evalAst(el, subs));
  },
  evalCallExpression(ast, subs) {
    const args = ast.arguments.map(arg => SafeEval.evalAst(arg, subs));
    const func = SafeEval.evalAst(ast.callee, subs);
    // if (func === Function) {
    //     throw new Error('Function constructor is disabled');
    // }
    return func(...args);
  },
  evalAssignmentExpression(ast, subs) {
    if (ast.left.type !== 'Identifier') {
      throw SyntaxError('Invalid left-hand side in assignment');
    }
    const id = ast.left.name;
    const value = SafeEval.evalAst(ast.right, subs);
    subs[id] = value;
    return subs[id];
  }
};

/**
 * A replacement for NodeJS' VM.Script which is also {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP | Content Security Policy} friendly.
 */
class SafeScript {
  /**
   * @param {string} expr Expression to evaluate
   */
  constructor(expr) {
    this.code = expr;
    this.ast = jsep(this.code);
  }

  /**
   * @param {object} context Object whose items will be added
   *   to evaluation
   * @returns {EvaluatedResult} Result of evaluated code
   */
  runInNewContext(context) {
    // `Object.create(null)` creates a prototypeless object
    const keyMap = Object.assign(Object.create(null), context);
    return SafeEval.evalAst(this.ast, keyMap);
  }
}

/* eslint-disable camelcase -- Convenient for escaping */


/**
 * @typedef {null|boolean|number|string|object|GenericArray} JSONObject
 */

/**
 * @typedef {any} AnyItem
 */

/**
 * @typedef {any} AnyResult
 */

/**
 * Copies array and then pushes item into it.
 * @param {GenericArray} arr Array to copy and into which to push
 * @param {AnyItem} item Array item to add (to end)
 * @returns {GenericArray} Copy of the original array
 */
function push(arr, item) {
  arr = arr.slice();
  arr.push(item);
  return arr;
}
/**
 * Copies array and then unshifts item into it.
 * @param {AnyItem} item Array item to add (to beginning)
 * @param {GenericArray} arr Array to copy and into which to unshift
 * @returns {GenericArray} Copy of the original array
 */
function unshift(item, arr) {
  arr = arr.slice();
  arr.unshift(item);
  return arr;
}

/**
 * Caught when JSONPath is used without `new` but rethrown if with `new`
 * @extends Error
 */
class NewError extends Error {
  /**
   * @param {AnyResult} value The evaluated scalar value
   */
  constructor(value) {
    super('JSONPath should not be called with "new" (it prevents return ' + 'of (unwrapped) scalar values)');
    this.avoidNew = true;
    this.value = value;
    this.name = 'NewError';
  }
}

/**
* @typedef {object} ReturnObject
* @property {string} path
* @property {JSONObject} value
* @property {object|GenericArray} parent
* @property {string} parentProperty
*/

/**
* @callback JSONPathCallback
* @param {string|object} preferredOutput
* @param {"value"|"property"} type
* @param {ReturnObject} fullRetObj
* @returns {void}
*/

/**
* @callback OtherTypeCallback
* @param {JSONObject} val
* @param {string} path
* @param {object|GenericArray} parent
* @param {string} parentPropName
* @returns {boolean}
*/

/**
 * @typedef {any} ContextItem
 */

/**
 * @typedef {any} EvaluatedResult
 */

/**
* @callback EvalCallback
* @param {string} code
* @param {ContextItem} context
* @returns {EvaluatedResult}
*/

/**
 * @typedef {typeof SafeScript} EvalClass
 */

/**
 * @typedef {object} JSONPathOptions
 * @property {JSON} json
 * @property {string|string[]} path
 * @property {"value"|"path"|"pointer"|"parent"|"parentProperty"|
 *   "all"} [resultType="value"]
 * @property {boolean} [flatten=false]
 * @property {boolean} [wrap=true]
 * @property {object} [sandbox={}]
 * @property {EvalCallback|EvalClass|'safe'|'native'|
 *   boolean} [eval = 'safe']
 * @property {object|GenericArray|null} [parent=null]
 * @property {string|null} [parentProperty=null]
 * @property {JSONPathCallback} [callback]
 * @property {OtherTypeCallback} [otherTypeCallback] Defaults to
 *   function which throws on encountering `@other`
 * @property {boolean} [autostart=true]
 */

/**
 * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`
 * @param {string} [expr] JSON path to evaluate
 * @param {JSON} [obj] JSON object to evaluate against
 * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload
 *     per `resultType`, 2) `"value"|"property"`, 3) Full returned object with
 *     all payloads
 * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end
 *   of one's query, this will be invoked with the value of the item, its
 *   path, its parent, and its parent's property name, and it should return
 *   a boolean indicating whether the supplied value belongs to the "other"
 *   type or not (or it may handle transformations and return `false`).
 * @returns {JSONPath}
 * @class
 */
function JSONPath(opts, expr, obj, callback, otherTypeCallback) {
  // eslint-disable-next-line no-restricted-syntax -- Allow for pseudo-class
  if (!(this instanceof JSONPath)) {
    try {
      return new JSONPath(opts, expr, obj, callback, otherTypeCallback);
    } catch (e) {
      if (!e.avoidNew) {
        throw e;
      }
      return e.value;
    }
  }
  if (typeof opts === 'string') {
    otherTypeCallback = callback;
    callback = obj;
    obj = expr;
    expr = opts;
    opts = null;
  }
  const optObj = opts && typeof opts === 'object';
  opts = opts || {};
  this.json = opts.json || obj;
  this.path = opts.path || expr;
  this.resultType = opts.resultType || 'value';
  this.flatten = opts.flatten || false;
  this.wrap = Object.hasOwn(opts, 'wrap') ? opts.wrap : true;
  this.sandbox = opts.sandbox || {};
  this.eval = opts.eval === undefined ? 'safe' : opts.eval;
  this.ignoreEvalErrors = typeof opts.ignoreEvalErrors === 'undefined' ? false : opts.ignoreEvalErrors;
  this.parent = opts.parent || null;
  this.parentProperty = opts.parentProperty || null;
  this.callback = opts.callback || callback || null;
  this.otherTypeCallback = opts.otherTypeCallback || otherTypeCallback || function () {
    throw new TypeError('You must supply an otherTypeCallback callback option ' + 'with the @other() operator.');
  };
  if (opts.autostart !== false) {
    const args = {
      path: optObj ? opts.path : expr
    };
    if (!optObj) {
      args.json = obj;
    } else if ('json' in opts) {
      args.json = opts.json;
    }
    const ret = this.evaluate(args);
    if (!ret || typeof ret !== 'object') {
      throw new NewError(ret);
    }
    return ret;
  }
}

// PUBLIC METHODS
JSONPath.prototype.evaluate = function (expr, json, callback, otherTypeCallback) {
  let currParent = this.parent,
    currParentProperty = this.parentProperty;
  let {
    flatten,
    wrap
  } = this;
  this.currResultType = this.resultType;
  this.currEval = this.eval;
  this.currSandbox = this.sandbox;
  callback = callback || this.callback;
  this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;
  json = json || this.json;
  expr = expr || this.path;
  if (expr && typeof expr === 'object' && !Array.isArray(expr)) {
    if (!expr.path && expr.path !== '') {
      throw new TypeError('You must supply a "path" property when providing an object ' + 'argument to JSONPath.evaluate().');
    }
    if (!Object.hasOwn(expr, 'json')) {
      throw new TypeError('You must supply a "json" property when providing an object ' + 'argument to JSONPath.evaluate().');
    }
    ({
      json
    } = expr);
    flatten = Object.hasOwn(expr, 'flatten') ? expr.flatten : flatten;
    this.currResultType = Object.hasOwn(expr, 'resultType') ? expr.resultType : this.currResultType;
    this.currSandbox = Object.hasOwn(expr, 'sandbox') ? expr.sandbox : this.currSandbox;
    wrap = Object.hasOwn(expr, 'wrap') ? expr.wrap : wrap;
    this.currEval = Object.hasOwn(expr, 'eval') ? expr.eval : this.currEval;
    callback = Object.hasOwn(expr, 'callback') ? expr.callback : callback;
    this.currOtherTypeCallback = Object.hasOwn(expr, 'otherTypeCallback') ? expr.otherTypeCallback : this.currOtherTypeCallback;
    currParent = Object.hasOwn(expr, 'parent') ? expr.parent : currParent;
    currParentProperty = Object.hasOwn(expr, 'parentProperty') ? expr.parentProperty : currParentProperty;
    expr = expr.path;
  }
  currParent = currParent || null;
  currParentProperty = currParentProperty || null;
  if (Array.isArray(expr)) {
    expr = JSONPath.toPathString(expr);
  }
  if (!expr && expr !== '' || !json) {
    return undefined;
  }
  const exprList = JSONPath.toPathArray(expr);
  if (exprList[0] === '$' && exprList.length > 1) {
    exprList.shift();
  }
  this._hasParentSelector = null;
  const result = this._trace(exprList, json, ['$'], currParent, currParentProperty, callback).filter(function (ea) {
    return ea && !ea.isParentSelector;
  });
  if (!result.length) {
    return wrap ? [] : undefined;
  }
  if (!wrap && result.length === 1 && !result[0].hasArrExpr) {
    return this._getPreferredOutput(result[0]);
  }
  return result.reduce((rslt, ea) => {
    const valOrPath = this._getPreferredOutput(ea);
    if (flatten && Array.isArray(valOrPath)) {
      rslt = rslt.concat(valOrPath);
    } else {
      rslt.push(valOrPath);
    }
    return rslt;
  }, []);
};

// PRIVATE METHODS

JSONPath.prototype._getPreferredOutput = function (ea) {
  const resultType = this.currResultType;
  switch (resultType) {
    case 'all':
      {
        const path = Array.isArray(ea.path) ? ea.path : JSONPath.toPathArray(ea.path);
        ea.pointer = JSONPath.toPointer(path);
        ea.path = typeof ea.path === 'string' ? ea.path : JSONPath.toPathString(ea.path);
        return ea;
      }
    case 'value':
    case 'parent':
    case 'parentProperty':
      return ea[resultType];
    case 'path':
      return JSONPath.toPathString(ea[resultType]);
    case 'pointer':
      return JSONPath.toPointer(ea.path);
    default:
      throw new TypeError('Unknown result type');
  }
};
JSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {
  if (callback) {
    const preferredOutput = this._getPreferredOutput(fullRetObj);
    fullRetObj.path = typeof fullRetObj.path === 'string' ? fullRetObj.path : JSONPath.toPathString(fullRetObj.path);
    // eslint-disable-next-line n/callback-return -- No need to return
    callback(preferredOutput, type, fullRetObj);
  }
};

/**
 *
 * @param {string} expr
 * @param {JSONObject} val
 * @param {string} path
 * @param {object|GenericArray} parent
 * @param {string} parentPropName
 * @param {JSONPathCallback} callback
 * @param {boolean} hasArrExpr
 * @param {boolean} literalPriority
 * @returns {ReturnObject|ReturnObject[]}
 */
JSONPath.prototype._trace = function (expr, val, path, parent, parentPropName, callback, hasArrExpr, literalPriority) {
  // No expr to follow? return path and value as the result of
  //  this trace branch
  let retObj;
  if (!expr.length) {
    retObj = {
      path,
      value: val,
      parent,
      parentProperty: parentPropName,
      hasArrExpr
    };
    this._handleCallback(retObj, callback, 'value');
    return retObj;
  }
  const loc = expr[0],
    x = expr.slice(1);

  // We need to gather the return value of recursive trace calls in order to
  // do the parent sel computation.
  const ret = [];
  /**
   *
   * @param {ReturnObject|ReturnObject[]} elems
   * @returns {void}
   */
  function addRet(elems) {
    if (Array.isArray(elems)) {
      // This was causing excessive stack size in Node (with or
      //  without Babel) against our performance test:
      //  `ret.push(...elems);`
      elems.forEach(t => {
        ret.push(t);
      });
    } else {
      ret.push(elems);
    }
  }
  if ((typeof loc !== 'string' || literalPriority) && val && Object.hasOwn(val, loc)) {
    // simple case--directly follow property
    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr));
    // eslint-disable-next-line unicorn/prefer-switch -- Part of larger `if`
  } else if (loc === '*') {
    // all child properties
    this._walk(val, m => {
      addRet(this._trace(x, val[m], push(path, m), val, m, callback, true, true));
    });
  } else if (loc === '..') {
    // all descendent parent properties
    // Check remaining expression with val's immediate children
    addRet(this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr));
    this._walk(val, m => {
      // We don't join m and x here because we only want parents,
      //   not scalar values
      if (typeof val[m] === 'object') {
        // Keep going with recursive descent on val's
        //   object children
        addRet(this._trace(expr.slice(), val[m], push(path, m), val, m, callback, true));
      }
    });
    // The parent sel computation is handled in the frame above using the
    // ancestor object of val
  } else if (loc === '^') {
    // This is not a final endpoint, so we do not invoke the callback here
    this._hasParentSelector = true;
    return {
      path: path.slice(0, -1),
      expr: x,
      isParentSelector: true
    };
  } else if (loc === '~') {
    // property name
    retObj = {
      path: push(path, loc),
      value: parentPropName,
      parent,
      parentProperty: null
    };
    this._handleCallback(retObj, callback, 'property');
    return retObj;
  } else if (loc === '$') {
    // root only
    addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));
  } else if (/^(-?\d*):(-?\d*):?(\d*)$/u.test(loc)) {
    // [start:end:step]  Python slice syntax
    addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));
  } else if (loc.indexOf('?(') === 0) {
    // [?(expr)] (filtering)
    if (this.currEval === false) {
      throw new Error('Eval [?(expr)] prevented in JSONPath expression.');
    }
    const safeLoc = loc.replace(/^\?\((.*?)\)$/u, '$1');
    // check for a nested filter expression
    const nested = /@.?([^?]*)[['](\??\(.*?\))(?!.\)\])[\]']/gu.exec(safeLoc);
    if (nested) {
      // find if there are matches in the nested expression
      // add them to the result set if there is at least one match
      this._walk(val, m => {
        const npath = [nested[2]];
        const nvalue = nested[1] ? val[m][nested[1]] : val[m];
        const filterResults = this._trace(npath, nvalue, path, parent, parentPropName, callback, true);
        if (filterResults.length > 0) {
          addRet(this._trace(x, val[m], push(path, m), val, m, callback, true));
        }
      });
    } else {
      this._walk(val, m => {
        if (this._eval(safeLoc, val[m], m, path, parent, parentPropName)) {
          addRet(this._trace(x, val[m], push(path, m), val, m, callback, true));
        }
      });
    }
  } else if (loc[0] === '(') {
    // [(expr)] (dynamic property/index)
    if (this.currEval === false) {
      throw new Error('Eval [(expr)] prevented in JSONPath expression.');
    }
    // As this will resolve to a property name (but we don't know it
    //  yet), property and parent information is relative to the
    //  parent of the property to which this expression will resolve
    addRet(this._trace(unshift(this._eval(loc, val, path.at(-1), path.slice(0, -1), parent, parentPropName), x), val, path, parent, parentPropName, callback, hasArrExpr));
  } else if (loc[0] === '@') {
    // value type: @boolean(), etc.
    let addType = false;
    const valueType = loc.slice(1, -2);
    switch (valueType) {
      case 'scalar':
        if (!val || !['object', 'function'].includes(typeof val)) {
          addType = true;
        }
        break;
      case 'boolean':
      case 'string':
      case 'undefined':
      case 'function':
        if (typeof val === valueType) {
          addType = true;
        }
        break;
      case 'integer':
        if (Number.isFinite(val) && !(val % 1)) {
          addType = true;
        }
        break;
      case 'number':
        if (Number.isFinite(val)) {
          addType = true;
        }
        break;
      case 'nonFinite':
        if (typeof val === 'number' && !Number.isFinite(val)) {
          addType = true;
        }
        break;
      case 'object':
        if (val && typeof val === valueType) {
          addType = true;
        }
        break;
      case 'array':
        if (Array.isArray(val)) {
          addType = true;
        }
        break;
      case 'other':
        addType = this.currOtherTypeCallback(val, path, parent, parentPropName);
        break;
      case 'null':
        if (val === null) {
          addType = true;
        }
        break;
      /* c8 ignore next 2 */
      default:
        throw new TypeError('Unknown value type ' + valueType);
    }
    if (addType) {
      retObj = {
        path,
        value: val,
        parent,
        parentProperty: parentPropName
      };
      this._handleCallback(retObj, callback, 'value');
      return retObj;
    }
    // `-escaped property
  } else if (loc[0] === '`' && val && Object.hasOwn(val, loc.slice(1))) {
    const locProp = loc.slice(1);
    addRet(this._trace(x, val[locProp], push(path, locProp), val, locProp, callback, hasArrExpr, true));
  } else if (loc.includes(',')) {
    // [name1,name2,...]
    const parts = loc.split(',');
    for (const part of parts) {
      addRet(this._trace(unshift(part, x), val, path, parent, parentPropName, callback, true));
    }
    // simple case--directly follow property
  } else if (!literalPriority && val && Object.hasOwn(val, loc)) {
    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr, true));
  }

  // We check the resulting values for parent selections. For parent
  // selections we discard the value object and continue the trace with the
  // current val object
  if (this._hasParentSelector) {
    for (let t = 0; t < ret.length; t++) {
      const rett = ret[t];
      if (rett && rett.isParentSelector) {
        const tmp = this._trace(rett.expr, val, rett.path, parent, parentPropName, callback, hasArrExpr);
        if (Array.isArray(tmp)) {
          ret[t] = tmp[0];
          const tl = tmp.length;
          for (let tt = 1; tt < tl; tt++) {
            // eslint-disable-next-line @stylistic/max-len -- Long
            // eslint-disable-next-line sonarjs/updated-loop-counter -- Convenient
            t++;
            ret.splice(t, 0, tmp[tt]);
          }
        } else {
          ret[t] = tmp;
        }
      }
    }
  }
  return ret;
};
JSONPath.prototype._walk = function (val, f) {
  if (Array.isArray(val)) {
    const n = val.length;
    for (let i = 0; i < n; i++) {
      f(i);
    }
  } else if (val && typeof val === 'object') {
    Object.keys(val).forEach(m => {
      f(m);
    });
  }
};
JSONPath.prototype._slice = function (loc, expr, val, path, parent, parentPropName, callback) {
  if (!Array.isArray(val)) {
    return undefined;
  }
  const len = val.length,
    parts = loc.split(':'),
    step = parts[2] && Number.parseInt(parts[2]) || 1;
  let start = parts[0] && Number.parseInt(parts[0]) || 0,
    end = parts[1] && Number.parseInt(parts[1]) || len;
  start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);
  end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);
  const ret = [];
  for (let i = start; i < end; i += step) {
    const tmp = this._trace(unshift(i, expr), val, path, parent, parentPropName, callback, true);
    // Should only be possible to be an array here since first part of
    //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,
    //     nor begin with `@` (as could return objects)
    // This was causing excessive stack size in Node (with or
    //  without Babel) against our performance test: `ret.push(...tmp);`
    tmp.forEach(t => {
      ret.push(t);
    });
  }
  return ret;
};
JSONPath.prototype._eval = function (code, _v, _vname, path, parent, parentPropName) {
  this.currSandbox._$_parentProperty = parentPropName;
  this.currSandbox._$_parent = parent;
  this.currSandbox._$_property = _vname;
  this.currSandbox._$_root = this.json;
  this.currSandbox._$_v = _v;
  const containsPath = code.includes('@path');
  if (containsPath) {
    this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));
  }
  const scriptCacheKey = this.currEval + 'Script:' + code;
  if (!JSONPath.cache[scriptCacheKey]) {
    let script = code.replaceAll('@parentProperty', '_$_parentProperty').replaceAll('@parent', '_$_parent').replaceAll('@property', '_$_property').replaceAll('@root', '_$_root').replaceAll(/@([.\s)[])/gu, '_$_v$1');
    if (containsPath) {
      script = script.replaceAll('@path', '_$_path');
    }
    if (this.currEval === 'safe' || this.currEval === true || this.currEval === undefined) {
      JSONPath.cache[scriptCacheKey] = new this.safeVm.Script(script);
    } else if (this.currEval === 'native') {
      JSONPath.cache[scriptCacheKey] = new this.vm.Script(script);
    } else if (typeof this.currEval === 'function' && this.currEval.prototype && Object.hasOwn(this.currEval.prototype, 'runInNewContext')) {
      const CurrEval = this.currEval;
      JSONPath.cache[scriptCacheKey] = new CurrEval(script);
    } else if (typeof this.currEval === 'function') {
      JSONPath.cache[scriptCacheKey] = {
        runInNewContext: context => this.currEval(script, context)
      };
    } else {
      throw new TypeError(`Unknown "eval" property "${this.currEval}"`);
    }
  }
  try {
    return JSONPath.cache[scriptCacheKey].runInNewContext(this.currSandbox);
  } catch (e) {
    if (this.ignoreEvalErrors) {
      return false;
    }
    throw new Error('jsonPath: ' + e.message + ': ' + code);
  }
};

// PUBLIC CLASS PROPERTIES AND METHODS

// Could store the cache object itself
JSONPath.cache = {};

/**
 * @param {string[]} pathArr Array to convert
 * @returns {string} The path string
 */
JSONPath.toPathString = function (pathArr) {
  const x = pathArr,
    n = x.length;
  let p = '$';
  for (let i = 1; i < n; i++) {
    if (!/^(~|\^|@.*?\(\))$/u.test(x[i])) {
      p += /^[0-9*]+$/u.test(x[i]) ? '[' + x[i] + ']' : "['" + x[i] + "']";
    }
  }
  return p;
};

/**
 * @param {string} pointer JSON Path
 * @returns {string} JSON Pointer
 */
JSONPath.toPointer = function (pointer) {
  const x = pointer,
    n = x.length;
  let p = '';
  for (let i = 1; i < n; i++) {
    if (!/^(~|\^|@.*?\(\))$/u.test(x[i])) {
      p += '/' + x[i].toString().replaceAll('~', '~0').replaceAll('/', '~1');
    }
  }
  return p;
};

/**
 * @param {string} expr Expression to convert
 * @returns {string[]}
 */
JSONPath.toPathArray = function (expr) {
  const {
    cache
  } = JSONPath;
  if (cache[expr]) {
    return cache[expr].concat();
  }
  const subx = [];
  const normalized = expr
  // Properties
  .replaceAll(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\(\)/gu, ';$&;')
  // Parenthetical evaluations (filtering and otherwise), directly
  //   within brackets or single quotes
  .replaceAll(/[['](\??\(.*?\))[\]'](?!.\])/gu, function ($0, $1) {
    return '[#' + (subx.push($1) - 1) + ']';
  })
  // Escape periods and tildes within properties
  .replaceAll(/\[['"]([^'\]]*)['"]\]/gu, function ($0, prop) {
    return "['" + prop.replaceAll('.', '%@%').replaceAll('~', '%%@@%%') + "']";
  })
  // Properties operator
  .replaceAll('~', ';~;')
  // Split by property boundaries
  .replaceAll(/['"]?\.['"]?(?![^[]*\])|\[['"]?/gu, ';')
  // Reinsert periods within properties
  .replaceAll('%@%', '.')
  // Reinsert tildes within properties
  .replaceAll('%%@@%%', '~')
  // Parent
  .replaceAll(/(?:;)?(\^+)(?:;)?/gu, function ($0, ups) {
    return ';' + ups.split('').join(';') + ';';
  })
  // Descendents
  .replaceAll(/;;;|;;/gu, ';..;')
  // Remove trailing
  .replaceAll(/;$|'?\]|'$/gu, '');
  const exprList = normalized.split(';').map(function (exp) {
    const match = exp.match(/#(\d+)/u);
    return !match || !match[1] ? exp : subx[match[1]];
  });
  cache[expr] = exprList;
  return cache[expr].concat();
};
JSONPath.prototype.safeVm = {
  Script: SafeScript
};

JSONPath.prototype.vm = vm;

exports.JSONPath = JSONPath;


/***/ }),
/* 355 */
/***/ ((module) => {

"use strict";
module.exports = require("vm");

/***/ }),
/* 356 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getJsonSchemaRefParserDefaultOptions = exports.jsonSchemaParserNormalizeArgs = exports.dereferenceInternal = exports.JSONParserErrorGroup = exports.isHandledError = exports.UnmatchedParserError = exports.ParserError = exports.ResolverError = exports.MissingPointerError = exports.InvalidPointerError = exports.JSONParserError = exports.UnmatchedResolverError = exports.dereference = exports.bundle = exports.resolve = exports.parse = exports.$RefParser = void 0;
const refs_js_1 = __importDefault(__webpack_require__(357));
const parse_js_1 = __importDefault(__webpack_require__(373));
const normalize_args_js_1 = __importDefault(__webpack_require__(375));
exports.jsonSchemaParserNormalizeArgs = normalize_args_js_1.default;
const resolve_external_js_1 = __importDefault(__webpack_require__(408));
const bundle_js_1 = __importDefault(__webpack_require__(409));
const dereference_js_1 = __importDefault(__webpack_require__(410));
exports.dereferenceInternal = dereference_js_1.default;
const url = __importStar(__webpack_require__(369));
const errors_js_1 = __webpack_require__(372);
Object.defineProperty(exports, "JSONParserError", ({ enumerable: true, get: function () { return errors_js_1.JSONParserError; } }));
Object.defineProperty(exports, "InvalidPointerError", ({ enumerable: true, get: function () { return errors_js_1.InvalidPointerError; } }));
Object.defineProperty(exports, "MissingPointerError", ({ enumerable: true, get: function () { return errors_js_1.MissingPointerError; } }));
Object.defineProperty(exports, "ResolverError", ({ enumerable: true, get: function () { return errors_js_1.ResolverError; } }));
Object.defineProperty(exports, "ParserError", ({ enumerable: true, get: function () { return errors_js_1.ParserError; } }));
Object.defineProperty(exports, "UnmatchedParserError", ({ enumerable: true, get: function () { return errors_js_1.UnmatchedParserError; } }));
Object.defineProperty(exports, "UnmatchedResolverError", ({ enumerable: true, get: function () { return errors_js_1.UnmatchedResolverError; } }));
Object.defineProperty(exports, "isHandledError", ({ enumerable: true, get: function () { return errors_js_1.isHandledError; } }));
Object.defineProperty(exports, "JSONParserErrorGroup", ({ enumerable: true, get: function () { return errors_js_1.JSONParserErrorGroup; } }));
const ono_1 = __webpack_require__(358);
const maybe_js_1 = __importDefault(__webpack_require__(411));
const options_js_1 = __webpack_require__(376);
Object.defineProperty(exports, "getJsonSchemaRefParserDefaultOptions", ({ enumerable: true, get: function () { return options_js_1.getJsonSchemaRefParserDefaultOptions; } }));
/**
 * This class parses a JSON schema, builds a map of its JSON references and their resolved values,
 * and provides methods for traversing, manipulating, and dereferencing those references.
 *
 * @class
 */
class $RefParser {
    constructor() {
        /**
         * The parsed (and possibly dereferenced) JSON schema object
         *
         * @type {object}
         * @readonly
         */
        this.schema = null;
        /**
         * The resolved JSON references
         *
         * @type {$Refs}
         * @readonly
         */
        this.$refs = new refs_js_1.default();
    }
    async parse() {
        const args = (0, normalize_args_js_1.default)(arguments);
        let promise;
        if (!args.path && !args.schema) {
            const err = (0, ono_1.ono)(`Expected a file path, URL, or object. Got ${args.path || args.schema}`);
            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));
        }
        // Reset everything
        this.schema = null;
        this.$refs = new refs_js_1.default();
        // If the path is a filesystem path, then convert it to a URL.
        // NOTE: According to the JSON Reference spec, these should already be URLs,
        // but, in practice, many people use local filesystem paths instead.
        // So we're being generous here and doing the conversion automatically.
        // This is not intended to be a 100% bulletproof solution.
        // If it doesn't work for your use-case, then use a URL instead.
        let pathType = "http";
        if (url.isFileSystemPath(args.path)) {
            args.path = url.fromFileSystemPath(args.path);
            pathType = "file";
        }
        else if (!args.path && args.schema && "$id" in args.schema && args.schema.$id) {
            // when schema id has defined an URL should use that hostname to request the references,
            // instead of using the current page URL
            const params = url.parse(args.schema.$id);
            const port = params.protocol === "https:" ? 443 : 80;
            args.path = `${params.protocol}//${params.hostname}:${port}`;
        }
        // Resolve the absolute path of the schema
        args.path = url.resolve(url.cwd(), args.path);
        if (args.schema && typeof args.schema === "object") {
            // A schema object was passed-in.
            // So immediately add a new $Ref with the schema object as its value
            const $ref = this.$refs._add(args.path);
            $ref.value = args.schema;
            $ref.pathType = pathType;
            promise = Promise.resolve(args.schema);
        }
        else {
            // Parse the schema file/url
            promise = (0, parse_js_1.default)(args.path, this.$refs, args.options);
        }
        try {
            const result = await promise;
            if (result !== null && typeof result === "object" && !Buffer.isBuffer(result)) {
                this.schema = result;
                return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));
            }
            else if (args.options.continueOnError) {
                this.schema = null; // it's already set to null at line 79, but let's set it again for the sake of readability
                return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));
            }
            else {
                throw ono_1.ono.syntax(`"${this.$refs._root$Ref.path || result}" is not a valid JSON Schema`);
            }
        }
        catch (err) {
            if (!args.options.continueOnError || !(0, errors_js_1.isHandledError)(err)) {
                return (0, maybe_js_1.default)(args.callback, Promise.reject(err));
            }
            if (this.$refs._$refs[url.stripHash(args.path)]) {
                this.$refs._$refs[url.stripHash(args.path)].addError(err);
            }
            return (0, maybe_js_1.default)(args.callback, Promise.resolve(null));
        }
    }
    static parse() {
        const parser = new $RefParser();
        return parser.parse.apply(parser, arguments);
    }
    async resolve() {
        const args = (0, normalize_args_js_1.default)(arguments);
        try {
            await this.parse(args.path, args.schema, args.options);
            await (0, resolve_external_js_1.default)(this, args.options);
            finalize(this);
            return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.$refs));
        }
        catch (err) {
            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));
        }
    }
    static resolve() {
        const instance = new $RefParser();
        return instance.resolve.apply(instance, arguments);
    }
    static bundle() {
        const instance = new $RefParser();
        return instance.bundle.apply(instance, arguments);
    }
    async bundle() {
        const args = (0, normalize_args_js_1.default)(arguments);
        try {
            await this.resolve(args.path, args.schema, args.options);
            (0, bundle_js_1.default)(this, args.options);
            finalize(this);
            return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));
        }
        catch (err) {
            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));
        }
    }
    static dereference() {
        const instance = new $RefParser();
        return instance.dereference.apply(instance, arguments);
    }
    async dereference() {
        const args = (0, normalize_args_js_1.default)(arguments);
        try {
            await this.resolve(args.path, args.schema, args.options);
            (0, dereference_js_1.default)(this, args.options);
            finalize(this);
            return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));
        }
        catch (err) {
            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));
        }
    }
}
exports.$RefParser = $RefParser;
exports["default"] = $RefParser;
function finalize(parser) {
    const errors = errors_js_1.JSONParserErrorGroup.getParserErrors(parser);
    if (errors.length > 0) {
        throw new errors_js_1.JSONParserErrorGroup(parser);
    }
}
exports.parse = $RefParser.parse;
exports.resolve = $RefParser.resolve;
exports.bundle = $RefParser.bundle;
exports.dereference = $RefParser.dereference;


/***/ }),
/* 357 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ono_1 = __webpack_require__(358);
const ref_js_1 = __importDefault(__webpack_require__(367));
const url = __importStar(__webpack_require__(369));
const convert_path_to_posix_1 = __importDefault(__webpack_require__(370));
/**
 * When you call the resolve method, the value that gets passed to the callback function (or Promise) is a $Refs object. This same object is accessible via the parser.$refs property of $RefParser objects.
 *
 * This object is a map of JSON References and their resolved values. It also has several convenient helper methods that make it easy for you to navigate and manipulate the JSON References.
 *
 * See https://apitools.dev/json-schema-ref-parser/docs/refs.html
 */
class $Refs {
    /**
     * Returns the paths/URLs of all the files in your schema (including the main schema file).
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/refs.html#pathstypes
     *
     * @param types (optional) Optionally only return certain types of paths ("file", "http", etc.)
     */
    paths(...types) {
        const paths = getPaths(this._$refs, types.flat());
        return paths.map((path) => {
            return (0, convert_path_to_posix_1.default)(path.decoded);
        });
    }
    /**
     * Returns a map of paths/URLs and their correspond values.
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/refs.html#valuestypes
     *
     * @param types (optional) Optionally only return values from certain locations ("file", "http", etc.)
     */
    values(...types) {
        const $refs = this._$refs;
        const paths = getPaths($refs, types.flat());
        return paths.reduce((obj, path) => {
            obj[(0, convert_path_to_posix_1.default)(path.decoded)] = $refs[path.encoded].value;
            return obj;
        }, {});
    }
    /**
     * Returns `true` if the given path exists in the schema; otherwise, returns `false`
     *
     * See https://apitools.dev/json-schema-ref-parser/docs/refs.html#existsref
     *
     * @param $ref The JSON Reference path, optionally with a JSON Pointer in the hash
     */
    /**
     * Determines whether the given JSON reference exists.
     *
     * @param path - The path being resolved, optionally with a JSON pointer in the hash
     * @param [options]
     * @returns
     */
    exists(path, options) {
        try {
            this._resolve(path, "", options);
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Resolves the given JSON reference and returns the resolved value.
     *
     * @param path - The path being resolved, with a JSON pointer in the hash
     * @param [options]
     * @returns - Returns the resolved value
     */
    get(path, options) {
        return this._resolve(path, "", options).value;
    }
    /**
     * Sets the value at the given path in the schema. If the property, or any of its parents, don't exist, they will be created.
     *
     * @param path The JSON Reference path, optionally with a JSON Pointer in the hash
     * @param value The value to assign. Can be anything (object, string, number, etc.)
     */
    set(path, value) {
        const absPath = url.resolve(this._root$Ref.path, path);
        const withoutHash = url.stripHash(absPath);
        const $ref = this._$refs[withoutHash];
        if (!$ref) {
            throw (0, ono_1.ono)(`Error resolving $ref pointer "${path}". \n"${withoutHash}" not found.`);
        }
        $ref.set(absPath, value);
    }
    /**
     * Returns the specified {@link $Ref} object, or undefined.
     *
     * @param path - The path being resolved, optionally with a JSON pointer in the hash
     * @returns
     * @protected
     */
    _get$Ref(path) {
        path = url.resolve(this._root$Ref.path, path);
        const withoutHash = url.stripHash(path);
        return this._$refs[withoutHash];
    }
    /**
     * Creates a new {@link $Ref} object and adds it to this {@link $Refs} object.
     *
     * @param path  - The file path or URL of the referenced file
     */
    _add(path) {
        const withoutHash = url.stripHash(path);
        const $ref = new ref_js_1.default(this);
        $ref.path = withoutHash;
        this._$refs[withoutHash] = $ref;
        this._root$Ref = this._root$Ref || $ref;
        return $ref;
    }
    /**
     * Resolves the given JSON reference.
     *
     * @param path - The path being resolved, optionally with a JSON pointer in the hash
     * @param pathFromRoot - The path of `obj` from the schema root
     * @param [options]
     * @returns
     * @protected
     */
    _resolve(path, pathFromRoot, options) {
        const absPath = url.resolve(this._root$Ref.path, path);
        const withoutHash = url.stripHash(absPath);
        const $ref = this._$refs[withoutHash];
        if (!$ref) {
            throw (0, ono_1.ono)(`Error resolving $ref pointer "${path}". \n"${withoutHash}" not found.`);
        }
        return $ref.resolve(absPath, options, path, pathFromRoot);
    }
    constructor() {
        /**
         * A map of paths/urls to {@link $Ref} objects
         *
         * @type {object}
         * @protected
         */
        this._$refs = {};
        /**
         * Returns the paths of all the files/URLs that are referenced by the JSON schema,
         * including the schema itself.
         *
         * @param [types] - Only return paths of the given types ("file", "http", etc.)
         * @returns
         */
        /**
         * Returns the map of JSON references and their resolved values.
         *
         * @param [types] - Only return references of the given types ("file", "http", etc.)
         * @returns
         */
        /**
         * Returns a POJO (plain old JavaScript object) for serialization as JSON.
         *
         * @returns {object}
         */
        this.toJSON = this.values;
        /**
         * Indicates whether the schema contains any circular references.
         *
         * @type {boolean}
         */
        this.circular = false;
        this._$refs = {};
        // @ts-ignore
        this._root$Ref = null;
    }
}
exports["default"] = $Refs;
/**
 * Returns the encoded and decoded paths keys of the given object.
 *
 * @param $refs - The object whose keys are URL-encoded paths
 * @param [types] - Only return paths of the given types ("file", "http", etc.)
 * @returns
 */
function getPaths($refs, types) {
    let paths = Object.keys($refs);
    // Filter the paths by type
    types = Array.isArray(types[0]) ? types[0] : Array.prototype.slice.call(types);
    if (types.length > 0 && types[0]) {
        paths = paths.filter((key) => {
            return types.includes($refs[key].pathType);
        });
    }
    // Decode local filesystem paths
    return paths.map((path) => {
        return {
            encoded: path,
            decoded: $refs[path].pathType === "file" ? url.toFileSystemPath(path, true) : path,
        };
    });
}


/***/ }),
/* 358 */
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ono: () => (/* reexport safe */ _constructor__WEBPACK_IMPORTED_MODULE_1__.Ono),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   ono: () => (/* reexport safe */ _singleton__WEBPACK_IMPORTED_MODULE_0__.ono)
/* harmony export */ });
/* harmony import */ var _singleton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(359);
/* harmony import */ var _constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(360);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(366);
/* module decorator */ module = __webpack_require__.hmd(module);
/* eslint-env commonjs */




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_singleton__WEBPACK_IMPORTED_MODULE_0__.ono);
// CommonJS default export hack
if ( true && typeof module.exports === "object") {
    module.exports = Object.assign(module.exports.default, module.exports);
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 359 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ono: () => (/* binding */ singleton)
/* harmony export */ });
/* harmony import */ var _constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(360);

const singleton = ono;

ono.error = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(Error);
ono.eval = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(EvalError);
ono.range = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(RangeError);
ono.reference = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(ReferenceError);
ono.syntax = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(SyntaxError);
ono.type = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(TypeError);
ono.uri = new _constructor__WEBPACK_IMPORTED_MODULE_0__.Ono(URIError);
const onoMap = ono;
/**
 * Creates a new error with the specified message, properties, and/or inner error.
 * If an inner error is provided, then the new error will match its type, if possible.
 */
function ono(...args) {
    let originalError = args[0];
    // Is the first argument an Error-like object?
    if (typeof originalError === "object" && typeof originalError.name === "string") {
        // Try to find an Ono singleton method that matches this error type
        for (let typedOno of Object.values(onoMap)) {
            if (typeof typedOno === "function" && typedOno.name === "ono") {
                let species = typedOno[Symbol.species];
                if (species && species !== Error && (originalError instanceof species || originalError.name === species.name)) {
                    // Create an error of the same type
                    return typedOno.apply(undefined, args);
                }
            }
        }
    }
    // By default, create a base Error object
    return ono.error.apply(undefined, args);
}
//# sourceMappingURL=singleton.js.map

/***/ }),
/* 360 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ono: () => (/* binding */ constructor)
/* harmony export */ });
/* harmony import */ var _extend_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(361);
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(365);
/* harmony import */ var _to_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(363);



const constructor = Ono;

/**
 * Creates an `Ono` instance for a specifc error type.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function Ono(ErrorConstructor, options) {
    options = (0,_normalize__WEBPACK_IMPORTED_MODULE_1__.normalizeOptions)(options);
    function ono(...args) {
        let { originalError, props, message } = (0,_normalize__WEBPACK_IMPORTED_MODULE_1__.normalizeArgs)(args, options);
        // Create a new error of the specified type
        let newError = new ErrorConstructor(message);
        // Extend the error with the properties of the original error and the `props` object
        return (0,_extend_error__WEBPACK_IMPORTED_MODULE_0__.extendError)(newError, originalError, props);
    }
    ono[Symbol.species] = ErrorConstructor;
    return ono;
}
/**
 * Returns an object containing all properties of the given Error object,
 * which can be used with `JSON.stringify()`.
 */
Ono.toJSON = function toJSON(error) {
    return _to_json__WEBPACK_IMPORTED_MODULE_2__.toJSON.call(error);
};
/**
 * Extends the given Error object with enhanced Ono functionality, such as nested stack traces,
 * additional properties, and improved support for `JSON.stringify()`.
 */
Ono.extend = function extend(error, originalError, props) {
    if (props || originalError instanceof Error) {
        return (0,_extend_error__WEBPACK_IMPORTED_MODULE_0__.extendError)(error, originalError, props);
    }
    else if (originalError) {
        return (0,_extend_error__WEBPACK_IMPORTED_MODULE_0__.extendError)(error, undefined, originalError);
    }
    else {
        return (0,_extend_error__WEBPACK_IMPORTED_MODULE_0__.extendError)(error);
    }
};
//# sourceMappingURL=constructor.js.map

/***/ }),
/* 361 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extendError: () => (/* binding */ extendError)
/* harmony export */ });
/* harmony import */ var _isomorphic_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(362);
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(364);
/* harmony import */ var _to_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(363);



const protectedProps = ["name", "message", "stack"];
/**
 * Extends the new error with the properties of the original error and the `props` object.
 *
 * @param newError - The error object to extend
 * @param originalError - The original error object, if any
 * @param props - Additional properties to add, if any
 */
function extendError(error, originalError, props) {
    let onoError = error;
    extendStack(onoError, originalError);
    // Copy properties from the original error
    if (originalError && typeof originalError === "object") {
        mergeErrors(onoError, originalError);
    }
    // The default `toJSON` method doesn't output props like `name`, `message`, `stack`, etc.
    // So replace it with one that outputs every property of the error.
    onoError.toJSON = _to_json__WEBPACK_IMPORTED_MODULE_2__.toJSON;
    // On Node.js, add support for the `util.inspect()` method
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (_isomorphic_node__WEBPACK_IMPORTED_MODULE_0__.addInspectMethod) {
        (0,_isomorphic_node__WEBPACK_IMPORTED_MODULE_0__.addInspectMethod)(onoError);
    }
    // Finally, copy custom properties that were specified by the user.
    // These props OVERWRITE any previous props
    if (props && typeof props === "object") {
        Object.assign(onoError, props);
    }
    return onoError;
}
/**
 * Extend the error stack to include its cause
 */
function extendStack(newError, originalError) {
    let stackProp = Object.getOwnPropertyDescriptor(newError, "stack");
    if ((0,_stack__WEBPACK_IMPORTED_MODULE_1__.isLazyStack)(stackProp)) {
        (0,_stack__WEBPACK_IMPORTED_MODULE_1__.lazyJoinStacks)(stackProp, newError, originalError);
    }
    else if ((0,_stack__WEBPACK_IMPORTED_MODULE_1__.isWritableStack)(stackProp)) {
        newError.stack = (0,_stack__WEBPACK_IMPORTED_MODULE_1__.joinStacks)(newError, originalError);
    }
}
/**
 * Merges properties of the original error with the new error.
 *
 * @param newError - The error object to extend
 * @param originalError - The original error object, if any
 */
function mergeErrors(newError, originalError) {
    // Get the original error's keys
    // NOTE: We specifically exclude properties that we have already set on the new error.
    // This is _especially_ important for the `stack` property, because this property has
    // a lazy getter in some environments
    let keys = (0,_to_json__WEBPACK_IMPORTED_MODULE_2__.getDeepKeys)(originalError, protectedProps);
    // HACK: We have to cast the errors to `any` so we can use symbol indexers.
    // see https://github.com/Microsoft/TypeScript/issues/1863
    let _newError = newError;
    let _originalError = originalError;
    for (let key of keys) {
        if (_newError[key] === undefined) {
            try {
                _newError[key] = _originalError[key];
            }
            catch (e) {
                // This property is read-only, so it can't be copied
            }
        }
    }
}
//# sourceMappingURL=extend-error.js.map

/***/ }),
/* 362 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addInspectMethod: () => (/* binding */ addInspectMethod),
/* harmony export */   format: () => (/* binding */ format)
/* harmony export */ });
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(222);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _to_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(363);


// The `inspect()` method is actually a Symbol, not a string key.
// https://nodejs.org/api/util.html#util_util_inspect_custom
const inspectMethod = util__WEBPACK_IMPORTED_MODULE_0__.inspect.custom || Symbol.for("nodejs.util.inspect.custom");
/**
 * Ono supports Node's `util.format()` formatting for error messages.
 *
 * @see https://nodejs.org/api/util.html#util_util_format_format_args
 */
const format = util__WEBPACK_IMPORTED_MODULE_0__.format;
/**
 * Adds an `inspect()` method to support Node's `util.inspect()` function.
 *
 * @see https://nodejs.org/api/util.html#util_util_inspect_custom
 */
function addInspectMethod(newError) {
    // @ts-expect-error - TypeScript doesn't support symbol indexers
    newError[inspectMethod] = inspect;
}
/**
 * Returns a representation of the error for Node's `util.inspect()` method.
 *
 * @see https://nodejs.org/api/util.html#util_custom_inspection_functions_on_objects
 */
function inspect() {
    // HACK: We have to cast the objects to `any` so we can use symbol indexers.
    // see https://github.com/Microsoft/TypeScript/issues/1863
    let pojo = {};
    let error = this;
    for (let key of (0,_to_json__WEBPACK_IMPORTED_MODULE_1__.getDeepKeys)(error)) {
        let value = error[key];
        pojo[key] = value;
    }
    // Don't include the `inspect()` method on the output object,
    // otherwise it will cause `util.inspect()` to go into an infinite loop
    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
    delete pojo[inspectMethod];
    return pojo;
}
//# sourceMappingURL=isomorphic.node.js.map

/***/ }),
/* 363 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDeepKeys: () => (/* binding */ getDeepKeys),
/* harmony export */   toJSON: () => (/* binding */ toJSON)
/* harmony export */ });
const nonJsonTypes = ["function", "symbol", "undefined"];
const protectedProps = ["constructor", "prototype", "__proto__"];
const objectPrototype = Object.getPrototypeOf({});
/**
 * Custom JSON serializer for Error objects.
 * Returns all built-in error properties, as well as extended properties.
 */
function toJSON() {
    // HACK: We have to cast the objects to `any` so we can use symbol indexers.
    // see https://github.com/Microsoft/TypeScript/issues/1863
    let pojo = {};
    let error = this;
    for (let key of getDeepKeys(error)) {
        if (typeof key === "string") {
            let value = error[key];
            let type = typeof value;
            if (!nonJsonTypes.includes(type)) {
                pojo[key] = value;
            }
        }
    }
    return pojo;
}
/**
 * Returns own, inherited, enumerable, non-enumerable, string, and symbol keys of `obj`.
 * Does NOT return members of the base Object prototype, or the specified omitted keys.
 */
function getDeepKeys(obj, omit = []) {
    let keys = [];
    // Crawl the prototype chain, finding all the string and symbol keys
    while (obj && obj !== objectPrototype) {
        keys = keys.concat(Object.getOwnPropertyNames(obj), Object.getOwnPropertySymbols(obj));
        obj = Object.getPrototypeOf(obj);
    }
    // De-duplicate the list of keys
    let uniqueKeys = new Set(keys);
    // Remove any omitted keys
    for (let key of omit.concat(protectedProps)) {
        uniqueKeys.delete(key);
    }
    return uniqueKeys;
}
//# sourceMappingURL=to-json.js.map

/***/ }),
/* 364 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isLazyStack: () => (/* binding */ isLazyStack),
/* harmony export */   isWritableStack: () => (/* binding */ isWritableStack),
/* harmony export */   joinStacks: () => (/* binding */ joinStacks),
/* harmony export */   lazyJoinStacks: () => (/* binding */ lazyJoinStacks)
/* harmony export */ });
const newline = /\r?\n/;
const onoCall = /\bono[ @]/;
/**
 * Is the property lazily computed?
 */
function isLazyStack(stackProp) {
    return Boolean(stackProp &&
        stackProp.configurable &&
        typeof stackProp.get === "function");
}
/**
 * Is the stack property writable?
 */
function isWritableStack(stackProp) {
    return Boolean(
    // If there is no stack property, then it's writable, since assigning it will create it
    !stackProp ||
        stackProp.writable ||
        typeof stackProp.set === "function");
}
/**
 * Appends the original `Error.stack` property to the new Error's stack.
 */
function joinStacks(newError, originalError) {
    let newStack = popStack(newError.stack);
    let originalStack = originalError ? originalError.stack : undefined;
    if (newStack && originalStack) {
        return newStack + "\n\n" + originalStack;
    }
    else {
        return newStack || originalStack;
    }
}
/**
 * Calls `joinStacks` lazily, when the `Error.stack` property is accessed.
 */
function lazyJoinStacks(lazyStack, newError, originalError) {
    if (originalError) {
        Object.defineProperty(newError, "stack", {
            get: () => {
                let newStack = lazyStack.get.apply(newError);
                return joinStacks({ stack: newStack }, originalError);
            },
            enumerable: false,
            configurable: true
        });
    }
    else {
        lazyPopStack(newError, lazyStack);
    }
}
/**
 * Removes Ono from the stack, so that the stack starts at the original error location
 */
function popStack(stack) {
    if (stack) {
        let lines = stack.split(newline);
        // Find the Ono call(s) in the stack, and remove them
        let onoStart;
        for (let i = 0; i < lines.length; i++) {
            let line = lines[i];
            if (onoCall.test(line)) {
                if (onoStart === undefined) {
                    // We found the first Ono call in the stack trace.
                    // There may be other subsequent Ono calls as well.
                    onoStart = i;
                }
            }
            else if (onoStart !== undefined) {
                // We found the first non-Ono call after one or more Ono calls.
                // So remove the Ono call lines from the stack trace
                lines.splice(onoStart, i - onoStart);
                break;
            }
        }
        if (lines.length > 0) {
            return lines.join("\n");
        }
    }
    // If we get here, then the stack doesn't contain a call to `ono`.
    // This may be due to minification or some optimization of the JS engine.
    // So just return the stack as-is.
    return stack;
}
/**
 * Calls `popStack` lazily, when the `Error.stack` property is accessed.
 */
function lazyPopStack(error, lazyStack) {
    Object.defineProperty(error, "stack", {
        get: () => popStack(lazyStack.get.apply(error)),
        enumerable: false,
        configurable: true
    });
}
//# sourceMappingURL=stack.js.map

/***/ }),
/* 365 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeArgs: () => (/* binding */ normalizeArgs),
/* harmony export */   normalizeOptions: () => (/* binding */ normalizeOptions)
/* harmony export */ });
/* harmony import */ var _isomorphic_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(362);

/**
 * Normalizes Ono options, accounting for defaults and optional options.
 */
function normalizeOptions(options) {
    options = options || {};
    return {
        concatMessages: options.concatMessages === undefined ? true : Boolean(options.concatMessages),
        format: options.format === undefined ? _isomorphic_node__WEBPACK_IMPORTED_MODULE_0__.format
            : (typeof options.format === "function" ? options.format : false),
    };
}
/**
 * Normalizes the Ono arguments, accounting for defaults, options, and optional arguments.
 */
function normalizeArgs(args, options) {
    let originalError;
    let props;
    let formatArgs;
    let message = "";
    // Determine which arguments were actually specified
    if (typeof args[0] === "string") {
        formatArgs = args;
    }
    else if (typeof args[1] === "string") {
        if (args[0] instanceof Error) {
            originalError = args[0];
        }
        else {
            props = args[0];
        }
        formatArgs = args.slice(1);
    }
    else {
        originalError = args[0];
        props = args[1];
        formatArgs = args.slice(2);
    }
    // If there are any format arguments, then format the error message
    if (formatArgs.length > 0) {
        if (options.format) {
            message = options.format.apply(undefined, formatArgs);
        }
        else {
            message = formatArgs.join(" ");
        }
    }
    if (options.concatMessages && originalError && originalError.message) {
        // The inner-error's message will be added to the new message
        message += (message ? " \n" : "") + originalError.message;
    }
    return { originalError, props, message };
}
//# sourceMappingURL=normalize.js.map

/***/ }),
/* 366 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(222);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);

//# sourceMappingURL=types.js.map

/***/ }),
/* 367 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
const pointer_js_1 = __importStar(__webpack_require__(368));
const errors_js_1 = __webpack_require__(372);
const url_js_1 = __webpack_require__(369);
/**
 * This class represents a single JSON reference and its resolved value.
 *
 * @class
 */
class $Ref {
    constructor($refs) {
        /**
         * List of all errors. Undefined if no errors.
         */
        this.errors = [];
        this.$refs = $refs;
    }
    /**
     * Pushes an error to errors array.
     *
     * @param err - The error to be pushed
     * @returns
     */
    addError(err) {
        if (this.errors === undefined) {
            this.errors = [];
        }
        const existingErrors = this.errors.map(({ footprint }) => footprint);
        // the path has been almost certainly set at this point,
        // but just in case something went wrong, normalizeError injects path if necessary
        // moreover, certain errors might point at the same spot, so filter them out to reduce noise
        if ("errors" in err && Array.isArray(err.errors)) {
            this.errors.push(...err.errors.map(errors_js_1.normalizeError).filter(({ footprint }) => !existingErrors.includes(footprint)));
        }
        else if (!("footprint" in err) || !existingErrors.includes(err.footprint)) {
            this.errors.push((0, errors_js_1.normalizeError)(err));
        }
    }
    /**
     * Determines whether the given JSON reference exists within this {@link $Ref#value}.
     *
     * @param path - The full path being resolved, optionally with a JSON pointer in the hash
     * @param options
     * @returns
     */
    exists(path, options) {
        try {
            this.resolve(path, options);
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Resolves the given JSON reference within this {@link $Ref#value} and returns the resolved value.
     *
     * @param path - The full path being resolved, optionally with a JSON pointer in the hash
     * @param options
     * @returns - Returns the resolved value
     */
    get(path, options) {
        return this.resolve(path, options)?.value;
    }
    /**
     * Resolves the given JSON reference within this {@link $Ref#value}.
     *
     * @param path - The full path being resolved, optionally with a JSON pointer in the hash
     * @param options
     * @param friendlyPath - The original user-specified path (used for error messages)
     * @param pathFromRoot - The path of `obj` from the schema root
     * @returns
     */
    resolve(path, options, friendlyPath, pathFromRoot) {
        const pointer = new pointer_js_1.default(this, path, friendlyPath);
        try {
            const resolved = pointer.resolve(this.value, options, pathFromRoot);
            if (resolved.value === pointer_js_1.nullSymbol) {
                resolved.value = null;
            }
            return resolved;
        }
        catch (err) {
            if (!options || !options.continueOnError || !(0, errors_js_1.isHandledError)(err)) {
                throw err;
            }
            if (err.path === null) {
                err.path = (0, url_js_1.safePointerToPath)((0, url_js_1.getHash)(pathFromRoot));
            }
            if (err instanceof errors_js_1.InvalidPointerError) {
                err.source = decodeURI((0, url_js_1.stripHash)(pathFromRoot));
            }
            this.addError(err);
            return null;
        }
    }
    /**
     * Sets the value of a nested property within this {@link $Ref#value}.
     * If the property, or any of its parents don't exist, they will be created.
     *
     * @param path - The full path of the property to set, optionally with a JSON pointer in the hash
     * @param value - The value to assign
     */
    set(path, value) {
        const pointer = new pointer_js_1.default(this, path);
        this.value = pointer.set(this.value, value);
        if (this.value === pointer_js_1.nullSymbol) {
            this.value = null;
        }
    }
    /**
     * Determines whether the given value is a JSON reference.
     *
     * @param value - The value to inspect
     * @returns
     */
    static is$Ref(value) {
        return (Boolean(value) &&
            typeof value === "object" &&
            value !== null &&
            "$ref" in value &&
            typeof value.$ref === "string" &&
            value.$ref.length > 0);
    }
    /**
     * Determines whether the given value is an external JSON reference.
     *
     * @param value - The value to inspect
     * @returns
     */
    static isExternal$Ref(value) {
        return $Ref.is$Ref(value) && value.$ref[0] !== "#";
    }
    /**
     * Determines whether the given value is a JSON reference, and whether it is allowed by the options.
     * For example, if it references an external file, then options.resolve.external must be true.
     *
     * @param value - The value to inspect
     * @param options
     * @returns
     */
    static isAllowed$Ref(value, options) {
        if (this.is$Ref(value)) {
            if (value.$ref.substring(0, 2) === "#/" || value.$ref === "#") {
                // It's a JSON Pointer reference, which is always allowed
                return true;
            }
            else if (value.$ref[0] !== "#" && (!options || options.resolve?.external)) {
                // It's an external reference, which is allowed by the options
                return true;
            }
        }
        return undefined;
    }
    /**
     * Determines whether the given value is a JSON reference that "extends" its resolved value.
     * That is, it has extra properties (in addition to "$ref"), so rather than simply pointing to
     * an existing value, this $ref actually creates a NEW value that is a shallow copy of the resolved
     * value, plus the extra properties.
     *
     * @example: {
       person: {
         properties: {
           firstName: { type: string }
           lastName: { type: string }
         }
       }
       employee: {
         properties: {
           $ref: #/person/properties
           salary: { type: number }
         }
       }
     }
     *  In this example, "employee" is an extended $ref, since it extends "person" with an additional
     *  property (salary).  The result is a NEW value that looks like this:
     *
     *  {
     *    properties: {
     *      firstName: { type: string }
     *      lastName: { type: string }
     *      salary: { type: number }
     *    }
     *  }
     *
     * @param value - The value to inspect
     * @returns
     */
    static isExtended$Ref(value) {
        return $Ref.is$Ref(value) && Object.keys(value).length > 1;
    }
    /**
     * Returns the resolved value of a JSON Reference.
     * If necessary, the resolved value is merged with the JSON Reference to create a new object
     *
     * @example: {
    person: {
      properties: {
        firstName: { type: string }
        lastName: { type: string }
      }
    }
    employee: {
      properties: {
        $ref: #/person/properties
        salary: { type: number }
      }
    }
    } When "person" and "employee" are merged, you end up with the following object:
     *
     *  {
     *    properties: {
     *      firstName: { type: string }
     *      lastName: { type: string }
     *      salary: { type: number }
     *    }
     *  }
     *
     * @param $ref - The JSON reference object (the one with the "$ref" property)
     * @param resolvedValue - The resolved value, which can be any type
     * @returns - Returns the dereferenced value
     */
    static dereference($ref, resolvedValue) {
        if (resolvedValue && typeof resolvedValue === "object" && $Ref.isExtended$Ref($ref)) {
            const merged = {};
            for (const key of Object.keys($ref)) {
                if (key !== "$ref") {
                    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
                    merged[key] = $ref[key];
                }
            }
            for (const key of Object.keys(resolvedValue)) {
                if (!(key in merged)) {
                    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
                    merged[key] = resolvedValue[key];
                }
            }
            return merged;
        }
        else {
            // Completely replace the original reference with the resolved value
            return resolvedValue;
        }
    }
}
exports["default"] = $Ref;


/***/ }),
/* 368 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nullSymbol = void 0;
const ref_js_1 = __importDefault(__webpack_require__(367));
const url = __importStar(__webpack_require__(369));
const errors_js_1 = __webpack_require__(372);
exports.nullSymbol = Symbol("null");
const slashes = /\//g;
const tildes = /~/g;
const escapedSlash = /~1/g;
const escapedTilde = /~0/g;
const safeDecodeURIComponent = (encodedURIComponent) => {
    try {
        return decodeURIComponent(encodedURIComponent);
    }
    catch {
        return encodedURIComponent;
    }
};
/**
 * This class represents a single JSON pointer and its resolved value.
 *
 * @param $ref
 * @param path
 * @param [friendlyPath] - The original user-specified path (used for error messages)
 * @class
 */
class Pointer {
    constructor($ref, path, friendlyPath) {
        this.$ref = $ref;
        this.path = path;
        this.originalPath = friendlyPath || path;
        this.value = undefined;
        this.circular = false;
        this.indirections = 0;
    }
    /**
     * Resolves the value of a nested property within the given object.
     *
     * @param obj - The object that will be crawled
     * @param options
     * @param pathFromRoot - the path of place that initiated resolving
     *
     * @returns
     * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.
     * If resolving this value required resolving other JSON references, then
     * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path
     * of the resolved value.
     */
    resolve(obj, options, pathFromRoot) {
        const tokens = Pointer.parse(this.path, this.originalPath);
        const found = [];
        // Crawl the object, one token at a time
        this.value = unwrapOrThrow(obj);
        for (let i = 0; i < tokens.length; i++) {
            if (resolveIf$Ref(this, options, pathFromRoot)) {
                // The $ref path has changed, so append the remaining tokens to the path
                this.path = Pointer.join(this.path, tokens.slice(i));
            }
            const token = tokens[i];
            if (this.value[token] === undefined || (this.value[token] === null && i === tokens.length - 1)) {
                // one final case is if the entry itself includes slashes, and was parsed out as a token - we can join the remaining tokens and try again
                let didFindSubstringSlashMatch = false;
                for (let j = tokens.length - 1; j > i; j--) {
                    const joinedToken = tokens.slice(i, j + 1).join("/");
                    if (this.value[joinedToken] !== undefined) {
                        this.value = this.value[joinedToken];
                        i = j;
                        didFindSubstringSlashMatch = true;
                        break;
                    }
                }
                if (didFindSubstringSlashMatch) {
                    continue;
                }
                // If the token we're looking for ended up not containing any slashes but is
                // actually instead pointing to an existing `null` value then we should use that
                // `null` value.
                if (token in this.value && this.value[token] === null) {
                    // We use a `null` symbol for internal tracking to differntiate between a general `null`
                    // value and our expected `null` value.
                    this.value = exports.nullSymbol;
                    continue;
                }
                this.value = null;
                const path = this.$ref.path || "";
                const targetRef = this.path.replace(path, "");
                const targetFound = Pointer.join("", found);
                const parentPath = pathFromRoot?.replace(path, "");
                throw new errors_js_1.MissingPointerError(token, decodeURI(this.originalPath), targetRef, targetFound, parentPath);
            }
            else {
                this.value = this.value[token];
            }
            found.push(token);
        }
        // Resolve the final value
        if (!this.value || (this.value.$ref && url.resolve(this.path, this.value.$ref) !== pathFromRoot)) {
            resolveIf$Ref(this, options, pathFromRoot);
        }
        return this;
    }
    /**
     * Sets the value of a nested property within the given object.
     *
     * @param obj - The object that will be crawled
     * @param value - the value to assign
     * @param options
     *
     * @returns
     * Returns the modified object, or an entirely new object if the entire object is overwritten.
     */
    set(obj, value, options) {
        const tokens = Pointer.parse(this.path);
        let token;
        if (tokens.length === 0) {
            // There are no tokens, replace the entire object with the new value
            this.value = value;
            return value;
        }
        // Crawl the object, one token at a time
        this.value = unwrapOrThrow(obj);
        for (let i = 0; i < tokens.length - 1; i++) {
            resolveIf$Ref(this, options);
            token = tokens[i];
            if (this.value && this.value[token] !== undefined) {
                // The token exists
                this.value = this.value[token];
            }
            else {
                // The token doesn't exist, so create it
                this.value = setValue(this, token, {});
            }
        }
        // Set the value of the final token
        resolveIf$Ref(this, options);
        token = tokens[tokens.length - 1];
        setValue(this, token, value);
        // Return the updated object
        return obj;
    }
    /**
     * Parses a JSON pointer (or a path containing a JSON pointer in the hash)
     * and returns an array of the pointer's tokens.
     * (e.g. "schema.json#/definitions/person/name" => ["definitions", "person", "name"])
     *
     * The pointer is parsed according to RFC 6901
     * {@link https://tools.ietf.org/html/rfc6901#section-3}
     *
     * @param path
     * @param [originalPath]
     * @returns
     */
    static parse(path, originalPath) {
        // Get the JSON pointer from the path's hash
        const pointer = url.getHash(path).substring(1);
        // If there's no pointer, then there are no tokens,
        // so return an empty array
        if (!pointer) {
            return [];
        }
        // Split into an array
        const split = pointer.split("/");
        // Decode each part, according to RFC 6901
        for (let i = 0; i < split.length; i++) {
            split[i] = safeDecodeURIComponent(split[i].replace(escapedSlash, "/").replace(escapedTilde, "~"));
        }
        if (split[0] !== "") {
            throw new errors_js_1.InvalidPointerError(pointer, originalPath === undefined ? path : originalPath);
        }
        return split.slice(1);
    }
    /**
     * Creates a JSON pointer path, by joining one or more tokens to a base path.
     *
     * @param base - The base path (e.g. "schema.json#/definitions/person")
     * @param tokens - The token(s) to append (e.g. ["name", "first"])
     * @returns
     */
    static join(base, tokens) {
        // Ensure that the base path contains a hash
        if (base.indexOf("#") === -1) {
            base += "#";
        }
        // Append each token to the base path
        tokens = Array.isArray(tokens) ? tokens : [tokens];
        for (let i = 0; i < tokens.length; i++) {
            const token = tokens[i];
            // Encode the token, according to RFC 6901
            base += "/" + encodeURIComponent(token.replace(tildes, "~0").replace(slashes, "~1"));
        }
        return base;
    }
}
/**
 * If the given pointer's {@link Pointer#value} is a JSON reference,
 * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.
 * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the
 * resolution path of the new value.
 *
 * @param pointer
 * @param options
 * @param [pathFromRoot] - the path of place that initiated resolving
 * @returns - Returns `true` if the resolution path changed
 */
function resolveIf$Ref(pointer, options, pathFromRoot) {
    // Is the value a JSON reference? (and allowed?)
    if (ref_js_1.default.isAllowed$Ref(pointer.value, options)) {
        const $refPath = url.resolve(pointer.path, pointer.value.$ref);
        if ($refPath === pointer.path && !isRootPath(pathFromRoot)) {
            // The value is a reference to itself, so there's nothing to do.
            pointer.circular = true;
        }
        else {
            const resolved = pointer.$ref.$refs._resolve($refPath, pointer.path, options);
            if (resolved === null) {
                return false;
            }
            pointer.indirections += resolved.indirections + 1;
            if (ref_js_1.default.isExtended$Ref(pointer.value)) {
                // This JSON reference "extends" the resolved value, rather than simply pointing to it.
                // So the resolved path does NOT change.  Just the value does.
                pointer.value = ref_js_1.default.dereference(pointer.value, resolved.value);
                return false;
            }
            else {
                // Resolve the reference
                pointer.$ref = resolved.$ref;
                pointer.path = resolved.path;
                pointer.value = resolved.value;
            }
            return true;
        }
    }
    return undefined;
}
exports["default"] = Pointer;
/**
 * Sets the specified token value of the {@link Pointer#value}.
 *
 * The token is evaluated according to RFC 6901.
 * {@link https://tools.ietf.org/html/rfc6901#section-4}
 *
 * @param pointer - The JSON Pointer whose value will be modified
 * @param token - A JSON Pointer token that indicates how to modify `obj`
 * @param value - The value to assign
 * @returns - Returns the assigned value
 */
function setValue(pointer, token, value) {
    if (pointer.value && typeof pointer.value === "object") {
        if (token === "-" && Array.isArray(pointer.value)) {
            pointer.value.push(value);
        }
        else {
            pointer.value[token] = value;
        }
    }
    else {
        throw new errors_js_1.JSONParserError(`Error assigning $ref pointer "${pointer.path}". \nCannot set "${token}" of a non-object.`);
    }
    return value;
}
function unwrapOrThrow(value) {
    if ((0, errors_js_1.isHandledError)(value)) {
        throw value;
    }
    return value;
}
function isRootPath(pathFromRoot) {
    return typeof pathFromRoot == "string" && Pointer.parse(pathFromRoot).length == 0;
}


/***/ }),
/* 369 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parse = void 0;
exports.resolve = resolve;
exports.cwd = cwd;
exports.getProtocol = getProtocol;
exports.getExtension = getExtension;
exports.stripQuery = stripQuery;
exports.getHash = getHash;
exports.stripHash = stripHash;
exports.isHttp = isHttp;
exports.isFileSystemPath = isFileSystemPath;
exports.fromFileSystemPath = fromFileSystemPath;
exports.toFileSystemPath = toFileSystemPath;
exports.safePointerToPath = safePointerToPath;
exports.relative = relative;
const convert_path_to_posix_1 = __importDefault(__webpack_require__(370));
const path_1 = __importStar(__webpack_require__(143));
const forwardSlashPattern = /\//g;
const protocolPattern = /^(\w{2,}):\/\//i;
const jsonPointerSlash = /~1/g;
const jsonPointerTilde = /~0/g;
const path_2 = __webpack_require__(143);
const is_windows_1 = __webpack_require__(371);
// RegExp patterns to URL-encode special characters in local filesystem paths
const urlEncodePatterns = [
    [/\?/g, "%3F"],
    [/#/g, "%23"],
];
// RegExp patterns to URL-decode special characters for local filesystem paths
const urlDecodePatterns = [/%23/g, "#", /%24/g, "$", /%26/g, "&", /%2C/g, ",", /%40/g, "@"];
const parse = (u) => new URL(u);
exports.parse = parse;
/**
 * Returns resolved target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.
 *
 * @returns
 */
function resolve(from, to) {
    // we use a non-existent URL to check if its a relative URL
    const fromUrl = new URL((0, convert_path_to_posix_1.default)(from), "https://aaa.nonexistanturl.com");
    const resolvedUrl = new URL((0, convert_path_to_posix_1.default)(to), fromUrl);
    const endSpaces = to.match(/(\s*)$/)?.[1] || "";
    if (resolvedUrl.hostname === "aaa.nonexistanturl.com") {
        // `from` is a relative URL.
        const { pathname, search, hash } = resolvedUrl;
        return pathname + search + hash + endSpaces;
    }
    return resolvedUrl.toString() + endSpaces;
}
/**
 * Returns the current working directory (in Node) or the current page URL (in browsers).
 *
 * @returns
 */
function cwd() {
    if (typeof window !== "undefined") {
        return location.href;
    }
    const path = process.cwd();
    const lastChar = path.slice(-1);
    if (lastChar === "/" || lastChar === "\\") {
        return path;
    }
    else {
        return path + "/";
    }
}
/**
 * Returns the protocol of the given URL, or `undefined` if it has no protocol.
 *
 * @param path
 * @returns
 */
function getProtocol(path) {
    const match = protocolPattern.exec(path || "");
    if (match) {
        return match[1].toLowerCase();
    }
    return undefined;
}
/**
 * Returns the lowercased file extension of the given URL,
 * or an empty string if it has no extension.
 *
 * @param path
 * @returns
 */
function getExtension(path) {
    const lastDot = path.lastIndexOf(".");
    if (lastDot >= 0) {
        return stripQuery(path.substr(lastDot).toLowerCase());
    }
    return "";
}
/**
 * Removes the query, if any, from the given path.
 *
 * @param path
 * @returns
 */
function stripQuery(path) {
    const queryIndex = path.indexOf("?");
    if (queryIndex >= 0) {
        path = path.substr(0, queryIndex);
    }
    return path;
}
/**
 * Returns the hash (URL fragment), of the given path.
 * If there is no hash, then the root hash ("#") is returned.
 *
 * @param path
 * @returns
 */
function getHash(path) {
    if (!path) {
        return "#";
    }
    const hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
        return path.substring(hashIndex);
    }
    return "#";
}
/**
 * Removes the hash (URL fragment), if any, from the given path.
 *
 * @param path
 * @returns
 */
function stripHash(path) {
    if (!path) {
        return "";
    }
    const hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
        path = path.substring(0, hashIndex);
    }
    return path;
}
/**
 * Determines whether the given path is an HTTP(S) URL.
 *
 * @param path
 * @returns
 */
function isHttp(path) {
    const protocol = getProtocol(path);
    if (protocol === "http" || protocol === "https") {
        return true;
    }
    else if (protocol === undefined) {
        // There is no protocol.  If we're running in a browser, then assume it's HTTP.
        return typeof window !== "undefined";
    }
    else {
        // It's some other protocol, such as "ftp://", "mongodb://", etc.
        return false;
    }
}
/**
 * Determines whether the given path is a filesystem path.
 * This includes "file://" URLs.
 *
 * @param path
 * @returns
 */
function isFileSystemPath(path) {
    // @ts-ignore
    if (typeof window !== "undefined" || (typeof process !== "undefined" && process.browser)) {
        // We're running in a browser, so assume that all paths are URLs.
        // This way, even relative paths will be treated as URLs rather than as filesystem paths
        return false;
    }
    const protocol = getProtocol(path);
    return protocol === undefined || protocol === "file";
}
/**
 * Converts a filesystem path to a properly-encoded URL.
 *
 * This is intended to handle situations where JSON Schema $Ref Parser is called
 * with a filesystem path that contains characters which are not allowed in URLs.
 *
 * @example
 * The following filesystem paths would be converted to the following URLs:
 *
 *    <"!@#$%^&*+=?'>.json              ==>   %3C%22!@%23$%25%5E&*+=%3F\'%3E.json
 *    C:\\My Documents\\File (1).json   ==>   C:/My%20Documents/File%20(1).json
 *    file://Project #42/file.json      ==>   file://Project%20%2342/file.json
 *
 * @param path
 * @returns
 */
function fromFileSystemPath(path) {
    // Step 1: On Windows, replace backslashes with forward slashes,
    // rather than encoding them as "%5C"
    if ((0, is_windows_1.isWindows)()) {
        const projectDir = cwd();
        const upperPath = path.toUpperCase();
        const projectDirPosixPath = (0, convert_path_to_posix_1.default)(projectDir);
        const posixUpper = projectDirPosixPath.toUpperCase();
        const hasProjectDir = upperPath.includes(posixUpper);
        const hasProjectUri = upperPath.includes(posixUpper);
        const isAbsolutePath = path_1.win32?.isAbsolute(path) ||
            path.startsWith("http://") ||
            path.startsWith("https://") ||
            path.startsWith("file://");
        if (!(hasProjectDir || hasProjectUri || isAbsolutePath) && !projectDir.startsWith("http")) {
            path = (0, path_2.join)(projectDir, path);
        }
        path = (0, convert_path_to_posix_1.default)(path);
    }
    // Step 2: `encodeURI` will take care of MOST characters
    path = encodeURI(path);
    // Step 3: Manually encode characters that are not encoded by `encodeURI`.
    // This includes characters such as "#" and "?", which have special meaning in URLs,
    // but are just normal characters in a filesystem path.
    for (const pattern of urlEncodePatterns) {
        path = path.replace(pattern[0], pattern[1]);
    }
    return path;
}
/**
 * Converts a URL to a local filesystem path.
 */
function toFileSystemPath(path, keepFileProtocol) {
    // Step 1: `decodeURI` will decode characters such as Cyrillic characters, spaces, etc.
    path = decodeURI(path);
    // Step 2: Manually decode characters that are not decoded by `decodeURI`.
    // This includes characters such as "#" and "?", which have special meaning in URLs,
    // but are just normal characters in a filesystem path.
    for (let i = 0; i < urlDecodePatterns.length; i += 2) {
        path = path.replace(urlDecodePatterns[i], urlDecodePatterns[i + 1]);
    }
    // Step 3: If it's a "file://" URL, then format it consistently
    // or convert it to a local filesystem path
    let isFileUrl = path.substr(0, 7).toLowerCase() === "file://";
    if (isFileUrl) {
        // Strip-off the protocol, and the initial "/", if there is one
        path = path[7] === "/" ? path.substr(8) : path.substr(7);
        // insert a colon (":") after the drive letter on Windows
        if ((0, is_windows_1.isWindows)() && path[1] === "/") {
            path = path[0] + ":" + path.substr(1);
        }
        if (keepFileProtocol) {
            // Return the consistently-formatted "file://" URL
            path = "file:///" + path;
        }
        else {
            // Convert the "file://" URL to a local filesystem path.
            // On Windows, it will start with something like "C:/".
            // On Posix, it will start with "/"
            isFileUrl = false;
            path = (0, is_windows_1.isWindows)() ? path : "/" + path;
        }
    }
    // Step 4: Normalize Windows paths (unless it's a "file://" URL)
    if ((0, is_windows_1.isWindows)() && !isFileUrl) {
        // Replace forward slashes with backslashes
        path = path.replace(forwardSlashPattern, "\\");
        // Capitalize the drive letter
        if (path.substr(1, 2) === ":\\") {
            path = path[0].toUpperCase() + path.substr(1);
        }
    }
    return path;
}
/**
 * Converts a $ref pointer to a valid JSON Path.
 *
 * @param pointer
 * @returns
 */
function safePointerToPath(pointer) {
    if (pointer.length <= 1 || pointer[0] !== "#" || pointer[1] !== "/") {
        return [];
    }
    return pointer
        .slice(2)
        .split("/")
        .map((value) => {
        return decodeURIComponent(value).replace(jsonPointerSlash, "/").replace(jsonPointerTilde, "~");
    });
}
function relative(from, to) {
    if (!isFileSystemPath(from) || !isFileSystemPath(to)) {
        return resolve(from, to);
    }
    const fromDir = path_1.default.dirname(stripHash(from));
    const toPath = stripHash(to);
    const result = path_1.default.relative(fromDir, toPath);
    return result + getHash(to);
}


/***/ }),
/* 370 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = convertPathToPosix;
const path_1 = __importDefault(__webpack_require__(143));
function convertPathToPosix(filePath) {
    const isExtendedLengthPath = filePath.startsWith("\\\\?\\");
    if (isExtendedLengthPath) {
        return filePath;
    }
    return filePath.split(path_1.default?.win32?.sep).join(path_1.default?.posix?.sep ?? "/");
}


/***/ }),
/* 371 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isWindows = void 0;
const isWindowsConst = /^win/.test(globalThis.process ? globalThis.process.platform : "");
const isWindows = () => isWindowsConst;
exports.isWindows = isWindows;


/***/ }),
/* 372 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvalidPointerError = exports.TimeoutError = exports.MissingPointerError = exports.UnmatchedResolverError = exports.ResolverError = exports.UnmatchedParserError = exports.ParserError = exports.JSONParserErrorGroup = exports.JSONParserError = void 0;
exports.isHandledError = isHandledError;
exports.normalizeError = normalizeError;
const ono_1 = __webpack_require__(358);
const url_js_1 = __webpack_require__(369);
class JSONParserError extends Error {
    constructor(message, source) {
        super();
        this.code = "EUNKNOWN";
        this.name = "JSONParserError";
        this.message = message;
        this.source = source;
        this.path = null;
        ono_1.Ono.extend(this);
    }
    get footprint() {
        return `${this.path}+${this.source}+${this.code}+${this.message}`;
    }
}
exports.JSONParserError = JSONParserError;
class JSONParserErrorGroup extends Error {
    constructor(parser) {
        super();
        this.files = parser;
        this.name = "JSONParserErrorGroup";
        this.message = `${this.errors.length} error${this.errors.length > 1 ? "s" : ""} occurred while reading '${(0, url_js_1.toFileSystemPath)(parser.$refs._root$Ref.path)}'`;
        ono_1.Ono.extend(this);
    }
    static getParserErrors(parser) {
        const errors = [];
        for (const $ref of Object.values(parser.$refs._$refs)) {
            if ($ref.errors) {
                errors.push(...$ref.errors);
            }
        }
        return errors;
    }
    get errors() {
        return JSONParserErrorGroup.getParserErrors(this.files);
    }
}
exports.JSONParserErrorGroup = JSONParserErrorGroup;
class ParserError extends JSONParserError {
    constructor(message, source) {
        super(`Error parsing ${source}: ${message}`, source);
        this.code = "EPARSER";
        this.name = "ParserError";
    }
}
exports.ParserError = ParserError;
class UnmatchedParserError extends JSONParserError {
    constructor(source) {
        super(`Could not find parser for "${source}"`, source);
        this.code = "EUNMATCHEDPARSER";
        this.name = "UnmatchedParserError";
    }
}
exports.UnmatchedParserError = UnmatchedParserError;
class ResolverError extends JSONParserError {
    constructor(ex, source) {
        super(ex.message || `Error reading file "${source}"`, source);
        this.code = "ERESOLVER";
        this.name = "ResolverError";
        if ("code" in ex) {
            this.ioErrorCode = String(ex.code);
        }
    }
}
exports.ResolverError = ResolverError;
class UnmatchedResolverError extends JSONParserError {
    constructor(source) {
        super(`Could not find resolver for "${source}"`, source);
        this.code = "EUNMATCHEDRESOLVER";
        this.name = "UnmatchedResolverError";
    }
}
exports.UnmatchedResolverError = UnmatchedResolverError;
class MissingPointerError extends JSONParserError {
    constructor(token, path, targetRef, targetFound, parentPath) {
        super(`Missing $ref pointer "${(0, url_js_1.getHash)(path)}". Token "${token}" does not exist.`, (0, url_js_1.stripHash)(path));
        this.code = "EMISSINGPOINTER";
        this.name = "MissingPointerError";
        this.targetToken = token;
        this.targetRef = targetRef;
        this.targetFound = targetFound;
        this.parentPath = parentPath;
    }
}
exports.MissingPointerError = MissingPointerError;
class TimeoutError extends JSONParserError {
    constructor(timeout) {
        super(`Dereferencing timeout reached: ${timeout}ms`);
        this.code = "ETIMEOUT";
        this.name = "TimeoutError";
    }
}
exports.TimeoutError = TimeoutError;
class InvalidPointerError extends JSONParserError {
    constructor(pointer, path) {
        super(`Invalid $ref pointer "${pointer}". Pointers must begin with "#/"`, (0, url_js_1.stripHash)(path));
        this.code = "EUNMATCHEDRESOLVER";
        this.name = "InvalidPointerError";
    }
}
exports.InvalidPointerError = InvalidPointerError;
function isHandledError(err) {
    return err instanceof JSONParserError || err instanceof JSONParserErrorGroup;
}
function normalizeError(err) {
    if (err.path === null) {
        err.path = [];
    }
    return err;
}


/***/ }),
/* 373 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ono_1 = __webpack_require__(358);
const url = __importStar(__webpack_require__(369));
const plugins = __importStar(__webpack_require__(374));
const errors_js_1 = __webpack_require__(372);
/**
 * Reads and parses the specified file path or URL.
 */
async function parse(path, $refs, options) {
    // Remove the URL fragment, if any
    const hashIndex = path.indexOf("#");
    let hash = "";
    if (hashIndex >= 0) {
        hash = path.substring(hashIndex);
        // Remove the URL fragment, if any
        path = path.substring(0, hashIndex);
    }
    // Add a new $Ref for this file, even though we don't have the value yet.
    // This ensures that we don't simultaneously read & parse the same file multiple times
    const $ref = $refs._add(path);
    // This "file object" will be passed to all resolvers and parsers.
    const file = {
        url: path,
        hash,
        extension: url.getExtension(path),
    };
    // Read the file and then parse the data
    try {
        const resolver = await readFile(file, options, $refs);
        $ref.pathType = resolver.plugin.name;
        file.data = resolver.result;
        const parser = await parseFile(file, options, $refs);
        $ref.value = parser.result;
        return parser.result;
    }
    catch (err) {
        if ((0, errors_js_1.isHandledError)(err)) {
            $ref.value = err;
        }
        throw err;
    }
}
/**
 * Reads the given file, using the configured resolver plugins
 *
 * @param file           - An object containing information about the referenced file
 * @param file.url       - The full URL of the referenced file
 * @param file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
 * @param options
 * @param $refs
 * @returns
 * The promise resolves with the raw file contents and the resolver that was used.
 */
async function readFile(file, options, $refs) {
    // console.log('Reading %s', file.url);
    // Find the resolvers that can read this file
    let resolvers = plugins.all(options.resolve);
    resolvers = plugins.filter(resolvers, "canRead", file);
    // Run the resolvers, in order, until one of them succeeds
    plugins.sort(resolvers);
    try {
        const data = await plugins.run(resolvers, "read", file, $refs);
        return data;
    }
    catch (err) {
        if (!err && options.continueOnError) {
            // No resolver could be matched
            throw new errors_js_1.UnmatchedResolverError(file.url);
        }
        else if (!err || !("error" in err)) {
            // Throw a generic, friendly error.
            throw ono_1.ono.syntax(`Unable to resolve $ref pointer "${file.url}"`);
        }
        // Throw the original error, if it's one of our own (user-friendly) errors.
        else if (err.error instanceof errors_js_1.ResolverError) {
            throw err.error;
        }
        else {
            throw new errors_js_1.ResolverError(err, file.url);
        }
    }
}
/**
 * Parses the given file's contents, using the configured parser plugins.
 *
 * @param file           - An object containing information about the referenced file
 * @param file.url       - The full URL of the referenced file
 * @param file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
 * @param file.data      - The file contents. This will be whatever data type was returned by the resolver
 * @param options
 * @param $refs
 *
 * @returns
 * The promise resolves with the parsed file contents and the parser that was used.
 */
async function parseFile(file, options, $refs) {
    // Find the parsers that can read this file type.
    // If none of the parsers are an exact match for this file, then we'll try ALL of them.
    // This handles situations where the file IS a supported type, just with an unknown extension.
    const allParsers = plugins.all(options.parse);
    const filteredParsers = plugins.filter(allParsers, "canParse", file);
    const parsers = filteredParsers.length > 0 ? filteredParsers : allParsers;
    // Run the parsers, in order, until one of them succeeds
    plugins.sort(parsers);
    try {
        const parser = await plugins.run(parsers, "parse", file, $refs);
        if (!parser.plugin.allowEmpty && isEmpty(parser.result)) {
            throw ono_1.ono.syntax(`Error parsing "${file.url}" as ${parser.plugin.name}. \nParsed value is empty`);
        }
        else {
            return parser;
        }
    }
    catch (err) {
        if (!err && options.continueOnError) {
            // No resolver could be matched
            throw new errors_js_1.UnmatchedParserError(file.url);
        }
        else if (err && err.message && err.message.startsWith("Error parsing")) {
            throw err;
        }
        else if (!err || !("error" in err)) {
            throw ono_1.ono.syntax(`Unable to parse ${file.url}`);
        }
        else if (err.error instanceof errors_js_1.ParserError) {
            throw err.error;
        }
        else {
            throw new errors_js_1.ParserError(err.error.message, file.url);
        }
    }
}
/**
 * Determines whether the parsed value is "empty".
 *
 * @param value
 * @returns
 */
function isEmpty(value) {
    return (value === undefined ||
        (typeof value === "object" && Object.keys(value).length === 0) ||
        (typeof value === "string" && value.trim().length === 0) ||
        (Buffer.isBuffer(value) && value.length === 0));
}
exports["default"] = parse;


/***/ }),
/* 374 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.all = all;
exports.filter = filter;
exports.sort = sort;
exports.run = run;
/**
 * Returns the given plugins as an array, rather than an object map.
 * All other methods in this module expect an array of plugins rather than an object map.
 *
 * @returns
 */
function all(plugins) {
    return Object.keys(plugins || {})
        .filter((key) => {
        return typeof plugins[key] === "object";
    })
        .map((key) => {
        plugins[key].name = key;
        return plugins[key];
    });
}
/**
 * Filters the given plugins, returning only the ones return `true` for the given method.
 */
function filter(plugins, method, file) {
    return plugins.filter((plugin) => {
        return !!getResult(plugin, method, file);
    });
}
/**
 * Sorts the given plugins, in place, by their `order` property.
 */
function sort(plugins) {
    for (const plugin of plugins) {
        plugin.order = plugin.order || Number.MAX_SAFE_INTEGER;
    }
    return plugins.sort((a, b) => {
        return a.order - b.order;
    });
}
/**
 * Runs the specified method of the given plugins, in order, until one of them returns a successful result.
 * Each method can return a synchronous value, a Promise, or call an error-first callback.
 * If the promise resolves successfully, or the callback is called without an error, then the result
 * is immediately returned and no further plugins are called.
 * If the promise rejects, or the callback is called with an error, then the next plugin is called.
 * If ALL plugins fail, then the last error is thrown.
 */
async function run(plugins, method, file, $refs) {
    let plugin;
    let lastError;
    let index = 0;
    return new Promise((resolve, reject) => {
        runNextPlugin();
        function runNextPlugin() {
            plugin = plugins[index++];
            if (!plugin) {
                // There are no more functions, so re-throw the last error
                return reject(lastError);
            }
            try {
                // console.log('  %s', plugin.name);
                const result = getResult(plugin, method, file, callback, $refs);
                if (result && typeof result.then === "function") {
                    // A promise was returned
                    result.then(onSuccess, onError);
                }
                else if (result !== undefined) {
                    // A synchronous result was returned
                    onSuccess(result);
                }
                else if (index === plugins.length) {
                    throw new Error("No promise has been returned or callback has been called.");
                }
            }
            catch (e) {
                onError(e);
            }
        }
        function callback(err, result) {
            if (err) {
                onError(err);
            }
            else {
                onSuccess(result);
            }
        }
        function onSuccess(result) {
            // console.log('    success');
            resolve({
                plugin,
                result,
            });
        }
        function onError(error) {
            // console.log('    %s', err.message || err);
            lastError = {
                plugin,
                error,
            };
            runNextPlugin();
        }
    });
}
/**
 * Returns the value of the given property.
 * If the property is a function, then the result of the function is returned.
 * If the value is a RegExp, then it will be tested against the file URL.
 * If the value is an array, then it will be compared against the file extension.
 */
function getResult(obj, prop, file, callback, $refs) {
    const value = obj[prop];
    if (typeof value === "function") {
        return value.apply(obj, [file, callback, $refs]);
    }
    if (!callback) {
        // The synchronous plugin functions (canParse and canRead)
        // allow a "shorthand" syntax, where the user can match
        // files by RegExp or by file extension.
        if (value instanceof RegExp) {
            return value.test(file.url);
        }
        else if (typeof value === "string") {
            return value === file.extension;
        }
        else if (Array.isArray(value)) {
            return value.indexOf(file.extension) !== -1;
        }
    }
    return value;
}


/***/ }),
/* 375 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeArgs = normalizeArgs;
const options_js_1 = __webpack_require__(376);
/**
 * Normalizes the given arguments, accounting for optional args.
 */
function normalizeArgs(_args) {
    let path;
    let schema;
    let options;
    let callback;
    const args = Array.prototype.slice.call(_args);
    if (typeof args[args.length - 1] === "function") {
        // The last parameter is a callback function
        callback = args.pop();
    }
    if (typeof args[0] === "string") {
        // The first parameter is the path
        path = args[0];
        if (typeof args[2] === "object") {
            // The second parameter is the schema, and the third parameter is the options
            schema = args[1];
            options = args[2];
        }
        else {
            // The second parameter is the options
            schema = undefined;
            options = args[1];
        }
    }
    else {
        // The first parameter is the schema
        path = "";
        schema = args[0];
        options = args[1];
    }
    try {
        options = (0, options_js_1.getNewOptions)(options);
    }
    catch (e) {
        console.error(`JSON Schema Ref Parser: Error normalizing options: ${e}`);
    }
    if (!options.mutateInputSchema && typeof schema === "object") {
        // Make a deep clone of the schema, so that we don't alter the original object
        schema = JSON.parse(JSON.stringify(schema));
    }
    return {
        path,
        schema,
        options,
        callback,
    };
}
exports["default"] = normalizeArgs;


/***/ }),
/* 376 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getNewOptions = exports.getJsonSchemaRefParserDefaultOptions = void 0;
const json_js_1 = __importDefault(__webpack_require__(377));
const yaml_js_1 = __importDefault(__webpack_require__(378));
const text_js_1 = __importDefault(__webpack_require__(404));
const binary_js_1 = __importDefault(__webpack_require__(405));
const file_js_1 = __importDefault(__webpack_require__(406));
const http_js_1 = __importDefault(__webpack_require__(407));
const getJsonSchemaRefParserDefaultOptions = () => {
    const defaults = {
        /**
         * Determines how different types of files will be parsed.
         *
         * You can add additional parsers of your own, replace an existing one with
         * your own implementation, or disable any parser by setting it to false.
         */
        parse: {
            json: { ...json_js_1.default },
            yaml: { ...yaml_js_1.default },
            text: { ...text_js_1.default },
            binary: { ...binary_js_1.default },
        },
        /**
         * Determines how JSON References will be resolved.
         *
         * You can add additional resolvers of your own, replace an existing one with
         * your own implementation, or disable any resolver by setting it to false.
         */
        resolve: {
            file: { ...file_js_1.default },
            http: { ...http_js_1.default },
            /**
             * Determines whether external $ref pointers will be resolved.
             * If this option is disabled, then none of above resolvers will be called.
             * Instead, external $ref pointers will simply be ignored.
             *
             * @type {boolean}
             */
            external: true,
        },
        /**
         * By default, JSON Schema $Ref Parser throws the first error it encounters. Setting `continueOnError` to `true`
         * causes it to keep processing as much as possible and then throw a single error that contains all errors
         * that were encountered.
         */
        continueOnError: false,
        /**
         * Determines the types of JSON references that are allowed.
         */
        dereference: {
            /**
             * Dereference circular (recursive) JSON references?
             * If false, then a {@link ReferenceError} will be thrown if a circular reference is found.
             * If "ignore", then circular references will not be dereferenced.
             *
             * @type {boolean|string}
             */
            circular: true,
            /**
             * A function, called for each path, which can return true to stop this path and all
             * subpaths from being dereferenced further. This is useful in schemas where some
             * subpaths contain literal $ref keys that should not be dereferenced.
             *
             * @type {function}
             */
            excludedPathMatcher: () => false,
            referenceResolution: "relative",
        },
        mutateInputSchema: true,
    };
    return defaults;
};
exports.getJsonSchemaRefParserDefaultOptions = getJsonSchemaRefParserDefaultOptions;
const getNewOptions = (options) => {
    const newOptions = (0, exports.getJsonSchemaRefParserDefaultOptions)();
    if (options) {
        merge(newOptions, options);
    }
    return newOptions;
};
exports.getNewOptions = getNewOptions;
/**
 * Merges the properties of the source object into the target object.
 *
 * @param target - The object that we're populating
 * @param source - The options that are being merged
 * @returns
 */
function merge(target, source) {
    if (isMergeable(source)) {
        // prevent prototype pollution
        const keys = Object.keys(source).filter((key) => !["__proto__", "constructor", "prototype"].includes(key));
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const sourceSetting = source[key];
            const targetSetting = target[key];
            if (isMergeable(sourceSetting)) {
                // It's a nested object, so merge it recursively
                target[key] = merge(targetSetting || {}, sourceSetting);
            }
            else if (sourceSetting !== undefined) {
                // It's a scalar value, function, or array. No merging necessary. Just overwrite the target value.
                target[key] = sourceSetting;
            }
        }
    }
    return target;
}
/**
 * Determines whether the given value can be merged,
 * or if it is a scalar value that should just override the target value.
 *
 * @param val
 * @returns
 */
function isMergeable(val) {
    return val && typeof val === "object" && !Array.isArray(val) && !(val instanceof RegExp) && !(val instanceof Date);
}


/***/ }),
/* 377 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const errors_js_1 = __webpack_require__(372);
exports["default"] = {
    /**
     * The order that this parser will run, in relation to other parsers.
     */
    order: 100,
    /**
     * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
     */
    allowEmpty: true,
    /**
     * Determines whether this parser can parse a given file reference.
     * Parsers that match will be tried, in order, until one successfully parses the file.
     * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
     * every parser will be tried.
     */
    canParse: ".json",
    /**
     * Allow JSON files with byte order marks (BOM)
     */
    allowBOM: true,
    /**
     * Parses the given file as JSON
     */
    async parse(file) {
        let data = file.data;
        if (Buffer.isBuffer(data)) {
            data = data.toString();
        }
        if (typeof data === "string") {
            if (data.trim().length === 0) {
                return; // This mirrors the YAML behavior
            }
            else {
                try {
                    return JSON.parse(data);
                }
                catch (e) {
                    if (this.allowBOM) {
                        try {
                            // find the first curly brace
                            const firstCurlyBrace = data.indexOf("{");
                            // remove any characters before the first curly brace
                            data = data.slice(firstCurlyBrace);
                            return JSON.parse(data);
                        }
                        catch (e) {
                            throw new errors_js_1.ParserError(e.message, file.url);
                        }
                    }
                    throw new errors_js_1.ParserError(e.message, file.url);
                }
            }
        }
        else {
            // data is already a JavaScript value (object, array, number, null, NaN, etc.)
            return data;
        }
    },
};


/***/ }),
/* 378 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const errors_js_1 = __webpack_require__(372);
const js_yaml_1 = __importDefault(__webpack_require__(379));
const js_yaml_2 = __webpack_require__(379);
exports["default"] = {
    /**
     * The order that this parser will run, in relation to other parsers.
     */
    order: 200,
    /**
     * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
     */
    allowEmpty: true,
    /**
     * Determines whether this parser can parse a given file reference.
     * Parsers that match will be tried, in order, until one successfully parses the file.
     * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
     * every parser will be tried.
     */
    canParse: [".yaml", ".yml", ".json"], // JSON is valid YAML
    /**
     * Parses the given file as YAML
     *
     * @param file           - An object containing information about the referenced file
     * @param file.url       - The full URL of the referenced file
     * @param file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
     * @param file.data      - The file contents. This will be whatever data type was returned by the resolver
     * @returns
     */
    async parse(file) {
        let data = file.data;
        if (Buffer.isBuffer(data)) {
            data = data.toString();
        }
        if (typeof data === "string") {
            try {
                return js_yaml_1.default.load(data, { schema: js_yaml_2.JSON_SCHEMA });
            }
            catch (e) {
                throw new errors_js_1.ParserError(e?.message || "Parser Error", file.url);
            }
        }
        else {
            // data is already a JavaScript value (object, array, number, null, NaN, etc.)
            return data;
        }
    },
};


/***/ }),
/* 379 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var loader = __webpack_require__(380);
var dumper = __webpack_require__(403);


function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +
      'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}


module.exports.Type = __webpack_require__(389);
module.exports.Schema = __webpack_require__(388);
module.exports.FAILSAFE_SCHEMA = __webpack_require__(387);
module.exports.JSON_SCHEMA = __webpack_require__(386);
module.exports.CORE_SCHEMA = __webpack_require__(385);
module.exports.DEFAULT_SCHEMA = __webpack_require__(384);
module.exports.load                = loader.load;
module.exports.loadAll             = loader.loadAll;
module.exports.dump                = dumper.dump;
module.exports.YAMLException = __webpack_require__(382);

// Re-export all types in case user wants to create custom schema
module.exports.types = {
  binary:    __webpack_require__(399),
  float:     __webpack_require__(396),
  map:       __webpack_require__(392),
  null:      __webpack_require__(393),
  pairs:     __webpack_require__(401),
  set:       __webpack_require__(402),
  timestamp: __webpack_require__(397),
  bool:      __webpack_require__(394),
  int:       __webpack_require__(395),
  merge:     __webpack_require__(398),
  omap:      __webpack_require__(400),
  seq:       __webpack_require__(391),
  str:       __webpack_require__(390)
};

// Removed functions from JS-YAML 3.0.x
module.exports.safeLoad            = renamed('safeLoad', 'load');
module.exports.safeLoadAll         = renamed('safeLoadAll', 'loadAll');
module.exports.safeDump            = renamed('safeDump', 'dump');


/***/ }),
/* 380 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len,no-use-before-define*/

var common              = __webpack_require__(381);
var YAMLException       = __webpack_require__(382);
var makeSnippet         = __webpack_require__(383);
var DEFAULT_SCHEMA      = __webpack_require__(384);


var _hasOwnProperty = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || DEFAULT_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive
  this.legacy    = options['legacy']    || false;

  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation
  this.firstTabInLine = -1;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  var mark = {
    name:     state.filename,
    buffer:   state.input.slice(0, -1), // omit trailing \0
    position: state.position,
    line:     state.line,
    column:   state.position - state.lineStart
  };

  mark.snippet = makeSnippet(mark);

  return new YAMLException(message, mark);
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,
  startLine, startLineStart, startPos) {

  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty.call(overridableKeys, keyNode) &&
        _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    // used for this specific key only because Object.defineProperty is slow
    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _lineStart,
      _pos,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = Object.create(null),
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C/* , */) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line; // Save the current line.
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _keyLine,
      _keyLineStart,
      _keyPos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = Object.create(null),
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;

      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }

      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      typeList,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }

  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }

    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];

      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];

      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }

    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }

    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }

    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException('expected a single document in the stream, but found more');
}


module.exports.loadAll = loadAll;
module.exports.load    = load;


/***/ }),
/* 381 */
/***/ ((module) => {

"use strict";



function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


module.exports.isNothing      = isNothing;
module.exports.isObject       = isObject;
module.exports.toArray        = toArray;
module.exports.repeat         = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend         = extend;


/***/ }),
/* 382 */
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//



function formatError(exception, compact) {
  var where = '', message = exception.reason || '(unknown reason)';

  if (!exception.mark) return message;

  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }

  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';

  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }

  return message + ' ' + where;
}


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;


YAMLException.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};


module.exports = YAMLException;


/***/ }),
/* 383 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var common = __webpack_require__(381);


// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;

  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }

  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }

  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position
  };
}


function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}


function makeSnippet(mark, options) {
  options = Object.create(options || null);

  if (!mark.buffer) return null;

  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent      !== 'number') options.indent      = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;

  var re = /\r?\n|\r|\0/g;
  var lineStarts = [ 0 ];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;

  while ((match = re.exec(mark.buffer))) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);

    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }

  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;

  var result = '', i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);

  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n' + result;
  }

  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +
    ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';

  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n';
  }

  return result.replace(/\n$/, '');
}


module.exports = makeSnippet;


/***/ }),
/* 384 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)





module.exports = (__webpack_require__(385).extend)({
  implicit: [
    __webpack_require__(397),
    __webpack_require__(398)
  ],
  explicit: [
    __webpack_require__(399),
    __webpack_require__(400),
    __webpack_require__(401),
    __webpack_require__(402)
  ]
});


/***/ }),
/* 385 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.





module.exports = __webpack_require__(386);


/***/ }),
/* 386 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.





module.exports = (__webpack_require__(387).extend)({
  implicit: [
    __webpack_require__(393),
    __webpack_require__(394),
    __webpack_require__(395),
    __webpack_require__(396)
  ]
});


/***/ }),
/* 387 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346





var Schema = __webpack_require__(388);


module.exports = new Schema({
  explicit: [
    __webpack_require__(390),
    __webpack_require__(391),
    __webpack_require__(392)
  ]
});


/***/ }),
/* 388 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len*/

var YAMLException = __webpack_require__(382);
var Type          = __webpack_require__(389);


function compileList(schema, name) {
  var result = [];

  schema[name].forEach(function (currentType) {
    var newIndex = result.length;

    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag &&
          previousType.kind === currentType.kind &&
          previousType.multi === currentType.multi) {

        newIndex = previousIndex;
      }
    });

    result[newIndex] = currentType;
  });

  return result;
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;

  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema(definition) {
  return this.extend(definition);
}


Schema.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];

  if (definition instanceof Type) {
    // Schema.extend(type)
    explicit.push(definition);

  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);

  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);

  } else {
    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' +
      'or a schema definition ({ implicit: [...], explicit: [...] })');
  }

  implicit.forEach(function (type) {
    if (!(type instanceof Type)) {
      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }

    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }

    if (type.multi) {
      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });

  explicit.forEach(function (type) {
    if (!(type instanceof Type)) {
      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });

  var result = Object.create(Schema.prototype);

  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);

  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);

  return result;
};


module.exports = Schema;


/***/ }),
/* 389 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__(382);

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'multi',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'representName',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options       = options; // keep original options in case user wants to extend this type later
  this.tag           = tag;
  this.kind          = options['kind']          || null;
  this.resolve       = options['resolve']       || function () { return true; };
  this.construct     = options['construct']     || function (data) { return data; };
  this.instanceOf    = options['instanceOf']    || null;
  this.predicate     = options['predicate']     || null;
  this.represent     = options['represent']     || null;
  this.representName = options['representName'] || null;
  this.defaultStyle  = options['defaultStyle']  || null;
  this.multi         = options['multi']         || false;
  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;


/***/ }),
/* 390 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});


/***/ }),
/* 391 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});


/***/ }),
/* 392 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});


/***/ }),
/* 393 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; },
    empty:     function () { return '';     }
  },
  defaultStyle: 'lowercase'
});


/***/ }),
/* 394 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),
/* 395 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(381);
var Type   = __webpack_require__(389);

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'o') {
      // base 8
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
  }

  // base 10 (except 0)

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  return true;
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch;

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});


/***/ }),
/* 396 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(381);
var Type   = __webpack_require__(389);

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});


/***/ }),
/* 397 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});


/***/ }),
/* 398 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});


/***/ }),
/* 399 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-bitwise*/


var Type = __webpack_require__(389);


// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  return new Uint8Array(result);
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(obj) {
  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});


/***/ }),
/* 400 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});


/***/ }),
/* 401 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});


/***/ }),
/* 402 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(389);

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});


/***/ }),
/* 403 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-use-before-define*/

var common              = __webpack_require__(381);
var YAMLException       = __webpack_require__(382);
var DEFAULT_SCHEMA      = __webpack_require__(384);

var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_BOM                  = 0xFEFF;
var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}


var QUOTING_TYPE_SINGLE = 1,
    QUOTING_TYPE_DOUBLE = 2;

function State(options) {
  this.schema        = options['schema'] || DEFAULT_SCHEMA;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;
  this.quotingType   = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes   = options['forceQuotes'] || false;
  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
  return isPrintable(c)
    && c !== CHAR_BOM
    // - b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    inblock ? // c = flow-in
      cIsNsCharOrWhitespace
      : cIsNsCharOrWhitespace
        // - c-flow-indicator
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
  )
    // ns-plain-char
    && c !== CHAR_SHARP // false on '#'
    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'
    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
}

// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,
  testAmbiguousType, quotingType, forceQuotes, inblock) {

  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(codePointAt(string, 0))
          && isPlainSafeLast(codePointAt(string, string.length - 1));

  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = (function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('"' + string + '"') : ("'" + string + "'");
      }
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,
      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {

      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';
      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;

  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];

    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level, value, false, false) ||
        (typeof value === 'undefined' &&
         writeNode(state, level, null, false, false))) {

      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level + 1, value, true, true, false, true) ||
        (typeof value === 'undefined' &&
         writeNode(state, level + 1, null, true, true, false, true))) {

      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);
  var inblock = block;
  var tagStr;

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && (state.dump.length !== 0)) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(
        state.tag[0] === '!' ? state.tag.slice(1) : state.tag
      ).replace(/!/g, '%21');

      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }

      state.dump = tagStr + ' ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  var value = input;

  if (state.replacer) {
    value = state.replacer.call({ '': value }, '', value);
  }

  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';

  return '';
}

module.exports.dump = dump;


/***/ }),
/* 404 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const errors_js_1 = __webpack_require__(372);
const TEXT_REGEXP = /\.(txt|htm|html|md|xml|js|min|map|css|scss|less|svg)$/i;
exports["default"] = {
    /**
     * The order that this parser will run, in relation to other parsers.
     */
    order: 300,
    /**
     * Whether to allow "empty" files (zero bytes).
     */
    allowEmpty: true,
    /**
     * The encoding that the text is expected to be in.
     */
    encoding: "utf8",
    /**
     * Determines whether this parser can parse a given file reference.
     * Parsers that return true will be tried, in order, until one successfully parses the file.
     * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case
     * every parser will be tried.
     */
    canParse(file) {
        // Use this parser if the file is a string or Buffer, and has a known text-based extension
        return (typeof file.data === "string" || Buffer.isBuffer(file.data)) && TEXT_REGEXP.test(file.url);
    },
    /**
     * Parses the given file as text
     */
    parse(file) {
        if (typeof file.data === "string") {
            return file.data;
        }
        else if (Buffer.isBuffer(file.data)) {
            return file.data.toString(this.encoding);
        }
        else {
            throw new errors_js_1.ParserError("data is not text", file.url);
        }
    },
};


/***/ }),
/* 405 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const BINARY_REGEXP = /\.(jpeg|jpg|gif|png|bmp|ico)$/i;
exports["default"] = {
    /**
     * The order that this parser will run, in relation to other parsers.
     */
    order: 400,
    /**
     * Whether to allow "empty" files (zero bytes).
     */
    allowEmpty: true,
    /**
     * Determines whether this parser can parse a given file reference.
     * Parsers that return true will be tried, in order, until one successfully parses the file.
     * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case
     * every parser will be tried.
     */
    canParse(file) {
        // Use this parser if the file is a Buffer, and has a known binary extension
        return Buffer.isBuffer(file.data) && BINARY_REGEXP.test(file.url);
    },
    /**
     * Parses the given data as a Buffer (byte array).
     */
    parse(file) {
        if (Buffer.isBuffer(file.data)) {
            return file.data;
        }
        else {
            // This will reject if data is anything other than a string or typed array
            return Buffer.from(file.data);
        }
    },
};


/***/ }),
/* 406 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const fs_1 = __importDefault(__webpack_require__(142));
const ono_1 = __webpack_require__(358);
const url = __importStar(__webpack_require__(369));
const errors_js_1 = __webpack_require__(372);
exports["default"] = {
    /**
     * The order that this resolver will run, in relation to other resolvers.
     */
    order: 100,
    /**
     * Determines whether this resolver can read a given file reference.
     * Resolvers that return true will be tried, in order, until one successfully resolves the file.
     * Resolvers that return false will not be given a chance to resolve the file.
     */
    canRead(file) {
        return url.isFileSystemPath(file.url);
    },
    /**
     * Reads the given file and returns its raw contents as a Buffer.
     */
    async read(file) {
        let path;
        try {
            path = url.toFileSystemPath(file.url);
        }
        catch (err) {
            throw new errors_js_1.ResolverError(ono_1.ono.uri(err, `Malformed URI: ${file.url}`), file.url);
        }
        try {
            return await fs_1.default.promises.readFile(path);
        }
        catch (err) {
            throw new errors_js_1.ResolverError((0, ono_1.ono)(err, `Error opening file "${path}"`), path);
        }
    },
};


/***/ }),
/* 407 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ono_1 = __webpack_require__(358);
const url = __importStar(__webpack_require__(369));
const errors_js_1 = __webpack_require__(372);
exports["default"] = {
    /**
     * The order that this resolver will run, in relation to other resolvers.
     */
    order: 200,
    /**
     * HTTP headers to send when downloading files.
     *
     * @example:
     * {
     *   "User-Agent": "JSON Schema $Ref Parser",
     *   Accept: "application/json"
     * }
     */
    headers: null,
    /**
     * HTTP request timeout (in milliseconds).
     */
    timeout: 60000, // 60 seconds
    /**
     * The maximum number of HTTP redirects to follow.
     * To disable automatic following of redirects, set this to zero.
     */
    redirects: 5,
    /**
     * The `withCredentials` option of XMLHttpRequest.
     * Set this to `true` if you're downloading files from a CORS-enabled server that requires authentication
     */
    withCredentials: false,
    /**
     * Determines whether this resolver can read a given file reference.
     * Resolvers that return true will be tried in order, until one successfully resolves the file.
     * Resolvers that return false will not be given a chance to resolve the file.
     */
    canRead(file) {
        return url.isHttp(file.url);
    },
    /**
     * Reads the given URL and returns its raw contents as a Buffer.
     */
    read(file) {
        const u = url.parse(file.url);
        if (typeof window !== "undefined" && !u.protocol) {
            // Use the protocol of the current page
            u.protocol = url.parse(location.href).protocol;
        }
        return download(u, this);
    },
};
/**
 * Downloads the given file.
 * @returns
 * The promise resolves with the raw downloaded data, or rejects if there is an HTTP error.
 */
async function download(u, httpOptions, _redirects) {
    u = url.parse(u);
    const redirects = _redirects || [];
    redirects.push(u.href);
    try {
        const res = await get(u, httpOptions);
        if (res.status >= 400) {
            throw (0, ono_1.ono)({ status: res.status }, `HTTP ERROR ${res.status}`);
        }
        else if (res.status >= 300) {
            if (!Number.isNaN(httpOptions.redirects) && redirects.length > httpOptions.redirects) {
                throw new errors_js_1.ResolverError((0, ono_1.ono)({ status: res.status }, `Error downloading ${redirects[0]}. \nToo many redirects: \n  ${redirects.join(" \n  ")}`));
            }
            else if (!("location" in res.headers) || !res.headers.location) {
                throw (0, ono_1.ono)({ status: res.status }, `HTTP ${res.status} redirect with no location header`);
            }
            else {
                const redirectTo = url.resolve(u.href, res.headers.location);
                return download(redirectTo, httpOptions, redirects);
            }
        }
        else {
            if (res.body) {
                const buf = await res.arrayBuffer();
                return Buffer.from(buf);
            }
            return Buffer.alloc(0);
        }
    }
    catch (err) {
        throw new errors_js_1.ResolverError((0, ono_1.ono)(err, `Error downloading ${u.href}`), u.href);
    }
}
/**
 * Sends an HTTP GET request.
 * The promise resolves with the HTTP Response object.
 */
async function get(u, httpOptions) {
    let controller;
    let timeoutId;
    if (httpOptions.timeout) {
        controller = new AbortController();
        timeoutId = setTimeout(() => controller.abort(), httpOptions.timeout);
    }
    const response = await fetch(u, {
        method: "GET",
        headers: httpOptions.headers || {},
        credentials: httpOptions.withCredentials ? "include" : "same-origin",
        signal: controller ? controller.signal : null,
    });
    if (timeoutId) {
        clearTimeout(timeoutId);
    }
    return response;
}


/***/ }),
/* 408 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ref_js_1 = __importDefault(__webpack_require__(367));
const pointer_js_1 = __importDefault(__webpack_require__(368));
const parse_js_1 = __importDefault(__webpack_require__(373));
const url = __importStar(__webpack_require__(369));
const errors_js_1 = __webpack_require__(372);
/**
 * Crawls the JSON schema, finds all external JSON references, and resolves their values.
 * This method does not mutate the JSON schema. The resolved values are added to {@link $RefParser#$refs}.
 *
 * NOTE: We only care about EXTERNAL references here. INTERNAL references are only relevant when dereferencing.
 *
 * @returns
 * The promise resolves once all JSON references in the schema have been resolved,
 * including nested references that are contained in externally-referenced files.
 */
function resolveExternal(parser, options) {
    if (!options.resolve?.external) {
        // Nothing to resolve, so exit early
        return Promise.resolve();
    }
    try {
        // console.log('Resolving $ref pointers in %s', parser.$refs._root$Ref.path);
        const promises = crawl(parser.schema, parser.$refs._root$Ref.path + "#", parser.$refs, options);
        return Promise.all(promises);
    }
    catch (e) {
        return Promise.reject(e);
    }
}
/**
 * Recursively crawls the given value, and resolves any external JSON references.
 *
 * @param obj - The value to crawl. If it's not an object or array, it will be ignored.
 * @param path - The full path of `obj`, possibly with a JSON Pointer in the hash
 * @param {boolean} external - Whether `obj` was found in an external document.
 * @param $refs
 * @param options
 * @param seen - Internal.
 *
 * @returns
 * Returns an array of promises. There will be one promise for each JSON reference in `obj`.
 * If `obj` does not contain any JSON references, then the array will be empty.
 * If any of the JSON references point to files that contain additional JSON references,
 * then the corresponding promise will internally reference an array of promises.
 */
function crawl(obj, path, $refs, options, seen, external) {
    seen || (seen = new Set());
    let promises = [];
    if (obj && typeof obj === "object" && !ArrayBuffer.isView(obj) && !seen.has(obj)) {
        seen.add(obj); // Track previously seen objects to avoid infinite recursion
        if (ref_js_1.default.isExternal$Ref(obj)) {
            promises.push(resolve$Ref(obj, path, $refs, options));
        }
        const keys = Object.keys(obj);
        for (const key of keys) {
            const keyPath = pointer_js_1.default.join(path, key);
            const value = obj[key];
            promises = promises.concat(crawl(value, keyPath, $refs, options, seen, external));
        }
    }
    return promises;
}
/**
 * Resolves the given JSON Reference, and then crawls the resulting value.
 *
 * @param $ref - The JSON Reference to resolve
 * @param path - The full path of `$ref`, possibly with a JSON Pointer in the hash
 * @param $refs
 * @param options
 *
 * @returns
 * The promise resolves once all JSON references in the object have been resolved,
 * including nested references that are contained in externally-referenced files.
 */
async function resolve$Ref($ref, path, $refs, options) {
    const shouldResolveOnCwd = options.dereference?.externalReferenceResolution === "root";
    const resolvedPath = url.resolve(shouldResolveOnCwd ? url.cwd() : path, $ref.$ref);
    const withoutHash = url.stripHash(resolvedPath);
    // $ref.$ref = url.relative($refs._root$Ref.path, resolvedPath);
    // Do we already have this $ref?
    const ref = $refs._$refs[withoutHash];
    if (ref) {
        // We've already parsed this $ref, so use the existing value
        return Promise.resolve(ref.value);
    }
    // Parse the $referenced file/url
    try {
        const result = await (0, parse_js_1.default)(resolvedPath, $refs, options);
        // Crawl the parsed value
        // console.log('Resolving $ref pointers in %s', withoutHash);
        const promises = crawl(result, withoutHash + "#", $refs, options, new Set(), true);
        return Promise.all(promises);
    }
    catch (err) {
        if (!options?.continueOnError || !(0, errors_js_1.isHandledError)(err)) {
            throw err;
        }
        if ($refs._$refs[withoutHash]) {
            err.source = decodeURI(url.stripHash(path));
            err.path = url.safePointerToPath(url.getHash(path));
        }
        return [];
    }
}
exports["default"] = resolveExternal;


/***/ }),
/* 409 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ref_js_1 = __importDefault(__webpack_require__(367));
const pointer_js_1 = __importDefault(__webpack_require__(368));
const url = __importStar(__webpack_require__(369));
/**
 * Bundles all external JSON references into the main JSON schema, thus resulting in a schema that
 * only has *internal* references, not any *external* references.
 * This method mutates the JSON schema object, adding new references and re-mapping existing ones.
 *
 * @param parser
 * @param options
 */
function bundle(parser, options) {
    // console.log('Bundling $ref pointers in %s', parser.$refs._root$Ref.path);
    // Build an inventory of all $ref pointers in the JSON Schema
    const inventory = [];
    crawl(parser, "schema", parser.$refs._root$Ref.path + "#", "#", 0, inventory, parser.$refs, options);
    // Remap all $ref pointers
    remap(inventory);
}
/**
 * Recursively crawls the given value, and inventories all JSON references.
 *
 * @param parent - The object containing the value to crawl. If the value is not an object or array, it will be ignored.
 * @param key - The property key of `parent` to be crawled
 * @param path - The full path of the property being crawled, possibly with a JSON Pointer in the hash
 * @param pathFromRoot - The path of the property being crawled, from the schema root
 * @param indirections
 * @param inventory - An array of already-inventoried $ref pointers
 * @param $refs
 * @param options
 */
function crawl(parent, key, path, pathFromRoot, indirections, inventory, $refs, options) {
    const obj = key === null ? parent : parent[key];
    if (obj && typeof obj === "object" && !ArrayBuffer.isView(obj)) {
        if (ref_js_1.default.isAllowed$Ref(obj)) {
            inventory$Ref(parent, key, path, pathFromRoot, indirections, inventory, $refs, options);
        }
        else {
            // Crawl the object in a specific order that's optimized for bundling.
            // This is important because it determines how `pathFromRoot` gets built,
            // which later determines which keys get dereferenced and which ones get remapped
            const keys = Object.keys(obj).sort((a, b) => {
                // Most people will expect references to be bundled into the the "definitions" property,
                // so we always crawl that property first, if it exists.
                if (a === "definitions" || a === "$defs") {
                    return -1;
                }
                else if (b === "definitions" || b === "$defs") {
                    return 1;
                }
                else {
                    // Otherwise, crawl the keys based on their length.
                    // This produces the shortest possible bundled references
                    return a.length - b.length;
                }
            });
            for (const key of keys) {
                const keyPath = pointer_js_1.default.join(path, key);
                const keyPathFromRoot = pointer_js_1.default.join(pathFromRoot, key);
                const value = obj[key];
                if (ref_js_1.default.isAllowed$Ref(value)) {
                    inventory$Ref(obj, key, path, keyPathFromRoot, indirections, inventory, $refs, options);
                }
                else {
                    crawl(obj, key, keyPath, keyPathFromRoot, indirections, inventory, $refs, options);
                }
            }
        }
    }
}
/**
 * Inventories the given JSON Reference (i.e. records detailed information about it so we can
 * optimize all $refs in the schema), and then crawls the resolved value.
 *
 * @param $refParent - The object that contains a JSON Reference as one of its keys
 * @param $refKey - The key in `$refParent` that is a JSON Reference
 * @param path - The full path of the JSON Reference at `$refKey`, possibly with a JSON Pointer in the hash
 * @param indirections - unknown
 * @param pathFromRoot - The path of the JSON Reference at `$refKey`, from the schema root
 * @param inventory - An array of already-inventoried $ref pointers
 * @param $refs
 * @param options
 */
function inventory$Ref($refParent, $refKey, path, pathFromRoot, indirections, inventory, $refs, options) {
    const $ref = $refKey === null ? $refParent : $refParent[$refKey];
    const $refPath = url.resolve(path, $ref.$ref);
    const pointer = $refs._resolve($refPath, pathFromRoot, options);
    if (pointer === null) {
        return;
    }
    const parsed = pointer_js_1.default.parse(pathFromRoot);
    const depth = parsed.length;
    const file = url.stripHash(pointer.path);
    const hash = url.getHash(pointer.path);
    const external = file !== $refs._root$Ref.path;
    const extended = ref_js_1.default.isExtended$Ref($ref);
    indirections += pointer.indirections;
    const existingEntry = findInInventory(inventory, $refParent, $refKey);
    if (existingEntry) {
        // This $Ref has already been inventoried, so we don't need to process it again
        if (depth < existingEntry.depth || indirections < existingEntry.indirections) {
            removeFromInventory(inventory, existingEntry);
        }
        else {
            return;
        }
    }
    inventory.push({
        $ref, // The JSON Reference (e.g. {$ref: string})
        parent: $refParent, // The object that contains this $ref pointer
        key: $refKey, // The key in `parent` that is the $ref pointer
        pathFromRoot, // The path to the $ref pointer, from the JSON Schema root
        depth, // How far from the JSON Schema root is this $ref pointer?
        file, // The file that the $ref pointer resolves to
        hash, // The hash within `file` that the $ref pointer resolves to
        value: pointer.value, // The resolved value of the $ref pointer
        circular: pointer.circular, // Is this $ref pointer DIRECTLY circular? (i.e. it references itself)
        extended, // Does this $ref extend its resolved value? (i.e. it has extra properties, in addition to "$ref")
        external, // Does this $ref pointer point to a file other than the main JSON Schema file?
        indirections, // The number of indirect references that were traversed to resolve the value
    });
    // Recursively crawl the resolved value
    if (!existingEntry || external) {
        crawl(pointer.value, null, pointer.path, pathFromRoot, indirections + 1, inventory, $refs, options);
    }
}
/**
 * Re-maps every $ref pointer, so that they're all relative to the root of the JSON Schema.
 * Each referenced value is dereferenced EXACTLY ONCE.  All subsequent references to the same
 * value are re-mapped to point to the first reference.
 *
 * @example: {
 *    first: { $ref: somefile.json#/some/part },
 *    second: { $ref: somefile.json#/another/part },
 *    third: { $ref: somefile.json },
 *    fourth: { $ref: somefile.json#/some/part/sub/part }
 *  }
 *
 * In this example, there are four references to the same file, but since the third reference points
 * to the ENTIRE file, that's the only one we need to dereference.  The other three can just be
 * remapped to point inside the third one.
 *
 * On the other hand, if the third reference DIDN'T exist, then the first and second would both need
 * to be dereferenced, since they point to different parts of the file. The fourth reference does NOT
 * need to be dereferenced, because it can be remapped to point inside the first one.
 *
 * @param inventory
 */
function remap(inventory) {
    // Group & sort all the $ref pointers, so they're in the order that we need to dereference/remap them
    inventory.sort((a, b) => {
        if (a.file !== b.file) {
            // Group all the $refs that point to the same file
            return a.file < b.file ? -1 : +1;
        }
        else if (a.hash !== b.hash) {
            // Group all the $refs that point to the same part of the file
            return a.hash < b.hash ? -1 : +1;
        }
        else if (a.circular !== b.circular) {
            // If the $ref points to itself, then sort it higher than other $refs that point to this $ref
            return a.circular ? -1 : +1;
        }
        else if (a.extended !== b.extended) {
            // If the $ref extends the resolved value, then sort it lower than other $refs that don't extend the value
            return a.extended ? +1 : -1;
        }
        else if (a.indirections !== b.indirections) {
            // Sort direct references higher than indirect references
            return a.indirections - b.indirections;
        }
        else if (a.depth !== b.depth) {
            // Sort $refs by how close they are to the JSON Schema root
            return a.depth - b.depth;
        }
        else {
            // Determine how far each $ref is from the "definitions" property.
            // Most people will expect references to be bundled into the the "definitions" property if possible.
            const aDefinitionsIndex = Math.max(a.pathFromRoot.lastIndexOf("/definitions"), a.pathFromRoot.lastIndexOf("/$defs"));
            const bDefinitionsIndex = Math.max(b.pathFromRoot.lastIndexOf("/definitions"), b.pathFromRoot.lastIndexOf("/$defs"));
            if (aDefinitionsIndex !== bDefinitionsIndex) {
                // Give higher priority to the $ref that's closer to the "definitions" property
                return bDefinitionsIndex - aDefinitionsIndex;
            }
            else {
                // All else is equal, so use the shorter path, which will produce the shortest possible reference
                return a.pathFromRoot.length - b.pathFromRoot.length;
            }
        }
    });
    let file, hash, pathFromRoot;
    for (const entry of inventory) {
        // console.log('Re-mapping $ref pointer "%s" at %s', entry.$ref.$ref, entry.pathFromRoot);
        if (!entry.external) {
            // This $ref already resolves to the main JSON Schema file
            entry.$ref.$ref = entry.hash;
        }
        else if (entry.file === file && entry.hash === hash) {
            // This $ref points to the same value as the prevous $ref, so remap it to the same path
            entry.$ref.$ref = pathFromRoot;
        }
        else if (entry.file === file && entry.hash.indexOf(hash + "/") === 0) {
            // This $ref points to a sub-value of the prevous $ref, so remap it beneath that path
            entry.$ref.$ref = pointer_js_1.default.join(pathFromRoot, pointer_js_1.default.parse(entry.hash.replace(hash, "#")));
        }
        else {
            // We've moved to a new file or new hash
            file = entry.file;
            hash = entry.hash;
            pathFromRoot = entry.pathFromRoot;
            // This is the first $ref to point to this value, so dereference the value.
            // Any other $refs that point to the same value will point to this $ref instead
            entry.$ref = entry.parent[entry.key] = ref_js_1.default.dereference(entry.$ref, entry.value);
            if (entry.circular) {
                // This $ref points to itself
                entry.$ref.$ref = entry.pathFromRoot;
            }
        }
    }
    // we want to ensure that any $refs that point to another $ref are remapped to point to the final value
    // let hadChange = true;
    // while (hadChange) {
    //   hadChange = false;
    //   for (const entry of inventory) {
    //     if (entry.$ref && typeof entry.$ref === "object" && "$ref" in entry.$ref) {
    //       const resolved = inventory.find((e: InventoryEntry) => e.pathFromRoot === entry.$ref.$ref);
    //       if (resolved) {
    //         const resolvedPointsToAnotherRef =
    //           resolved.$ref && typeof resolved.$ref === "object" && "$ref" in resolved.$ref;
    //         if (resolvedPointsToAnotherRef && entry.$ref.$ref !== resolved.$ref.$ref) {
    //           // console.log('Re-mapping $ref pointer "%s" at %s', entry.$ref.$ref, entry.pathFromRoot);
    //           entry.$ref.$ref = resolved.$ref.$ref;
    //           hadChange = true;
    //         }
    //       }
    //     }
    //   }
    // }
}
/**
 * TODO
 */
function findInInventory(inventory, $refParent, $refKey) {
    for (const existingEntry of inventory) {
        if (existingEntry && existingEntry.parent === $refParent && existingEntry.key === $refKey) {
            return existingEntry;
        }
    }
    return undefined;
}
function removeFromInventory(inventory, entry) {
    const index = inventory.indexOf(entry);
    inventory.splice(index, 1);
}
exports["default"] = bundle;


/***/ }),
/* 410 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ref_js_1 = __importDefault(__webpack_require__(367));
const pointer_js_1 = __importDefault(__webpack_require__(368));
const ono_1 = __webpack_require__(358);
const url = __importStar(__webpack_require__(369));
const errors_1 = __webpack_require__(372);
exports["default"] = dereference;
/**
 * Crawls the JSON schema, finds all JSON references, and dereferences them.
 * This method mutates the JSON schema object, replacing JSON references with their resolved value.
 *
 * @param parser
 * @param options
 */
function dereference(parser, options) {
    const start = Date.now();
    // console.log('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);
    const dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, "#", new Set(), new Set(), new Map(), parser.$refs, options, start);
    parser.$refs.circular = dereferenced.circular;
    parser.schema = dereferenced.value;
}
/**
 * Recursively crawls the given value, and dereferences any JSON references.
 *
 * @param obj - The value to crawl. If it's not an object or array, it will be ignored.
 * @param path - The full path of `obj`, possibly with a JSON Pointer in the hash
 * @param pathFromRoot - The path of `obj` from the schema root
 * @param parents - An array of the parent objects that have already been dereferenced
 * @param processedObjects - An array of all the objects that have already been processed
 * @param dereferencedCache - An map of all the dereferenced objects
 * @param $refs
 * @param options
 * @param startTime - The time when the dereferencing started
 * @returns
 */
function crawl(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options, startTime) {
    let dereferenced;
    const result = {
        value: obj,
        circular: false,
    };
    checkDereferenceTimeout(startTime, options);
    const derefOptions = (options.dereference || {});
    const isExcludedPath = derefOptions.excludedPathMatcher || (() => false);
    if (derefOptions?.circular === "ignore" || !processedObjects.has(obj)) {
        if (obj && typeof obj === "object" && !ArrayBuffer.isView(obj) && !isExcludedPath(pathFromRoot)) {
            parents.add(obj);
            processedObjects.add(obj);
            if (ref_js_1.default.isAllowed$Ref(obj, options)) {
                dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options, startTime);
                result.circular = dereferenced.circular;
                result.value = dereferenced.value;
            }
            else {
                for (const key of Object.keys(obj)) {
                    checkDereferenceTimeout(startTime, options);
                    const keyPath = pointer_js_1.default.join(path, key);
                    const keyPathFromRoot = pointer_js_1.default.join(pathFromRoot, key);
                    if (isExcludedPath(keyPathFromRoot)) {
                        continue;
                    }
                    const value = obj[key];
                    let circular = false;
                    if (ref_js_1.default.isAllowed$Ref(value, options)) {
                        dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options, startTime);
                        circular = dereferenced.circular;
                        // Avoid pointless mutations; breaks frozen objects to no profit
                        if (obj[key] !== dereferenced.value) {
                            // If we have properties we want to preserve from our dereferenced schema then we need
                            // to copy them over to our new object.
                            const preserved = new Map();
                            if (derefOptions?.preservedProperties) {
                                if (typeof obj[key] === "object" && !Array.isArray(obj[key])) {
                                    derefOptions?.preservedProperties.forEach((prop) => {
                                        if (prop in obj[key]) {
                                            preserved.set(prop, obj[key][prop]);
                                        }
                                    });
                                }
                            }
                            obj[key] = dereferenced.value;
                            // If we have data to preserve and our dereferenced object is still an object then
                            // we need copy back our preserved data into our dereferenced schema.
                            if (derefOptions?.preservedProperties) {
                                if (preserved.size && typeof obj[key] === "object" && !Array.isArray(obj[key])) {
                                    preserved.forEach((value, prop) => {
                                        obj[key][prop] = value;
                                    });
                                }
                            }
                            derefOptions?.onDereference?.(value.$ref, obj[key], obj, key);
                        }
                    }
                    else {
                        if (!parents.has(value)) {
                            dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options, startTime);
                            circular = dereferenced.circular;
                            // Avoid pointless mutations; breaks frozen objects to no profit
                            if (obj[key] !== dereferenced.value) {
                                obj[key] = dereferenced.value;
                            }
                        }
                        else {
                            circular = foundCircularReference(keyPath, $refs, options);
                        }
                    }
                    // Set the "isCircular" flag if this or any other property is circular
                    result.circular = result.circular || circular;
                }
            }
            parents.delete(obj);
        }
    }
    return result;
}
/**
 * Dereferences the given JSON Reference, and then crawls the resulting value.
 *
 * @param $ref - The JSON Reference to resolve
 * @param path - The full path of `$ref`, possibly with a JSON Pointer in the hash
 * @param pathFromRoot - The path of `$ref` from the schema root
 * @param parents - An array of the parent objects that have already been dereferenced
 * @param processedObjects - An array of all the objects that have already been dereferenced
 * @param dereferencedCache - An map of all the dereferenced objects
 * @param $refs
 * @param options
 * @returns
 */
function dereference$Ref($ref, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options, startTime) {
    const isExternalRef = ref_js_1.default.isExternal$Ref($ref);
    const shouldResolveOnCwd = isExternalRef && options?.dereference?.externalReferenceResolution === "root";
    const $refPath = url.resolve(shouldResolveOnCwd ? url.cwd() : path, $ref.$ref);
    const cache = dereferencedCache.get($refPath);
    if (cache) {
        // If the object we found is circular we can immediately return it because it would have been
        // cached with everything we need already and we don't need to re-process anything inside it.
        //
        // If the cached object however is _not_ circular and there are additional keys alongside our
        // `$ref` pointer here we should merge them back in and return that.
        if (!cache.circular) {
            const refKeys = Object.keys($ref);
            if (refKeys.length > 1) {
                const extraKeys = {};
                for (const key of refKeys) {
                    if (key !== "$ref" && !(key in cache.value)) {
                        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
                        extraKeys[key] = $ref[key];
                    }
                }
                return {
                    circular: cache.circular,
                    value: Object.assign({}, cache.value, extraKeys),
                };
            }
            return cache;
        }
        // If both our cached value and our incoming `$ref` are the same then we can return what we
        // got out of the cache, otherwise we should re-process this value. We need to do this because
        // the current dereference caching mechanism doesn't take into account that `$ref` are neither
        // unique or reference the same file.
        //
        // For example if `schema.yaml` references `definitions/child.yaml` and
        // `definitions/parent.yaml` references `child.yaml` then `$ref: 'child.yaml'` may get cached
        // for `definitions/child.yaml`, resulting in `schema.yaml` being having an invalid reference
        // to `child.yaml`.
        //
        // This check is not perfect and the design of the dereference caching mechanism needs a total
        // overhaul.
        if (typeof cache.value === "object" && "$ref" in cache.value && "$ref" in $ref) {
            if (cache.value.$ref === $ref.$ref) {
                return cache;
            }
            else {
                // no-op
            }
        }
        else {
            return cache;
        }
    }
    const pointer = $refs._resolve($refPath, path, options);
    if (pointer === null) {
        return {
            circular: false,
            value: null,
        };
    }
    // Check for circular references
    const directCircular = pointer.circular;
    let circular = directCircular || parents.has(pointer.value);
    if (circular) {
        foundCircularReference(path, $refs, options);
    }
    // Dereference the JSON reference
    let dereferencedValue = ref_js_1.default.dereference($ref, pointer.value);
    // Crawl the dereferenced value (unless it's circular)
    if (!circular) {
        // Determine if the dereferenced value is circular
        const dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options, startTime);
        circular = dereferenced.circular;
        dereferencedValue = dereferenced.value;
    }
    if (circular && !directCircular && options.dereference?.circular === "ignore") {
        // The user has chosen to "ignore" circular references, so don't change the value
        dereferencedValue = $ref;
    }
    if (directCircular) {
        // The pointer is a DIRECT circular reference (i.e. it references itself).
        // So replace the $ref path with the absolute path from the JSON Schema root
        dereferencedValue.$ref = pathFromRoot;
    }
    const dereferencedObject = {
        circular,
        value: dereferencedValue,
    };
    // only cache if no extra properties than $ref
    if (Object.keys($ref).length === 1) {
        dereferencedCache.set($refPath, dereferencedObject);
    }
    return dereferencedObject;
}
/**
 * Check if we've run past our allowed timeout and throw an error if we have.
 *
 * @param startTime - The time when the dereferencing started.
 * @param options
 */
function checkDereferenceTimeout(startTime, options) {
    if (options && options.timeoutMs) {
        if (Date.now() - startTime > options.timeoutMs) {
            throw new errors_1.TimeoutError(options.timeoutMs);
        }
    }
}
/**
 * Called when a circular reference is found.
 * It sets the {@link $Refs#circular} flag, executes the options.dereference.onCircular callback,
 * and throws an error if options.dereference.circular is false.
 *
 * @param keyPath - The JSON Reference path of the circular reference
 * @param $refs
 * @param options
 * @returns - always returns true, to indicate that a circular reference was found
 */
function foundCircularReference(keyPath, $refs, options) {
    $refs.circular = true;
    options?.dereference?.onCircular?.(keyPath);
    if (!options.dereference.circular) {
        throw ono_1.ono.reference(`Circular $ref pointer found at ${keyPath}`);
    }
    return true;
}


/***/ }),
/* 411 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = maybe;
const next_js_1 = __importDefault(__webpack_require__(412));
function maybe(cb, promise) {
    if (cb) {
        promise.then(function (result) {
            (0, next_js_1.default)(function () {
                cb(null, result);
            });
        }, function (err) {
            (0, next_js_1.default)(function () {
                cb(err);
            });
        });
        return undefined;
    }
    else {
        return promise;
    }
}


/***/ }),
/* 412 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function makeNext() {
    if (typeof process === "object" && typeof process.nextTick === "function") {
        return process.nextTick;
    }
    else if (typeof setImmediate === "function") {
        return setImmediate;
    }
    else {
        return function next(f) {
            setTimeout(f, 0);
        };
    }
}
exports["default"] = makeNext();


/***/ }),
/* 413 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

const { log } = __webpack_require__(294);
const uuid = __webpack_require__(119);
const { loadDescription } = __webpack_require__(298);

exports.resolveDetectedTests = resolveDetectedTests;

// Doc Detective actions that require a driver.
const driverActions = [
  "click",
  "find",
  "goTo",
  "record",
  "screenshot",
  "stopRecord",
  "type",
];

function isDriverRequired({ test }) {
  let driverRequired = false;
  test.steps.forEach((step) => {
    // Check if test includes actions that require a driver.
    driverActions.forEach((action) => {
      if (typeof step[action] !== "undefined") driverRequired = true;
    });
  });
  return driverRequired;
}

function resolveContexts({ contexts, test, config }) {
  const resolvedContexts = [];

  // Check if current test requires a browser
  let browserRequired = false;
  test.steps.forEach((step) => {
    // Check if test includes actions that require a driver.
    driverActions.forEach((action) => {
      if (typeof step[action] !== "undefined") browserRequired = true;
    });
  });

  // Standardize context format
  contexts.forEach((context) => {
    if (context.browsers) {
      if (
        typeof context.browsers === "string" ||
        (typeof context.browsers === "object" &&
          !Array.isArray(context.browsers))
      ) {
        // If browsers is a string or an object, convert to array
        context.browsers = [context.browsers];
      }
      context.browsers = context.browsers.map((browser) => {
        if (typeof browser === "string") {
          browser = { name: browser };
        }
        if (browser.name === "safari") browser.name = "webkit";
        return browser;
      });
    }
    if (context.platforms) {
      if (typeof context.platforms === "string") {
        context.platforms = [context.platforms];
      }
    }
  });

  // Resolve to final contexts. Each context should include a single platform and at most a single browser.
  // If no browsers are required, filter down to platform-based contexts
  // If browsers are required, create contexts for each specified combination of platform and browser
  contexts.forEach((context) => {
    const staticContexts = [];
    context.platforms.forEach((platform) => {
      if (!browserRequired) {
        const staticContext = { platform };
        staticContexts.push(staticContext);
      } else {
        context.browsers.forEach((browser) => {
          const staticContext = { platform, browser };
          staticContexts.push(staticContext);
        });
      }
    });
    // For each static context, check if a matching object already exists in resolvedContexts. If not, push to resolvedContexts.
    staticContexts.forEach((staticContext) => {
      const existingContext = resolvedContexts.find((resolvedContext) => {
        return (
          resolvedContext.platform === staticContext.platform &&
          JSON.stringify(resolvedContext.browser) ===
            JSON.stringify(staticContext.browser)
        );
      });
      if (!existingContext) {
        resolvedContexts.push(staticContext);
      }
    });
  });

  // If no contexts are defined, use default contexts
  if (resolvedContexts.length === 0) {
    resolvedContexts.push({});
  }

  return resolvedContexts;
}

async function fetchOpenApiDocuments({ config, documentArray }) {
  const openApiDocuments = [];
  if (config?.integrations?.openApi?.length > 0)
    openApiDocuments.push(...config.integrations.openApi);
  if (documentArray?.length > 0) {
    for (const definition of documentArray) {
      try {
        const openApiDefinition = await loadDescription(
          definition.descriptionPath
        );
        definition.definition = openApiDefinition;
      } catch (error) {
        log(
          config,
          "error",
          `Failed to load OpenAPI definition from ${definition.descriptionPath}: ${error.message}`
        );
        continue; // Skip this definition
      }
      const existingDefinitionIndex = openApiDocuments.findIndex(
        (def) => def.name === definition.name
      );
      if (existingDefinitionIndex > -1) {
        openApiDocuments.splice(existingDefinitionIndex, 1);
      }
      openApiDocuments.push(definition);
    }
  }
  return openApiDocuments;
}

// Iterate through and resolve test specifications and contained tests.
async function resolveDetectedTests({ config, detectedTests }) {
  // Set initial shorthand values
  const resolvedTests = {
    config: config,
    specs: [],
  };

  // Iterate specs
  log(config, "info", "Resolving test specs.");
  for (const spec of detectedTests) {
    const resolvedSpec = await resolveSpec({ config, spec });
    resolvedTests.specs.push(resolvedSpec);
  }

  return resolvedTests;
}

async function resolveSpec({ config, spec }) {
  const specId = spec.specId || uuid.v4();
  log(config, "debug", `SPEC: ${specId}`);
  const resolvedSpec = {
    ...spec,
    specId: specId,
    runOn: spec.runOn || config.runOn || [],
    openApi: await fetchOpenApiDocuments({
      config,
      documentArray: spec.openApi,
    }),
    tests: [],
  };
  for (const test of spec.tests) {
    const resolvedTest = await resolveTest({
      config,
      spec: resolvedSpec,
      test,
    });
    resolvedSpec.tests.push(resolvedTest);
  }
  return resolvedSpec;
}

async function resolveTest({ config, spec, test }) {
  const testId = test.testId || uuid.v4();
  log(config, "debug", `TEST: ${testId}`);
  const resolvedTest = {
    ...test,
    testId: testId,
    runOn: test.runOn || spec.runOn,
    openApi: await fetchOpenApiDocuments({
      config,
      documentArray: [...spec.openApi, ...(test.openApi || [])],
    }),
    contexts: [],
  };
  delete resolvedTest.steps;

  const testContexts = resolveContexts({
    test: test,
    contexts: resolvedTest.runOn,
    config: config,
  });

  for (const context of testContexts) {
    const resolvedContext = await resolveContext({
      config,
      test: test,
      context,
    });
    resolvedTest.contexts.push(resolvedContext);
  }

  return resolvedTest;
}

async function resolveContext({ config, test, context }) {
  const contextId = context.contextId || uuid.v4();
  log(config, "debug", `CONTEXT: ${contextId}`);
  const resolvedContext = {
    ...context,
    openApi: test.openApi || [],
    steps: [...test.steps],
    contextId: contextId,
  };
  return resolvedContext;
}


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__(__webpack_require__.s = 0);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=extension.js.map